# podman-compose.yml - Alternative compose file optimized for Podman
version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: myotel-postgres
    environment:
      POSTGRES_DB: myoteldb
      POSTGRES_USER: myoteluser
      POSTGRES_PASSWORD: myotelpass123
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./init-db:/docker-entrypoint-initdb.d:Z
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myoteluser", "-d", "myoteldb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - myotel-network
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myotel-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_HTTP_PORTS=8080
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=myoteldb;Username=myoteluser;Password=myotelpass123;Include Error Detail=true;
      - OpenTelemetry__ServiceName=MyOpenTelemetryApi-Podman
      - OpenTelemetry__ServiceVersion=1.0.0-podman
      - OpenTelemetry__Exporter__Console__Enabled=true
      - OpenTelemetry__Exporter__File__Enabled=true
      - OpenTelemetry__Exporter__File__LogPath=/app/logs/otel-logs.json
      - OpenTelemetry__Exporter__OTLP__Enabled=false
      - OpenTelemetry__Sampling__AlwaysOn=true
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Information
      - Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command=Information
      - Logging__LogLevel__MyOpenTelemetryApi=Debug
    ports:
      - "5174:8080"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:Z
    networks:
      - myotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Optional: Jaeger for OpenTelemetry tracing (uncomment if needed)
  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: myotel-jaeger
  #   ports:
  #     - "16686:16686"
  #     - "14250:14250"
  #     - "14268:14268"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true
  #   networks:
  #     - myotel-network
  #   profiles:
  #     - observability

  # Optional: Prometheus for metrics collection (uncomment if needed)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: myotel-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:Z
  #   networks:
  #     - myotel-network
  #   profiles:
  #     - observability

  # Optional: Grafana for visualization (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: myotel-grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin123
  #   volumes:
  #     - grafana_data:/var/lib/grafana:Z
  #   networks:
  #     - myotel-network
  #   profiles:
  #     - observability

volumes:
  postgres_data:
    driver: local
  # grafana_data:
  #   driver: local

networks:
  myotel-network:
    driver: bridge