
===============================================================================
ASP.NET PROJECT EXPORT
Generated: 10/22/2025 13:27:56
Project Path: D:\DEV\MyOpenTelemetryApi
===============================================================================

DIRECTORY STRUCTURE:
===================

Folder PATH listing for volume DATA
Volume serial number is 128B-05C1
D:\DEV\MYOPENTELEMETRYAPI
|   .dockerignore
|   .editorconfig
|   .gitattributes
|   .gitignore
|   appsettings.Container.json
|   CONTAINER_SETUP.md
|   Directory.Build.props
|   Directory.Build.targets
|   Directory.Packages.props
|   Directory.Packages.props.backup
|   docker-compose.yml
|   Dockerfile
|   Dockerfile.migrations
|   Export-Project.ps1
|   LICENSE.txt
|   MyOpenTelemetryApi.sln
|   my_project_export.txt
|   omnibus.ps1
|   podman-compose.yml
|   README.md
|   
+---.github
|   |   dependabot.yml
|   |   
|   \---workflows
|           ci.yml
|           codeql.yml
|           
+---docs
|       contact-manager-specification-sheet-backend.md
|       contact-manager-specification-sheet.md
|       firewall.png
|       llm.md
|       log-sample.7z
|       otel-logs-json.md
|       otel-logs.7z
|       scratch.md
|       Windows PowerShell.txt
|       
+---src
|   +---MyOpenTelemetryApi.Api
|   |   |   appsettings.Development.json
|   |   |   appsettings.json
|   |   |   appsettings.Production.json
|   |   |   dependencies.json
|   |   |   MyOpenTelemetryApi.Api.csproj
|   |   |   MyOpenTelemetryApi.Api.http
|   |   |   Program.cs
|   |   |   
|   |   +---Authentication
|   |   |       ApiKeyAuthenticationHandler.cs
|   |   |       
|   |   +---Controllers
|   |   |       ContactsController.cs
|   |   |       GroupsController.cs
|   |   |       HealthController.cs
|   |   |       TagsController.cs
|   |   |       
|   |   +---Properties
|   |   |       launchSettings.json
|   |   |       
|   |   \---Telemetry
|   |           FileExporter.cs
|   |           TelemetryConstants.cs
|   |           TelemetryExtensions.cs
|   |           
|   +---MyOpenTelemetryApi.Application
|   |   |   MyOpenTelemetryApi.Application.csproj
|   |   |   
|   |   +---DTOs
|   |   |       AddressDto.cs
|   |   |       ContactDto.cs
|   |   |       ContactSummaryDto.cs
|   |   |       CreateContactDto.cs
|   |   |       EmailAddressDto.cs
|   |   |       GroupDto.cs
|   |   |       PaginatedResultDto.cs
|   |   |       PhoneNumberDto.cs
|   |   |       TagDto.cs
|   |   |       UpdateContactDto.cs
|   |   |       
|   |   \---Services
|   |           ContactService.cs
|   |           GroupService.cs
|   |           IContactService.cs
|   |           IGroupService.cs
|   |           ITagService.cs
|   |           TagService.cs
|   |           
|   +---MyOpenTelemetryApi.Domain
|   |   |   MyOpenTelemetryApi.Domain.csproj
|   |   |   
|   |   +---Entities
|   |   |       Address.cs
|   |   |       AddressType.cs
|   |   |       Contact.cs
|   |   |       ContactGroup.cs
|   |   |       ContactTag.cs
|   |   |       EmailAddress.cs
|   |   |       EmailType.cs
|   |   |       Group.cs
|   |   |       PhoneNumber.cs
|   |   |       PhoneType.cs
|   |   |       Tag.cs
|   |   |       
|   |   \---Interfaces
|   |           IContactRepository.cs
|   |           IGroupRepository.cs
|   |           IRepository.cs
|   |           ITagRepository.cs
|   |           IUnitOfWork.cs
|   |           
|   \---MyOpenTelemetryApi.Infrastructure
|       |   MyOpenTelemetryApi.Infrastructure.csproj
|       |   
|       +---Data
|       |   |   AppDbContext.cs
|       |   |   
|       |   +---Configurations
|       |   |       AddressConfiguration.cs
|       |   |       ContactConfiguration.cs
|       |   |       ContactGroupConfiguration.cs
|       |   |       ContactTagConfiguration.cs
|       |   |       EmailAddressConfiguration.cs
|       |   |       GroupConfiguration.cs
|       |   |       PhoneNumberConfiguration.cs
|       |   |       TagConfiguration.cs
|       |   |       
|       |   \---Migrations
|       |           20250804231722_InitialCreate.cs
|       |           20250804231722_InitialCreate.Designer.cs
|       |           20251003222820_AddContactPaginationIndexes.cs
|       |           20251003222820_AddContactPaginationIndexes.Designer.cs
|       |           AppDbContextModelSnapshot.cs
|       |           
|       \---Repositories
|               ContactRepository.cs
|               GroupRepository.cs
|               Repository.cs
|               TagRepository.cs
|               UnitOfWork.cs
|               
\---tests
    +---MyOpenTelemetryApi.Api.Tests
    |       MyOpenTelemetryApi.Api.Tests.csproj
    |       UnitTest1.cs
    |       
    +---MyOpenTelemetryApi.Application.Tests
    |       MyOpenTelemetryApi.Application.Tests.csproj
    |       UnitTest1.cs
    |       
    \---MyOpenTelemetryApi.Infrastructure.Tests
            MyOpenTelemetryApi.Infrastructure.Tests.csproj
            UnitTest1.cs
            


FILE CONTENTS:
==============

================================================================================
FILE: .github\dependabot.yml
SIZE: 0.63 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

# .github/dependabot.yml
version: 2
updates:
  - package-ecosystem: "nuget"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
    open-pull-requests-limit: 5
    groups:
      microsoft-packages:
        patterns:
          - "Microsoft.*"
          - "System.*"
      opentelemetry:
        patterns:
          - "OpenTelemetry*"
      test-packages:
        patterns:
          - "xunit*"
          - "coverlet*"
          - "*.Test.*"

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
    open-pull-requests-limit: 5




================================================================================
FILE: .github\workflows\ci.yml
SIZE: 5.02 KB
MODIFIED: 10/21/2025 10:17:42
================================================================================

# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '10.0.x'
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger "console;verbosity=detailed" --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.17
      with:
        reports: coverage/**/coverage.cobertura.xml
        targetdir: coverage-report
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
        verbosity: 'Info'

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Add coverage PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        path: coverage-report/SummaryGithub.md

    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef --version 10.0.0-rc.2.*

    - name: Run EF Core migrations check
      run: dotnet ef migrations has-pending-model-changes --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Test database migrations
      run: dotnet ef database update --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Run integration tests (if any)
      run: |
        echo "No integration tests yet - placeholder for future tests"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        name: build-artifacts
        path: |
          src/MyOpenTelemetryApi.Api/bin/Release/net10.0/
          !src/MyOpenTelemetryApi.Api/bin/Release/net10.0/*.pdb
        retention-days: 7

  code-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install .NET tools
      run: |
        dotnet tool install --global dotnet-outdated-tool
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Check for outdated packages
      run: dotnet outdated --fail-on-updates
      continue-on-error: true

    - name: Security scan
      run: |
        dotnet list package --vulnerable --include-transitive

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Build Docker image
      run: docker build -t myopentelemetryapi:${{ github.sha }} .

    - name: Run Docker container test
      run: |
        echo "Skipping container health check - requires database setup"
        # Will implement proper container testing later

    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save myopentelemetryapi:${{ github.sha }} | gzip > myopentelemetryapi.tar.gz

    - name: Upload Docker image
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: myopentelemetryapi.tar.gz
        retention-days: 7



================================================================================
FILE: .github\workflows\codeql.yml
SIZE: 0.92 KB
MODIFIED: 10/20/2025 10:31:15
================================================================================

# .github/workflows/codeql.yml
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 5 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '10.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4



================================================================================
FILE: appsettings.Container.json
SIZE: 1.12 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Information",
      "Microsoft.EntityFrameworkCore": "Information",
      "Microsoft.EntityFrameworkCore.Database.Command": "Information",
      "MyOpenTelemetryApi": "Debug",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Host=db;Port=5432;Database=myoteldb;Username=myoteluser;Password=myotelpass123;Include Error Detail=true;"
  },
  "OpenTelemetry": {
    "ServiceName": "MyOpenTelemetryApi-Container",
    "ServiceVersion": "1.0.0-container",
    "Exporter": {
      "Console": {
        "Enabled": true
      },
      "OTLP": {
        "Enabled": false,
        "Endpoint": "http://jaeger:4317",
        "Protocol": "Grpc"
      },
      "File": {
        "Enabled": true,
        "LogPath": "/app/logs/otel-logs.json",
        "TracePath": "/app/logs/otel-traces.json",
        "MetricsPath": "/app/logs/otel-metrics.json"
      }
    },
    "Sampling": {
      "AlwaysOn": true,
      "Ratio": 1.0
    }
  },
  "AllowedHosts": "*"
}


================================================================================
FILE: docker-compose.yml
SIZE: 1.33 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: myopentelemetryapi-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-contactmanager}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myopentelemetryapi-api
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: "http://+:8080;http://+:8081"
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${POSTGRES_DB:-contactmanager};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}"
      ApiKey: ${API_KEY:-your-secret-api-key-change-in-production}
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./appsettings.Container.json:/app/appsettings.Production.json:ro
    restart: unless-stopped

volumes:
  postgres_data:



================================================================================
FILE: MyOpenTelemetryApi.sln
SIZE: 9.79 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================


Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.0.31903.59
MinimumVisualStudioVersion = 10.0.40219.1
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "src", "src", "{827E0CD3-B72D-47B6-A68D-7590B98EB39B}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Api", "src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj", "{B9DF766D-71BB-40EB-9A6D-51DF524CA899}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Application", "src\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj", "{1FF8AB76-1400-42A6-8C31-7959DC9A713C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Domain", "src\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj", "{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Infrastructure", "src\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj", "{37B7F2CB-6E46-4A19-A247-10730E4F2685}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "tests", "tests", "{0AB3BF05-4346-4AA6-1389-037BE0695223}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Api.Tests", "tests\MyOpenTelemetryApi.Api.Tests\MyOpenTelemetryApi.Api.Tests.csproj", "{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Application.Tests", "tests\MyOpenTelemetryApi.Application.Tests\MyOpenTelemetryApi.Application.Tests.csproj", "{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Infrastructure.Tests", "tests\MyOpenTelemetryApi.Infrastructure.Tests\MyOpenTelemetryApi.Infrastructure.Tests.csproj", "{7330F9A2-4397-4D0C-B280-CA0666A87CAD}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{8EC462FD-D22E-90A8-E5CE-7E832BA40C5D}"
	ProjectSection(SolutionItems) = preProject
		README.md = README.md
	EndProjectSection
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x64.ActiveCfg = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x64.Build.0 = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x86.ActiveCfg = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x86.Build.0 = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|Any CPU.Build.0 = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x64.ActiveCfg = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x64.Build.0 = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x86.ActiveCfg = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x86.Build.0 = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x64.ActiveCfg = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x64.Build.0 = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x86.ActiveCfg = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x86.Build.0 = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|Any CPU.Build.0 = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x64.ActiveCfg = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x64.Build.0 = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x86.ActiveCfg = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x86.Build.0 = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x64.ActiveCfg = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x64.Build.0 = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x86.ActiveCfg = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x86.Build.0 = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|Any CPU.Build.0 = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x64.ActiveCfg = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x64.Build.0 = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x86.ActiveCfg = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x86.Build.0 = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x64.ActiveCfg = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x64.Build.0 = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x86.ActiveCfg = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x86.Build.0 = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|Any CPU.Build.0 = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x64.ActiveCfg = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x64.Build.0 = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x86.ActiveCfg = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x86.Build.0 = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x64.ActiveCfg = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x64.Build.0 = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x86.ActiveCfg = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x86.Build.0 = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|Any CPU.Build.0 = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x64.ActiveCfg = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x64.Build.0 = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x86.ActiveCfg = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x86.Build.0 = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x64.ActiveCfg = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x64.Build.0 = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x86.ActiveCfg = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x86.Build.0 = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|Any CPU.Build.0 = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x64.ActiveCfg = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x64.Build.0 = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x86.ActiveCfg = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x86.Build.0 = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x64.ActiveCfg = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x64.Build.0 = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x86.ActiveCfg = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x86.Build.0 = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|Any CPU.Build.0 = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x64.ActiveCfg = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x64.Build.0 = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x86.ActiveCfg = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x86.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{37B7F2CB-6E46-4A19-A247-10730E4F2685} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3} = {0AB3BF05-4346-4AA6-1389-037BE0695223}
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8} = {0AB3BF05-4346-4AA6-1389-037BE0695223}
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD} = {0AB3BF05-4346-4AA6-1389-037BE0695223}
	EndGlobalSection
EndGlobal



================================================================================
FILE: podman-compose.yml
SIZE: 2.23 KB
MODIFIED: 10/21/2025 12:04:25
================================================================================

# podman-compose.yml - Alternative compose file optimized for Podman
version: '3.8'
services:
  db:
    image: docker.io/library/postgres:16-alpine
    container_name: myotel-postgres
    environment:
      POSTGRES_DB: myoteldb
      POSTGRES_USER: myoteluser
      POSTGRES_PASSWORD: myotelpass123
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./init-db:/docker-entrypoint-initdb.d:Z
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myoteluser", "-d", "myoteldb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - myotel-network
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myotel-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - ASPNETCORE_HTTP_PORTS=8080
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=myoteldb;Username=myoteluser;Password=myotelpass123;Include Error Detail=true;
      - OpenTelemetry__ServiceName=MyOpenTelemetryApi-Podman
      - OpenTelemetry__ServiceVersion=1.0.0-podman
      - OpenTelemetry__Exporter__Console__Enabled=true
      - OpenTelemetry__Exporter__File__Enabled=true
      - OpenTelemetry__Exporter__File__LogPath=/app/logs/otel-logs.json
      - OpenTelemetry__Exporter__OTLP__Enabled=false
      - OpenTelemetry__Sampling__AlwaysOn=true
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command=Warning
      - Logging__LogLevel__MyOpenTelemetryApi=Information
    ports:
      - "0.0.0.0:5174:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - myotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

networks:
  myotel-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local



================================================================================
FILE: src\MyOpenTelemetryApi.Api\appsettings.Development.json
SIZE: 0.5 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Api/appsettings.Development.json - Updated
{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.AspNetCore": "Information",
      "Microsoft.EntityFrameworkCore.Database.Command": "Information",
      "MyOpenTelemetryApi": "Debug"
    }
  },
  "OpenTelemetry": {
    "Exporter": {
      "Console": {
        "Enabled": true
      },
      "OTLP": {
        "Enabled": false
      },
      "File": {
        "Enabled": true
      }
    }
  }
}


================================================================================
FILE: src\MyOpenTelemetryApi.Api\appsettings.json
SIZE: 1.22 KB
MODIFIED: 09/17/2025 14:33:44
================================================================================

// src/MyOpenTelemetryApi.Api/appsettings.json - Updated with OpenTelemetry settings
{
    "Auth": {
        "ApiKey": "your-super-secret-key-here-use-guid-or-random-string"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning",
            "Microsoft.EntityFrameworkCore": "Warning"
        }
    },
    "ConnectionStrings": {
        "DefaultConnection": "CONFIGURED_IN_USER_SECRETS_OR_ENVIRONMENT_VARIABLES"
    },
    "OpenTelemetry": {
        "ServiceName": "MyOpenTelemetryApi",
        "ServiceVersion": "1.0.0",
        "Exporter": {
            "Console": {
                "Enabled": true
            },
            "OTLP": {
                "Enabled": false,
                "Endpoint": "http://localhost:4317",
                "Protocol": "Grpc"
            },
            "File": {
                "Enabled": true,
                "LogPath": "logs/otel-logs.json",
                "TracePath": "logs/otel-traces.json",
                "MetricsPath": "logs/otel-metrics.json"
            }
        },
        "Sampling": {
            "AlwaysOn": true,
            "Ratio": 1.0
        }
    },
    "AllowedHosts": "*"
}


================================================================================
FILE: src\MyOpenTelemetryApi.Api\appsettings.Production.json
SIZE: 0.55 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Api/appsettings.Production.json - New file
{
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "Microsoft.AspNetCore": "Warning",
      "MyOpenTelemetryApi": "Information"
    }
  },
  "OpenTelemetry": {
    "Exporter": {
      "Console": {
        "Enabled": false
      },
      "OTLP": {
        "Enabled": true,
        "Endpoint": "http://localhost:4317"
      },
      "File": {
        "Enabled": false
      }
    },
    "Sampling": {
      "AlwaysOn": false,
      "Ratio": 0.1
    }
  }
}


================================================================================
FILE: src\MyOpenTelemetryApi.Api\Authentication\ApiKeyAuthenticationHandler.cs
SIZE: 1.87 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// Api/Authentication/ApiKeyAuthenticationHandler.cs
using System.Security.Claims;
using System.Text.Encodings.Web;
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Options;

namespace MyOpenTelemetryApi.Api.Authentication;

public class ApiKeyAuthenticationHandler : AuthenticationHandler<ApiKeyAuthenticationOptions>
{
    private const string ApiKeyHeaderName = "X-API-Key";
    private readonly IConfiguration _configuration;

    public ApiKeyAuthenticationHandler(
        IOptionsMonitor<ApiKeyAuthenticationOptions> options,
        ILoggerFactory logger,
        UrlEncoder encoder,
        IConfiguration configuration)
        : base(options, logger, encoder)
    {
        _configuration = configuration;
    }

    protected override Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        if (!Request.Headers.TryGetValue(ApiKeyHeaderName, out var apiKeyHeaderValues))
        {
            return Task.FromResult(AuthenticateResult.NoResult());
        }

        var providedApiKey = apiKeyHeaderValues.FirstOrDefault();
        var configuredApiKey = _configuration["Auth:ApiKey"];

        if (string.IsNullOrEmpty(providedApiKey) ||
            !string.Equals(providedApiKey, configuredApiKey, StringComparison.Ordinal))
        {
            return Task.FromResult(AuthenticateResult.Fail("Invalid API Key"));
        }

        var claims = new[]
        {
            new Claim(ClaimTypes.Name, "ApiUser"),
            new Claim("ApiKey", "Valid")
        };

        var identity = new ClaimsIdentity(claims, Scheme.Name);
        var principal = new ClaimsPrincipal(identity);
        var ticket = new AuthenticationTicket(principal, Scheme.Name);

        return Task.FromResult(AuthenticateResult.Success(ticket));
    }
}

public class ApiKeyAuthenticationOptions : AuthenticationSchemeOptions { }



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\ContactsController.cs
SIZE: 3.29 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/ContactsController.cs
using Microsoft.AspNetCore.Mvc;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Application.Services;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ContactsController : ControllerBase
{
    private readonly IContactService _contactService;

    public ContactsController(IContactService contactService)
    {
        _contactService = contactService;
    }

    [HttpGet]
    public async Task<ActionResult<PaginatedResultDto<ContactSummaryDto>>> GetContacts(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.GetPaginatedAsync(pageNumber, pageSize, cancellationToken);
        return Ok(contacts);
    }

    [HttpGet("{id:guid}")]
    public async Task<ActionResult<ContactDto>> GetContact(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.GetWithDetailsAsync(id, cancellationToken);
        if (contact == null)
        {
            return NotFound();
        }
        return Ok(contact);
    }

    [HttpPost]
    public async Task<ActionResult<ContactDto>> CreateContact(
        CreateContactDto dto,
        CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.CreateAsync(dto, cancellationToken);
        return CreatedAtAction(nameof(GetContact), new { id = contact.Id }, contact);
    }

    [HttpPut("{id:guid}")]
    public async Task<ActionResult<ContactDto>> UpdateContact(
        Guid id,
        UpdateContactDto dto,
        CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.UpdateAsync(id, dto, cancellationToken);
        if (contact == null)
        {
            return NotFound();
        }
        return Ok(contact);
    }

    [HttpDelete("{id:guid}")]
    public async Task<IActionResult> DeleteContact(Guid id, CancellationToken cancellationToken = default)
    {
        var success = await _contactService.DeleteAsync(id, cancellationToken);
        if (!success)
        {
            return NotFound();
        }
        return NoContent();
    }

    [HttpGet("search")]
    public async Task<ActionResult<List<ContactSummaryDto>>> SearchContacts(
        [FromQuery] string query,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.SearchAsync(query, cancellationToken);
        return Ok(contacts);
    }

    [HttpGet("group/{groupId:guid}")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetContactsByGroup(
        Guid groupId,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.GetByGroupAsync(groupId, cancellationToken);
        return Ok(contacts);
    }

    [HttpGet("tag/{tagId:guid}")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetContactsByTag(
        Guid tagId,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.GetByTagAsync(tagId, cancellationToken);
        return Ok(contacts);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\GroupsController.cs
SIZE: 2.47 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/GroupsController.cs
using Microsoft.AspNetCore.Mvc;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Application.Services;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class GroupsController(IGroupService groupService, ILogger<GroupsController> logger) : ControllerBase
{
    [HttpGet]
    public async Task<ActionResult<List<GroupDto>>> GetGroups(CancellationToken cancellationToken = default)
    {
        List<GroupDto> groups = await groupService.GetAllAsync(cancellationToken);
        return Ok(groups);
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<GroupDto>> GetGroup(Guid id, CancellationToken cancellationToken = default)
    {
        GroupDto? group = await groupService.GetByIdAsync(id, cancellationToken);
        if (group == null)
        {
            return NotFound();
        }
        return Ok(group);
    }

    [HttpPost]
    public async Task<ActionResult<GroupDto>> CreateGroup(CreateGroupDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            GroupDto group = await groupService.CreateAsync(dto, cancellationToken);
            return CreatedAtAction(nameof(GetGroup), new { id = group.Id }, group);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error creating group");
            return StatusCode(500, "An error occurred while creating the group.");
        }
    }

    [HttpPut("{id}")]
    public async Task<ActionResult<GroupDto>> UpdateGroup(Guid id, UpdateGroupDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            GroupDto? group = await groupService.UpdateAsync(id, dto, cancellationToken);
            if (group == null)
            {
                return NotFound();
            }
            return Ok(group);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error updating group {GroupId}", id);
            return StatusCode(500, "An error occurred while updating the group.");
        }
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteGroup(Guid id, CancellationToken cancellationToken = default)
    {
        bool deleted = await groupService.DeleteAsync(id, cancellationToken);
        if (!deleted)
        {
            return NotFound();
        }
        return NoContent();
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\HealthController.cs
SIZE: 2.4 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/HealthController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class HealthController(AppDbContext dbContext, ILogger<HealthController> logger) : ControllerBase
{
    [HttpGet]
    public async Task<IActionResult> GetHealth(CancellationToken cancellationToken = default)
    {
        var health = new
        {
            Status = "Healthy",
            Timestamp = DateTime.UtcNow,
            Service = "MyOpenTelemetryApi"
        };

        try
        {
            // Test database connectivity
            await dbContext.Database.CanConnectAsync(cancellationToken);
            return Ok(health);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Health check failed");
            return StatusCode(503, new
            {
                Status = "Unhealthy",
                Timestamp = DateTime.UtcNow,
                Service = "MyOpenTelemetryApi",
                Error = "Database connection failed"
            });
        }
    }

    [HttpGet("ready")]
    public async Task<IActionResult> GetReadiness(CancellationToken cancellationToken = default)
    {
        try
        {
            // Check if database is accessible and migrations are applied
            await dbContext.Database.CanConnectAsync(cancellationToken);
            IEnumerable<string> pendingMigrations = await dbContext.Database.GetPendingMigrationsAsync(cancellationToken);

            if (pendingMigrations.Any())
            {
                return StatusCode(503, new
                {
                    Status = "Not Ready",
                    Reason = "Database has pending migrations",
                    PendingMigrations = pendingMigrations
                });
            }

            return Ok(new
            {
                Status = "Ready",
                Timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Readiness check failed");
            return StatusCode(503, new
            {
                Status = "Not Ready",
                Reason = "Database check failed",
                Error = ex.Message
            });
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\TagsController.cs
SIZE: 2.6 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/TagsController.cs
using Microsoft.AspNetCore.Mvc;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Application.Services;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class TagsController(ITagService tagService, ILogger<TagsController> logger) : ControllerBase
{
    [HttpGet]
    public async Task<ActionResult<List<TagDto>>> GetTags(CancellationToken cancellationToken = default)
    {
        List<TagDto> tags = await tagService.GetAllAsync(cancellationToken);
        return Ok(tags);
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<TagDto>> GetTag(Guid id, CancellationToken cancellationToken = default)
    {
        TagDto? tag = await tagService.GetByIdAsync(id, cancellationToken);
        if (tag == null)
        {
            return NotFound();
        }
        return Ok(tag);
    }

    [HttpPost]
    public async Task<ActionResult<TagDto>> CreateTag(CreateTagDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            TagDto tag = await tagService.CreateAsync(dto, cancellationToken);
            return CreatedAtAction(nameof(GetTag), new { id = tag.Id }, tag);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error creating tag");
            return StatusCode(500, "An error occurred while creating the tag.");
        }
    }

    [HttpPut("{id}")]
    public async Task<ActionResult<TagDto>> UpdateTag(Guid id, CreateTagDto dto, CancellationToken cancellationToken = default)
    {
        try
        {
            TagDto? tag = await tagService.UpdateAsync(id, dto, cancellationToken);
            if (tag == null)
            {
                return NotFound();
            }
            return Ok(tag);
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error updating tag {TagId}", id);
            return StatusCode(500, "An error occurred while updating the tag.");
        }
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteTag(Guid id, CancellationToken cancellationToken = default)
    {
        bool deleted = await tagService.DeleteAsync(id, cancellationToken);
        if (!deleted)
        {
            return NotFound();
        }
        return NoContent();
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\dependencies.json
SIZE: 5.83 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

{
  "version": 1,
  "parameters": "--include-transitive",
  "projects": [
    {
      "path": "C:/code/MyOpenTelemetryApi/src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj",
      "frameworks": [
        {
          "framework": "net9.0",
          "topLevelPackages": [
            {
              "id": "Microsoft.AspNetCore.OpenApi",
              "requestedVersion": "9.0.8",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Design",
              "requestedVersion": "9.0.8",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Npgsql.EntityFrameworkCore.PostgreSQL",
              "requestedVersion": "9.0.4",
              "resolvedVersion": "9.0.4"
            },
            {
              "id": "OpenTelemetry",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Exporter.Console",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Exporter.OpenTelemetryProtocol",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Extensions.Hosting",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Instrumentation.AspNetCore",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Instrumentation.EntityFrameworkCore",
              "requestedVersion": "1.12.0-beta.2",
              "resolvedVersion": "1.12.0-beta.2"
            },
            {
              "id": "OpenTelemetry.Instrumentation.Http",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Instrumentation.Process",
              "requestedVersion": "1.12.0-beta.1",
              "resolvedVersion": "1.12.0-beta.1"
            },
            {
              "id": "OpenTelemetry.Instrumentation.Runtime",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            }
          ],
          "transitivePackages": [
            {
              "id": "Humanizer.Core",
              "resolvedVersion": "2.14.1"
            },
            {
              "id": "Microsoft.Bcl.AsyncInterfaces",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "Microsoft.Build.Framework",
              "resolvedVersion": "17.8.3"
            },
            {
              "id": "Microsoft.Build.Locator",
              "resolvedVersion": "1.7.8"
            },
            {
              "id": "Microsoft.CodeAnalysis.Analyzers",
              "resolvedVersion": "3.3.4"
            },
            {
              "id": "Microsoft.CodeAnalysis.Common",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.CSharp",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.CSharp.Workspaces",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.Workspaces.Common",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.Workspaces.MSBuild",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.EntityFrameworkCore",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Abstractions",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Analyzers",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Relational",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.Extensions.DependencyModel",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.OpenApi",
              "resolvedVersion": "1.6.17"
            },
            {
              "id": "Mono.TextTemplating",
              "resolvedVersion": "3.0.0"
            },
            {
              "id": "Npgsql",
              "resolvedVersion": "9.0.3"
            },
            {
              "id": "OpenTelemetry.Api",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Api.ProviderBuilderExtensions",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "System.CodeDom",
              "resolvedVersion": "6.0.0"
            },
            {
              "id": "System.Composition",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.AttributedModel",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.Convention",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.Hosting",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.Runtime",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.TypedParts",
              "resolvedVersion": "7.0.0"
            }
          ]
        }
      ]
    }
  ]
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj
SIZE: 2.07 KB
MODIFIED: 10/22/2025 11:42:22
================================================================================

<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <UserSecretsId>8932c83d-67db-4264-b312-6e638ad396db</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <!-- ASP.NET Core OpenAPI support -->
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
    
    <!-- EF Core Design - Required when using startup-project flag with dotnet-ef -->
    <!-- PrivateAssets means this doesn't flow to consuming projects -->
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    
    <!-- OpenTelemetry packages -->
    <PackageReference Include="OpenTelemetry"/>
    <PackageReference Include="OpenTelemetry.Exporter.Console" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol"/>
    <PackageReference Include="OpenTelemetry.Extensions.Hosting"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.EntityFrameworkCore"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Http"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Process"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime"/>
  </ItemGroup>

  <ItemGroup>
    <!-- Project references - these bring in EF Core transitively -->
    <ProjectReference Include="..\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj" />
    <ProjectReference Include="..\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj" />
  </ItemGroup>
  <PropertyGroup>
    <SourceRevisionId>$(GITHUB_SHA)</SourceRevisionId>
  </PropertyGroup>

  <Target Name="SetSourceRevisionId" BeforeTargets="InitializeSourceControlInformation">
    <Exec Command="git rev-parse --short HEAD" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="SourceRevisionId" />
    </Exec>
  </Target>
</Project>



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Program.cs
SIZE: 18.53 KB
MODIFIED: 10/22/2025 11:42:22
================================================================================

// src/MyOpenTelemetryApi.Api/Program.cs - Updated version with configuration-based setup
using System.Diagnostics;
using System.Reflection;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Api.Authentication;
using MyOpenTelemetryApi.Api.Telemetry;
using MyOpenTelemetryApi.Application.Services;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;
using MyOpenTelemetryApi.Infrastructure.Repositories;
using OpenTelemetry.Exporter;
using OpenTelemetry.Logs;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;

WebApplicationBuilder builder = WebApplication.CreateBuilder(args);

// Add authentication
builder.Services.AddAuthentication("ApiKey")
    .AddScheme<ApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler>("ApiKey", null);

// Define service name and version for OpenTelemetry
string serviceName = builder.Configuration.GetValue<string>("OpenTelemetry:ServiceName") ?? "MyOpenTelemetryApi";
string serviceVersion = builder.Configuration.GetValue<string>("OpenTelemetry:ServiceVersion") ??
                    Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "1.0.0";

// Configure OpenTelemetry Resource with Git commit hash
ResourceBuilder resourceBuilder = ResourceBuilder.CreateDefault()
    .AddService(serviceName: serviceName, serviceVersion: serviceVersion)
    .AddTelemetrySdk()
    .AddAttributes(new Dictionary<string, object>
    {
        ["environment"] = builder.Environment.EnvironmentName,
        ["deployment.environment"] = builder.Environment.EnvironmentName,
        ["host.name"] = Environment.MachineName,
        ["git.commit.sha"] = GetGitCommitHash(),
        ["build.timestamp"] = GetBuildTimestamp()
    });

// Configure OpenTelemetry Logging
builder.Logging.ClearProviders();
builder.Logging.AddOpenTelemetry(options =>
{
    options.SetResourceBuilder(resourceBuilder);
    options.IncludeFormattedMessage = true;
    options.IncludeScopes = true;

    // Console exporter
    if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:Console:Enabled"))
    {
        options.AddConsoleExporter();
    }

    // File exporter
    if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:File:Enabled"))
    {
        string logPath = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:File:LogPath")
                     ?? "logs/otel-logs.json";
        options.AddFileExporter(logPath);
    }

    // OTLP exporter
    if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:OTLP:Enabled"))
    {
        options.AddOtlpExporter(otlpOptions =>
        {
            otlpOptions.Endpoint = new Uri(builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Endpoint")
                                          ?? "http://localhost:4317");
            string protocol = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Protocol") ?? "Grpc";
            otlpOptions.Protocol = protocol == "Grpc" ? OtlpExportProtocol.Grpc : OtlpExportProtocol.HttpProtobuf;
        });
    }
});

// Configure OpenTelemetry Tracing and Metrics
builder.Services.AddOpenTelemetry()
    .ConfigureResource(resource => resource
        .AddService(serviceName: serviceName, serviceVersion: serviceVersion)
        .AddAttributes(new Dictionary<string, object>
        {
            ["deployment.environment"] = builder.Environment.EnvironmentName,
            ["service.instance.id"] = Environment.MachineName,
            ["git.commit.sha"] = GetGitCommitHash(),
            ["build.timestamp"] = GetBuildTimestamp()
        }))
    .WithTracing(tracing =>
    {
        tracing
            .AddAspNetCoreInstrumentation(options =>
            {
                options.RecordException = true;
                options.Filter = (httpContext) => !httpContext.Request.Path.StartsWithSegments("/health");
            })
            .AddHttpClientInstrumentation(options =>
            {
                options.RecordException = true;
            })
            .AddEntityFrameworkCoreInstrumentation(options =>
            {
                options.EnrichWithIDbCommand = (activity, command) =>
                {
                    activity.SetTag("db.system", "postgresql");
                };
            })
            .AddSource("MyOpenTelemetryApi.*");

        // Configure sampling
        bool alwaysOn = builder.Configuration.GetValue<bool>("OpenTelemetry:Sampling:AlwaysOn");
        if (alwaysOn)
        {
            tracing.SetSampler(new AlwaysOnSampler());
        }
        else
        {
            double ratio = builder.Configuration.GetValue<double>("OpenTelemetry:Sampling:Ratio");
            tracing.SetSampler(new TraceIdRatioBasedSampler(ratio));
        }

        // Configure exporters
        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:Console:Enabled"))
        {
            tracing.AddConsoleExporter();
        }

        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:OTLP:Enabled"))
        {
            tracing.AddOtlpExporter(options =>
            {
                options.Endpoint = new Uri(builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Endpoint")
                                          ?? "http://localhost:4317");
                string protocol = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Protocol") ?? "Grpc";
                options.Protocol = protocol == "Grpc" ? OtlpExportProtocol.Grpc : OtlpExportProtocol.HttpProtobuf;
            });
        }
    })
    .WithMetrics(metrics =>
    {
        metrics
            .AddAspNetCoreInstrumentation()
            .AddHttpClientInstrumentation()
            .AddRuntimeInstrumentation()
            .AddProcessInstrumentation()
            .AddMeter("MyOpenTelemetryApi.*");

        // Configure exporters
        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:Console:Enabled"))
        {
            metrics.AddConsoleExporter();
        }

        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:OTLP:Enabled"))
        {
            metrics.AddOtlpExporter(options =>
            {
                options.Endpoint = new Uri(builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Endpoint")
                                          ?? "http://localhost:4317");
                string protocol = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Protocol") ?? "Grpc";
                options.Protocol = protocol == "Grpc" ? OtlpExportProtocol.Grpc : OtlpExportProtocol.HttpProtobuf;
            });
        }
    });

// Add services to the container.
builder.Services.AddControllers();

// Configure PostgreSQL with retry policies
builder.Services.AddDbContext<AppDbContext>(options =>
{
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"), npgsqlOptions =>
    {
        npgsqlOptions.EnableRetryOnFailure(
            maxRetryCount: 3,
            maxRetryDelay: TimeSpan.FromSeconds(30),
            errorCodesToAdd: null);
    });
});

// Register repositories and unit of work
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IContactRepository, ContactRepository>();
builder.Services.AddScoped<IGroupRepository, GroupRepository>();
builder.Services.AddScoped<ITagRepository, TagRepository>();

// Register application services
builder.Services.AddScoped<IContactService, ContactService>();
builder.Services.AddScoped<IGroupService, GroupService>();
builder.Services.AddScoped<ITagService, TagService>();

// Add HTTP context accessor for tracing context
builder.Services.AddHttpContextAccessor();

// Add built-in OpenAPI support
builder.Services.AddOpenApi();

WebApplication app = builder.Build();

// Serve OpenAPI JSON
app.MapOpenApi();

// Configure the HTTP request pipeline.
app.UseHttpsRedirection();

// Add custom middleware for request tracing
app.Use(async (context, next) =>
{
    using Activity? activity = Activity.Current;
    if (activity != null)
    {
        activity.SetTag("http.request.body.size", context.Request.ContentLength ?? 0);
        activity.SetTag("user.agent", context.Request.Headers.UserAgent.ToString());
        activity.SetTag("client.ip", context.Connection.RemoteIpAddress?.ToString());
    }

    await next();

    activity?.SetTag("http.response.body.size", context.Response.ContentLength ?? 0);
});

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

// Apply migrations on startup
using (IServiceScope scope = app.Services.CreateScope())
{
    AppDbContext dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    ILogger<Program> logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();

    using Activity? activity = Activity.Current?.Source.StartActivity("DatabaseMigration");
    try
    {
        if (logger.IsEnabled(LogLevel.Information))
        {
            logger.LogInformation("Checking for pending database migrations...");
        }
        var pendingMigrations = await dbContext.Database.GetPendingMigrationsAsync();

        if (pendingMigrations.Any())
        {
            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Found {Count} pending migrations: {Migrations}",
                    pendingMigrations.Count(),
                    string.Join(", ", pendingMigrations));
            }

            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Applying database migrations...");
            }
            await dbContext.Database.MigrateAsync();
            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Database migrations applied successfully.");
            }
        }
        else
        {
            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Database is up to date - no migrations needed.");
            }
        }
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Error applying database migrations");
        activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
        throw;
    }
}

if (app.Logger.IsEnabled(LogLevel.Information))
{
    app.Logger.LogInformation("Starting {ServiceName} version {ServiceVersion} (commit: {GitCommit})", 
        serviceName, serviceVersion, GetGitCommitHash());
}

// Add a friendly landing page at the root
app.MapGet("/", () => Results.Content("""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Manager API</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 40px;
            max-width: 600px;
            width: 100%;
            animation: fadeIn 0.6s ease-out;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        h1 {
            color: #333;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 1.2em;
        }
        
        .welcome {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 20px;
        }
        
        p {
            color: #555;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        
        .endpoints {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin: 30px 0;
        }
        
        .endpoints h2 {
            color: #333;
            font-size: 1.3em;
            margin-bottom: 15px;
        }
        
        .endpoint-list {
            list-style: none;
        }
        
        .endpoint-list li {
            margin-bottom: 12px;
        }
        
        .endpoint-list a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            transition: all 0.3s ease;
            padding: 8px 12px;
            border-radius: 6px;
            background: white;
        }
        
        .endpoint-list a:hover {
            background: #667eea;
            color: white;
            transform: translateX(5px);
        }
        
        .method {
            background: #28a745;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.85em;
            margin-right: 10px;
            font-weight: bold;
        }
        
        .coming-soon {
            background: #fff3cd;
            border: 1px solid #ffc107;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
        }
        
        .coming-soon strong {
            display: block;
            margin-bottom: 5px;
        }
        
        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
            text-align: center;
            color: #888;
            font-size: 0.9em;
        }
        
        .tech-stack {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .tech-badge {
            background: #f0f0f0;
            padding: 4px 10px;
            border-radius: 15px;
            font-size: 0.85em;
            color: #555;
        }
        
        @media (max-width: 480px) {
            h1 {
                font-size: 2em;
            }
            
            .container {
                padding: 30px 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>📞 Contact Manager API</h1>
        <p class="subtitle">Personal Information Management System</p>
        
        <p class="welcome">Hello, friend! Thank you for checking out this website. 👋</p>
        
        <p>
            This is an API server for managing contacts, groups, and tags. 
            It's built with modern .NET and provides a RESTful interface for 
            personal information management.
        </p>
        
        <div class="endpoints">
            <h2>🔗 Available Endpoints</h2>
            <ul class="endpoint-list">
                <li>
                    <a href="/api/health">
                        <span class="method">GET</span>
                        /api/health - Check service health
                    </a>
                </li>
                <li>
                    <a href="/api/health/ready">
                        <span class="method">GET</span>
                        /api/health/ready - Check service readiness
                    </a>
                </li>
                <li>
                    <a href="/openapi/v1.json">
                        <span class="method">GET</span>
                        /openapi/v1.json - OpenAPI specification
                    </a>
                </li>
            </ul>
        </div>
        
        <div class="coming-soon">
            <strong>🚀 Available Now:</strong>
            The OpenAPI specification is available at /openapi/v1.json. 
            Interactive Swagger UI documentation coming soon!
        </div>
        
        <div class="footer">
            <p>Built with ❤️ using modern technologies</p>
            <div class="tech-stack">
                <span class="tech-badge">.NET 10</span>
                <span class="tech-badge">PostgreSQL</span>
                <span class="tech-badge">OpenTelemetry</span>
                <span class="tech-badge">Docker</span>
            </div>
        </div>
    </div>
</body>
</html>
""", "text/html"));

app.UseExceptionHandler("/error");

app.Map("/error", (HttpContext context) =>
{
    var feature = context.Features.Get<IExceptionHandlerFeature>();
    var logger = context.RequestServices.GetRequiredService<ILogger<Program>>();

    logger.LogError(feature?.Error, "Unhandled exception occurred");

    return Results.Problem(
        detail: "An error occurred processing your request",
        statusCode: 500);
});

app.Run();

static string GetGitCommitHash()
{
    // Option 1: From environment variable (preferred for containers)
    var commitHash = Environment.GetEnvironmentVariable("GIT_COMMIT");
    if (!string.IsNullOrEmpty(commitHash))
        return commitHash;

    // Option 2: From assembly attribute
    var version = Assembly.GetEntryAssembly()?
        .GetCustomAttribute<AssemblyInformationalVersionAttribute>()?
        .InformationalVersion;

    return version ?? "unknown";
}

static string GetBuildTimestamp()
{
    // From environment variable set during build
    var timestamp = Environment.GetEnvironmentVariable("BUILD_TIMESTAMP");
    if (!string.IsNullOrEmpty(timestamp))
        return timestamp;

    // Fallback to assembly build time if available
    var assembly = Assembly.GetEntryAssembly();
    if (assembly != null)
    {
        var buildDate = new FileInfo(assembly.Location).LastWriteTimeUtc;
        return buildDate.ToString("yyyy-MM-ddTHH:mm:ssZ");
    }

    return DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ");
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Properties\launchSettings.json
SIZE: 0.73 KB
MODIFIED: 10/06/2025 12:44:28
================================================================================

{
    "$schema": "https://json.schemastore.org/launchsettings.json",
    "profiles": {
        "http": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": false,
            "applicationUrl": "http://0.0.0.0:5174",
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
        },
        "https": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": false,
            "applicationUrl": "https://0.0.0.0:7034;http://0.0.0.0:5174",
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Telemetry\FileExporter.cs
SIZE: 3.68 KB
MODIFIED: 10/22/2025 09:51:50
================================================================================

// src/MyOpenTelemetryApi.Api/Telemetry/FileExporter.cs
using System.Text.Json;
using OpenTelemetry;
using OpenTelemetry.Logs;
using OpenTelemetry.Resources;

namespace MyOpenTelemetryApi.Api.Telemetry;

public class FileLogExporter : BaseExporter<LogRecord>
{
    private readonly string _filePath;
    private readonly object _lockObject = new();
    private readonly JsonSerializerOptions _jsonOptions;

    public FileLogExporter(string filePath)
    {
        _filePath = filePath;
        _jsonOptions = new JsonSerializerOptions
        {
            WriteIndented = false,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        // Ensure directory exists
        string? directory = Path.GetDirectoryName(_filePath);
        if (!string.IsNullOrEmpty(directory))
        {
            Directory.CreateDirectory(directory);
        }
    }

    public override ExportResult Export(in Batch<LogRecord> batch)
    {
        try
        {
            lock (_lockObject)
            {
                using StreamWriter writer = new(_filePath, append: true);

                foreach (LogRecord logRecord in batch)
                {
                    var logEntry = new
                    {
                        Timestamp = logRecord.Timestamp,
                        TraceId = logRecord.TraceId.ToString(),
                        SpanId = logRecord.SpanId.ToString(),
                        TraceFlags = logRecord.TraceFlags.ToString(),
                        CategoryName = logRecord.CategoryName,
                        #pragma warning disable OTEL1001
                        Severity = logRecord.Severity.ToString(), // 'OpenTelemetry.Logs.LogRecord.Severity' is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
                        #pragma warning restore
                        FormattedMessage = logRecord.FormattedMessage,
                        Body = logRecord.Body,
                        ScopeValues = ExtractScopeValues(logRecord),
                        Exception = logRecord.Exception?.ToString(),
                        Attributes = ExtractAttributes(logRecord)
                    };

                    string json = JsonSerializer.Serialize(logEntry, _jsonOptions);
                    writer.WriteLine(json);
                }
            }

            return ExportResult.Success;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting logs to file: {ex.Message}");
            return ExportResult.Failure;
        }
    }

    private static List<Dictionary<string, object?>> ExtractScopeValues(LogRecord logRecord)
    {
        List<Dictionary<string, object?>> scopes = [];

        logRecord.ForEachScope((scope, state) =>
        {
            var scopeDict = new Dictionary<string, object?>();

            // In .NET 10, LogRecordScope is directly iterable
            foreach (var scopeItem in scope)
            {
                scopeDict[scopeItem.Key] = scopeItem.Value;
            }

            if (scopeDict.Count > 0)
            {
                scopes.Add(scopeDict);
            }
        }, scopes);

        return scopes;
    }

    private static Dictionary<string, object?> ExtractAttributes(LogRecord logRecord)
    {
        Dictionary<string, object?> attributes = [];

        if (logRecord.Attributes != null)
        {
            foreach (KeyValuePair<string, object?> attribute in logRecord.Attributes)
            {
                attributes[attribute.Key] = attribute.Value;
            }
        }

        return attributes;
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Telemetry\TelemetryConstants.cs
SIZE: 1.2 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

namespace MyOpenTelemetryApi.Api.Telemetry;

public static class TelemetryConstants
{
    public const string ServiceName = "MyOpenTelemetryApi";

    // Activity names
    public static class Activities
    {
        public const string ContactService = "ContactService";
        public const string GroupService = "GroupService";
        public const string TagService = "TagService";
        public const string DatabaseOperation = "DatabaseOperation";
    }

    // Metric names
    public static class Metrics
    {
        public const string ContactsCreated = "contacts.created";
        public const string ContactsDeleted = "contacts.deleted";
        public const string ContactSearches = "contacts.searches";
        public const string DatabaseQueryDuration = "db.query.duration";
    }

    // Tag names
    public static class Tags
    {
        public const string ContactId = "contact.id";
        public const string GroupId = "group.id";
        public const string TagId = "tag.id";
        public const string SearchTerm = "search.term";
        public const string ResultCount = "result.count";
        public const string OperationType = "operation.type";
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Telemetry\TelemetryExtensions.cs
SIZE: 1.09 KB
MODIFIED: 09/17/2025 12:34:45
================================================================================

// src/MyOpenTelemetryApi.Api/Telemetry/TelemetryExtensions.cs
using OpenTelemetry;
using OpenTelemetry.Logs;
using OpenTelemetry.Trace;

namespace MyOpenTelemetryApi.Api.Telemetry;

public static class TelemetryExtensions
{
    public static OpenTelemetryLoggerOptions AddFileExporter(
        this OpenTelemetryLoggerOptions options,
        string filePath)
    {
        return options.AddProcessor(new SimpleLogRecordExportProcessor(new FileLogExporter(filePath)));
    }

    public static TracerProviderBuilder AddFileExporter(
        this TracerProviderBuilder builder,
        IConfiguration configuration)
    {
        bool enabled = configuration.GetValue<bool>("OpenTelemetry:Exporter:File:Enabled");
        if (enabled)
        {
            _ = configuration.GetValue<string>("OpenTelemetry:Exporter:File:TracePath")
                           ?? "logs/otel-traces.json";
            // For traces, we'd implement a similar FileTraceExporter
            // For now, we'll use console exporter as file trace export is complex
        }

        return builder;
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\AddressDto.cs
SIZE: 0.92 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/AddressDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class AddressDto
{
    public Guid Id { get; set; }
    public string? StreetLine1 { get; set; }
    public string? StreetLine2 { get; set; }
    public string? City { get; set; }
    public string? StateProvince { get; set; }
    public string? PostalCode { get; set; }
    public string? Country { get; set; }
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}

public class CreateAddressDto
{
    public string? StreetLine1 { get; set; }
    public string? StreetLine2 { get; set; }
    public string? City { get; set; }
    public string? StateProvince { get; set; }
    public string? PostalCode { get; set; }
    public string? Country { get; set; }
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\ContactDto.cs
SIZE: 0.92 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/ContactDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class ContactDto
{
    public Guid Id { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }

    public List<EmailAddressDto> EmailAddresses { get; set; } = [];
    public List<PhoneNumberDto> PhoneNumbers { get; set; } = [];
    public List<AddressDto> Addresses { get; set; } = [];
    public List<GroupDto> Groups { get; set; } = [];
    public List<TagDto> Tags { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\ContactSummaryDto.cs
SIZE: 0.43 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/ContactSummaryDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class ContactSummaryDto
{
    public Guid Id { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? Company { get; set; }
    public string? PrimaryEmail { get; set; }
    public string? PrimaryPhone { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\CreateContactDto.cs
SIZE: 0.83 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/CreateContactDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class CreateContactDto
{
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }

    public List<CreateEmailAddressDto> EmailAddresses { get; set; } = [];
    public List<CreatePhoneNumberDto> PhoneNumbers { get; set; } = [];
    public List<CreateAddressDto> Addresses { get; set; } = [];
    public List<Guid> GroupIds { get; set; } = [];
    public List<Guid> TagIds { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\EmailAddressDto.cs
SIZE: 0.52 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/EmailAddressDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class EmailAddressDto
{
    public Guid Id { get; set; }
    public string Email { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}

public class CreateEmailAddressDto
{
    public string Email { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\GroupDto.cs
SIZE: 0.62 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/GroupDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class GroupDto
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
    public DateTime CreatedAt { get; set; }
    public int ContactCount { get; set; }
}

public class CreateGroupDto
{
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
}

public class UpdateGroupDto
{
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\PaginatedResultDto.cs
SIZE: 0.53 KB
MODIFIED: 09/17/2025 16:15:00
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/PaginatedResultDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class PaginatedResultDto<T>
{
    public List<T> Items { get; set; } = [];
    public int PageNumber { get; set; }
    public int PageSize { get; set; }
    public int TotalCount { get; set; }

    public int TotalPages => PageSize > 0 ? (int)Math.Ceiling(TotalCount / (double)PageSize) : 0;
    public bool HasPreviousPage => PageNumber > 1;
    public bool HasNextPage => PageNumber < TotalPages;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\PhoneNumberDto.cs
SIZE: 0.52 KB
MODIFIED: 09/17/2025 15:30:19
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/PhoneNumberDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class PhoneNumberDto
{
    public Guid Id { get; set; }
    public string Number { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}

public class CreatePhoneNumberDto
{
    public string Number { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\TagDto.cs
SIZE: 0.42 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/TagDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class TagDto
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string ColorHex { get; set; } = string.Empty;
}

public class CreateTagDto
{
    public string Name { get; set; } = string.Empty;
    public string ColorHex { get; set; } = string.Empty;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\UpdateContactDto.cs
SIZE: 0.52 KB
MODIFIED: 09/17/2025 15:30:19
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/UpdateContactDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class UpdateContactDto
{
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj
SIZE: 0.29 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions"/>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\ContactService.cs
SIZE: 15.85 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Application/Services/ContactService.cs - Enhanced version
using System.Diagnostics;
using System.Diagnostics.Metrics;
using Microsoft.Extensions.Logging;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;

namespace MyOpenTelemetryApi.Application.Services;

public class ContactService(
    IUnitOfWork unitOfWork,
    ILogger<ContactService> logger,
    ActivitySource activitySource,
    IMeterFactory meterFactory) : IContactService
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;
    private readonly ILogger<ContactService> _logger = logger;
    private readonly ActivitySource _activitySource = activitySource;

    // OpenTelemetry Metrics
    private readonly Meter _meter = meterFactory.Create("MyOpenTelemetryApi.Contacts");
    private readonly Counter<long> _contactsCreated = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateCounter<long>("contacts.created", "contacts", "Number of contacts created");
    private readonly Counter<long> _contactsDeleted = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateCounter<long>("contacts.deleted", "contacts", "Number of contacts deleted");
    private readonly Counter<long> _contactSearches = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateCounter<long>("contacts.searches", "searches", "Number of contact searches performed");
    private readonly Histogram<double> _searchDuration = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateHistogram<double>("contacts.search.duration", "seconds", "Duration of contact search operations");

    public async Task<ContactDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactById", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Getting contact by ID: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetByIdAsync(id, cancellationToken);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found: {ContactId}", id);
            return null;
        }

        return MapToDto(contact);
    }

    public async Task<ContactDto?> GetWithDetailsAsync(Guid id, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactWithDetails", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Getting contact with details: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetContactWithDetailsAsync(id, cancellationToken);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found: {ContactId}", id);
            return null;
        }

        return MapToDto(contact);
    }

    public async Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedAsync(
        int pageNumber, int pageSize, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetPaginatedContacts", ActivityKind.Internal);
        activity?.SetTag("page.number", pageNumber);
        activity?.SetTag("page.size", pageSize);

        _logger.LogInformation("Getting paginated contacts: Page {PageNumber}, Size {PageSize}", pageNumber, pageSize);

        var query = _unitOfWork.Contacts.GetQueryable();
        var totalCount = await Task.Run(() => query.Count(), cancellationToken);

        var contacts = await Task.Run(() => query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToList(), cancellationToken);

        return new PaginatedResultDto<ContactSummaryDto>
        {
            Items = contacts.Select(MapToSummaryDto).ToList(),
            TotalCount = totalCount,
            PageNumber = pageNumber,
            PageSize = pageSize
        };
    }

    public async Task<List<ContactSummaryDto>> SearchAsync(string searchTerm, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("SearchContacts", ActivityKind.Internal);
        activity?.SetTag("search.term", searchTerm);

        _logger.LogInformation("Searching contacts with term: {SearchTerm}", searchTerm);

        _contactSearches.Add(1, new KeyValuePair<string, object?>("search.term.length", searchTerm.Length));

        var stopwatch = Stopwatch.StartNew();
        var contacts = await _unitOfWork.Contacts.SearchContactsAsync(searchTerm, cancellationToken);
        stopwatch.Stop();

        _searchDuration.Record(stopwatch.Elapsed.TotalSeconds,
            new KeyValuePair<string, object?>("result.count", contacts.Count()));

        activity?.SetTag("result.count", contacts.Count());

        return contacts.Select(MapToSummaryDto).ToList();
    }

    public async Task<List<ContactSummaryDto>> GetByGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactsByGroup", ActivityKind.Internal);
        activity?.SetTag("group.id", groupId);

        _logger.LogInformation("Getting contacts by group: {GroupId}", groupId);

        var contacts = await _unitOfWork.Contacts.GetContactsByGroupAsync(groupId, cancellationToken);
        return contacts.Select(MapToSummaryDto).ToList();
    }

    public async Task<List<ContactSummaryDto>> GetByTagAsync(Guid tagId, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactsByTag", ActivityKind.Internal);
        activity?.SetTag("tag.id", tagId);

        _logger.LogInformation("Getting contacts by tag: {TagId}", tagId);

        var contacts = await _unitOfWork.Contacts.GetContactsByTagAsync(tagId, cancellationToken);
        return contacts.Select(MapToSummaryDto).ToList();
    }

    public async Task<ContactDto> CreateAsync(CreateContactDto dto, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("CreateContact", ActivityKind.Internal);

        // Enhanced logging with more context
        using (_logger.BeginScope(new Dictionary<string, object>
        {
            ["Operation"] = "CreateContact",
            ["HasEmail"] = dto.EmailAddresses?.Count > 0,
            ["HasPhone"] = dto.PhoneNumbers?.Count > 0,
            ["HasAddress"] = dto.Addresses?.Count > 0,
            ["Company"] = dto.Company ?? "None"
        }))
        {
            _logger.LogInformation(
                "Creating new contact: {FirstName} {LastName} with {EmailCount} emails, {PhoneCount} phones, {AddressCount} addresses",
                dto.FirstName,
                dto.LastName,
                dto.EmailAddresses?.Count ?? 0,
                dto.PhoneNumbers?.Count ?? 0,
                dto.Addresses?.Count ?? 0
            );

            Contact contact = new()
            {
                Id = Guid.NewGuid(),
                FirstName = dto.FirstName,
                LastName = dto.LastName,
                MiddleName = dto.MiddleName,
                Nickname = dto.Nickname,
                Company = dto.Company,
                JobTitle = dto.JobTitle,
                DateOfBirth = dto.DateOfBirth,
                Notes = dto.Notes,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            // Add generated contact ID to activity and log scope
            activity?.SetTag("contact.id", contact.Id);
            activity?.SetTag("contact.has_email", dto.EmailAddresses?.Count > 0);
            activity?.SetTag("contact.has_phone", dto.PhoneNumbers?.Count > 0);
            activity?.SetTag("contact.company", dto.Company ?? "none");

            // Map email addresses
            if (dto.EmailAddresses != null)
            {
                contact.EmailAddresses = dto.EmailAddresses.Select(e => new EmailAddress
                {
                    Id = Guid.NewGuid(),
                    ContactId = contact.Id,
                    Email = e.Email,
                    Type = Enum.Parse<EmailType>(e.Type, ignoreCase: true),
                    IsPrimary = e.IsPrimary
                }).ToList();
            }

            // Map phone numbers
            if (dto.PhoneNumbers != null)
            {
                contact.PhoneNumbers = dto.PhoneNumbers.Select(p => new PhoneNumber
                {
                    Id = Guid.NewGuid(),
                    ContactId = contact.Id,
                    Number = p.Number,
                    Type = Enum.Parse<PhoneType>(p.Type, ignoreCase: true),
                    IsPrimary = p.IsPrimary
                }).ToList();
            }

            // Map addresses
            if (dto.Addresses != null)
            {
                contact.Addresses = dto.Addresses.Select(a => new Address
                {
                    Id = Guid.NewGuid(),
                    ContactId = contact.Id,
                    StreetLine1 = a.StreetLine1,
                    StreetLine2 = a.StreetLine2,
                    City = a.City,
                    StateProvince = a.StateProvince,
                    PostalCode = a.PostalCode,
                    Country = a.Country,
                    Type = Enum.Parse<AddressType>(a.Type, ignoreCase: true),
                    IsPrimary = a.IsPrimary
                }).ToList();
            }

            await _unitOfWork.Contacts.AddAsync(contact, cancellationToken);

            // Handle groups
            if (dto.GroupIds != null && dto.GroupIds.Count != 0)
            {
                foreach (Guid groupId in dto.GroupIds)
                {
                    Group? group = await _unitOfWork.Groups.GetByIdAsync(groupId, cancellationToken);
                    if (group != null)
                    {
                        contact.ContactGroups ??= [];
                        contact.ContactGroups.Add(new ContactGroup
                        {
                            ContactId = contact.Id,
                            GroupId = groupId
                        });
                    }
                }
                activity?.SetTag("contact.group_count", dto.GroupIds.Count);
            }

            // Handle tags
            if (dto.TagIds != null && dto.TagIds.Count != 0)
            {
                foreach (Guid tagId in dto.TagIds)
                {
                    Tag? tag = await _unitOfWork.Tags.GetByIdAsync(tagId, cancellationToken);
                    if (tag != null)
                    {
                        contact.Tags ??= [];
                        contact.Tags.Add(new ContactTag
                        {
                            ContactId = contact.Id,
                            TagId = tagId
                        });
                    }
                }
                activity?.SetTag("contact.tag_count", dto.TagIds.Count);
            }

            await _unitOfWork.SaveChangesAsync(cancellationToken);

            // Record metric after successful creation
            _contactsCreated.Add(1,
                new KeyValuePair<string, object?>("company", dto.Company ?? "none"),
                new KeyValuePair<string, object?>("has.email", dto.EmailAddresses?.Count > 0),
                new KeyValuePair<string, object?>("has.phone", dto.PhoneNumbers?.Count > 0));

            _logger.LogInformation(
                "Contact created successfully: {ContactId} - {FirstName} {LastName}",
                contact.Id,
                contact.FirstName,
                contact.LastName
            );

            return MapToDto(contact);
        }
    }

    public async Task<ContactDto?> UpdateAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("UpdateContact", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Updating contact: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetByIdAsync(id, cancellationToken);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found for update: {ContactId}", id);
            return null;
        }

        contact.FirstName = dto.FirstName;
        contact.LastName = dto.LastName;
        contact.MiddleName = dto.MiddleName;
        contact.Nickname = dto.Nickname;
        contact.Company = dto.Company;
        contact.JobTitle = dto.JobTitle;
        contact.DateOfBirth = dto.DateOfBirth;
        contact.Notes = dto.Notes;
        contact.UpdatedAt = DateTime.UtcNow;

        _unitOfWork.Contacts.Update(contact);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation("Contact updated successfully: {ContactId}", id);

        return MapToDto(contact);
    }

    public async Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("DeleteContact", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Deleting contact: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetByIdAsync(id, cancellationToken);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found for deletion: {ContactId}", id);
            return false;
        }

        _unitOfWork.Contacts.Delete(contact);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _contactsDeleted.Add(1);

        _logger.LogInformation("Contact deleted successfully: {ContactId}", id);

        return true;
    }

    private static ContactDto MapToDto(Contact contact)
    {
        return new ContactDto
        {
            Id = contact.Id,
            FirstName = contact.FirstName,
            LastName = contact.LastName,
            MiddleName = contact.MiddleName,
            Nickname = contact.Nickname,
            Company = contact.Company,
            JobTitle = contact.JobTitle,
            DateOfBirth = contact.DateOfBirth,
            Notes = contact.Notes,
            CreatedAt = contact.CreatedAt,
            UpdatedAt = contact.UpdatedAt,
            EmailAddresses = contact.EmailAddresses?.Select(e => new EmailAddressDto
            {
                Email = e.Email,
                Type = e.Type.ToString(),
                IsPrimary = e.IsPrimary
            }).ToList() ?? [],
            PhoneNumbers = contact.PhoneNumbers?.Select(p => new PhoneNumberDto
            {
                Number = p.Number,
                Type = p.Type.ToString(),
                IsPrimary = p.IsPrimary
            }).ToList() ?? [],
            Addresses = contact.Addresses?.Select(a => new AddressDto
            {
                StreetLine1 = a.StreetLine1,
                StreetLine2 = a.StreetLine2,
                City = a.City,
                StateProvince = a.StateProvince,
                PostalCode = a.PostalCode,
                Country = a.Country,
                Type = a.Type.ToString(),
                IsPrimary = a.IsPrimary
            }).ToList() ?? []
        };
    }

    private static ContactSummaryDto MapToSummaryDto(Contact contact)
    {
        return new ContactSummaryDto
        {
            Id = contact.Id,
            FirstName = contact.FirstName,
            LastName = contact.LastName,
            Company = contact.Company,
            PrimaryEmail = contact.EmailAddresses?.FirstOrDefault(e => e.IsPrimary)?.Email,
            PrimaryPhone = contact.PhoneNumbers?.FirstOrDefault(p => p.IsPrimary)?.Number
        };
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\GroupService.cs
SIZE: 2.59 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Application/Services/GroupService.cs
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;

namespace MyOpenTelemetryApi.Application.Services;

public class GroupService(IUnitOfWork unitOfWork) : IGroupService
{
    public async Task<GroupDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default)
    {
        Group? group = await unitOfWork.Groups.GetByIdAsync(id, cancellationToken);
        return group == null ? null : MapToDto(group);
    }

    public async Task<List<GroupDto>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        IEnumerable<Group> groups = await unitOfWork.Groups.GetAllAsync(cancellationToken);
        List<GroupDto> groupDtos = [];

        foreach (Group group in groups)
        {
            groupDtos.Add(MapToDto(group));
        }

        return groupDtos;
    }

    public async Task<GroupDto> CreateAsync(CreateGroupDto dto, CancellationToken cancellationToken = default)
    {
        Group group = new()
        {
            Id = Guid.NewGuid(),
            Name = dto.Name,
            Description = dto.Description,
            CreatedAt = DateTime.UtcNow
        };

        await unitOfWork.Groups.AddAsync(group, cancellationToken);
        await unitOfWork.SaveChangesAsync(cancellationToken);

        return MapToDto(group);
    }

    public async Task<GroupDto?> UpdateAsync(Guid id, UpdateGroupDto dto, CancellationToken cancellationToken = default)
    {
        Group? group = await unitOfWork.Groups.GetByIdAsync(id, cancellationToken);
        if (group == null) return null;

        group.Name = dto.Name;
        group.Description = dto.Description;

        unitOfWork.Groups.Update(group);
        await unitOfWork.SaveChangesAsync(cancellationToken);

        return MapToDto(group);
    }

    public async Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default)
    {
        Group? group = await unitOfWork.Groups.GetByIdAsync(id, cancellationToken);
        if (group == null) return false;

        unitOfWork.Groups.Delete(group);
        await unitOfWork.SaveChangesAsync(cancellationToken);
        return true;
    }

    private static GroupDto MapToDto(Group group)
    {
        return new GroupDto
        {
            Id = group.Id,
            Name = group.Name,
            Description = group.Description,
            CreatedAt = group.CreatedAt,
            ContactCount = group.ContactGroups?.Count ?? 0
        };
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\IContactService.cs
SIZE: 1.16 KB
MODIFIED: 09/17/2025 15:30:19
================================================================================

// src/MyOpenTelemetryApi.Application/Services/IContactService.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Application.Services;

public interface IContactService
{
    Task<ContactDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default);
    Task<ContactDto?> GetWithDetailsAsync(Guid id, CancellationToken cancellationToken = default);
    Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedAsync(int pageNumber, int pageSize, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> SearchAsync(string searchTerm, CancellationToken cancellationToken = default);
    Task<ContactDto> CreateAsync(CreateContactDto dto, CancellationToken cancellationToken = default);
    Task<ContactDto?> UpdateAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default);
    Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetByGroupAsync(Guid groupId, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetByTagAsync(Guid tagId, CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\IGroupService.cs
SIZE: 0.66 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Application/Services/IGroupService.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Application.Services;

public interface IGroupService
{
    Task<GroupDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default);
    Task<List<GroupDto>> GetAllAsync(CancellationToken cancellationToken = default);
    Task<GroupDto> CreateAsync(CreateGroupDto dto, CancellationToken cancellationToken = default);
    Task<GroupDto?> UpdateAsync(Guid id, UpdateGroupDto dto, CancellationToken cancellationToken = default);
    Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\ITagService.cs
SIZE: 0.65 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Application/Services/ITagService.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Application.Services;

public interface ITagService
{
    Task<TagDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default);
    Task<List<TagDto>> GetAllAsync(CancellationToken cancellationToken = default);
    Task<TagDto> CreateAsync(CreateTagDto dto, CancellationToken cancellationToken = default);
    Task<TagDto?> UpdateAsync(Guid id, CreateTagDto dto, CancellationToken cancellationToken = default);
    Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\TagService.cs
SIZE: 2.84 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Application/Services/TagService.cs
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;

namespace MyOpenTelemetryApi.Application.Services;

public class TagService(IUnitOfWork unitOfWork) : ITagService
{
    public async Task<TagDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default)
    {
        Tag? tag = await unitOfWork.Tags.GetByIdAsync(id, cancellationToken);
        return tag == null ? null : MapToDto(tag);
    }

    public async Task<List<TagDto>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        IEnumerable<Tag> tags = await unitOfWork.Tags.GetAllAsync(cancellationToken);
        return [.. tags.Select(MapToDto)];
    }

    public async Task<TagDto> CreateAsync(CreateTagDto dto, CancellationToken cancellationToken = default)
    {
        // Check if tag with same name already exists
        Tag? existingTag = await unitOfWork.Tags.GetByNameAsync(dto.Name, cancellationToken);
        if (existingTag != null)
        {
            throw new InvalidOperationException($"Tag with name '{dto.Name}' already exists.");
        }

        Tag tag = new()
        {
            Id = Guid.NewGuid(),
            Name = dto.Name,
            ColorHex = dto.ColorHex
        };

        await unitOfWork.Tags.AddAsync(tag, cancellationToken);
        await unitOfWork.SaveChangesAsync(cancellationToken);

        return MapToDto(tag);
    }

    public async Task<TagDto?> UpdateAsync(Guid id, CreateTagDto dto, CancellationToken cancellationToken = default)
    {
        Tag? tag = await unitOfWork.Tags.GetByIdAsync(id, cancellationToken);
        if (tag == null) return null;

        // Check if another tag with the same name exists
        Tag? existingTag = await unitOfWork.Tags.GetByNameAsync(dto.Name, cancellationToken);
        if (existingTag != null && existingTag.Id != id)
        {
            throw new InvalidOperationException($"Another tag with name '{dto.Name}' already exists.");
        }

        tag.Name = dto.Name;
        tag.ColorHex = dto.ColorHex;

        unitOfWork.Tags.Update(tag);
        await unitOfWork.SaveChangesAsync(cancellationToken);

        return MapToDto(tag);
    }

    public async Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default)
    {
        Tag? tag = await unitOfWork.Tags.GetByIdAsync(id, cancellationToken);
        if (tag == null) return false;

        unitOfWork.Tags.Delete(tag);
        await unitOfWork.SaveChangesAsync(cancellationToken);
        return true;
    }

    private static TagDto MapToDto(Tag tag)
    {
        return new TagDto
        {
            Id = tag.Id,
            Name = tag.Name,
            ColorHex = tag.ColorHex
        };
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Address.cs
SIZE: 0.62 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Address.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Address
{
    public Guid Id { get; set; }
    public Guid ContactId { get; set; }
    public string? StreetLine1 { get; set; }
    public string? StreetLine2 { get; set; }
    public string? City { get; set; }
    public string? StateProvince { get; set; }
    public string? PostalCode { get; set; }
    public string? Country { get; set; }
    public AddressType Type { get; set; }
    public bool IsPrimary { get; set; }

    // Navigation property
    public Contact Contact { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\AddressType.cs
SIZE: 0.17 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Enums/AddressType.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public enum AddressType
{
    Home,
    Work,
    Other
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Contact.cs
SIZE: 0.95 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Contact.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Contact
{
    public Guid Id { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }

    // Navigation properties
    public List<EmailAddress> EmailAddresses { get; set; } = [];
    public List<PhoneNumber> PhoneNumbers { get; set; } = [];
    public List<Address> Addresses { get; set; } = [];
    public List<ContactGroup> ContactGroups { get; set; } = [];
    public List<ContactTag> Tags { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\ContactGroup.cs
SIZE: 0.4 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/ContactGroup.cs (Join table)
namespace MyOpenTelemetryApi.Domain.Entities;

public class ContactGroup
{
    public Guid ContactId { get; set; }
    public Guid GroupId { get; set; }
    public DateTime AddedAt { get; set; }

    // Navigation properties
    public Contact Contact { get; set; } = null!;
    public Group Group { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\ContactTag.cs
SIZE: 0.35 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/ContactTag.cs (Join table)
namespace MyOpenTelemetryApi.Domain.Entities;

public class ContactTag
{
    public Guid ContactId { get; set; }
    public Guid TagId { get; set; }

    // Navigation properties
    public Contact Contact { get; set; } = null!;
    public Tag Tag { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\EmailAddress.cs
SIZE: 0.43 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/EmailAddress.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class EmailAddress
{
    public Guid Id { get; set; }
    public Guid ContactId { get; set; }
    public string Email { get; set; } = string.Empty;
    public EmailType Type { get; set; }
    public bool IsPrimary { get; set; }

    // Navigation property
    public Contact Contact { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\EmailType.cs
SIZE: 0.17 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Enums/EmailType.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public enum EmailType
{
    Personal,
    Work,
    Other
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Group.cs
SIZE: 0.39 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Group.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Group
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
    public DateTime CreatedAt { get; set; }

    // Navigation property
    public List<ContactGroup> ContactGroups { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\PhoneNumber.cs
SIZE: 0.43 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/PhoneNumber.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class PhoneNumber
{
    public Guid Id { get; set; }
    public Guid ContactId { get; set; }
    public string Number { get; set; } = string.Empty;
    public PhoneType Type { get; set; }
    public bool IsPrimary { get; set; }

    // Navigation property
    public Contact Contact { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\PhoneType.cs
SIZE: 0.19 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Domain/Enums/PhoneType.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public enum PhoneType
{
    Mobile,
    Home,
    Work,
    Fax,
    Other
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Tag.cs
SIZE: 0.34 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Tag.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Tag
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string? ColorHex { get; set; }

    // Navigation property
    public List<ContactTag> ContactTags { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IContactRepository.cs
SIZE: 0.67 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IContactRepository.cs
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IContactRepository : IRepository<Contact>
{
    Task<IEnumerable<Contact>> GetContactsByGroupAsync(Guid groupId, CancellationToken cancellationToken = default);
    Task<IEnumerable<Contact>> GetContactsByTagAsync(Guid tagId, CancellationToken cancellationToken = default);
    Task<Contact?> GetContactWithDetailsAsync(Guid id, CancellationToken cancellationToken = default);
    Task<IEnumerable<Contact>> SearchContactsAsync(string searchTerm, CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IGroupRepository.cs
SIZE: 0.32 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IGroupRepository.cs
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IGroupRepository : IRepository<Group>
{
    Task<Group?> GetGroupWithContactsAsync(Guid id, CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IRepository.cs
SIZE: 0.69 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IRepository.cs
namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IRepository<T> where T : class
{
    Task<T?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default);
    Task<IEnumerable<T>> GetAllAsync(CancellationToken cancellationToken = default);
    IQueryable<T> GetQueryable(); // Added for efficient querying - no cancellation token needed for synchronous method
    Task AddAsync(T entity, CancellationToken cancellationToken = default);
    void Update(T entity); // Synchronous operation - no cancellation token needed
    void Delete(T entity); // Synchronous operation - no cancellation token needed
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\ITagRepository.cs
SIZE: 0.3 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/ITagRepository.cs
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface ITagRepository : IRepository<Tag>
{
    Task<Tag?> GetByNameAsync(string name, CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IUnitOfWork.cs
SIZE: 0.34 KB
MODIFIED: 10/07/2025 12:27:06
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IUnitOfWork.cs
namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IUnitOfWork
{
    IContactRepository Contacts { get; }
    IGroupRepository Groups { get; }
    ITagRepository Tags { get; }
    Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj
SIZE: 0.14 KB
MODIFIED: 10/06/2025 14:29:28
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <!-- No additional packages or properties needed - inherits from Directory.Build.props -->

</Project>



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\AppDbContext.cs
SIZE: 1.03 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/AppDbContext.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data;

public class AppDbContext(DbContextOptions<AppDbContext> options) : DbContext(options)
{
    public DbSet<Contact> Contacts => Set<Contact>();
    public DbSet<EmailAddress> EmailAddresses => Set<EmailAddress>();
    public DbSet<PhoneNumber> PhoneNumbers => Set<PhoneNumber>();
    public DbSet<Address> Addresses => Set<Address>();
    public DbSet<Group> Groups => Set<Group>();
    public DbSet<Tag> Tags => Set<Tag>();
    public DbSet<ContactGroup> ContactGroups => Set<ContactGroup>();
    public DbSet<ContactTag> ContactTags => Set<ContactTag>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Apply all configurations from the current assembly
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(AppDbContext).Assembly);

        base.OnModelCreating(modelBuilder);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\AddressConfiguration.cs
SIZE: 0.96 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/AddressConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class AddressConfiguration : IEntityTypeConfiguration<Address>
{
    public void Configure(EntityTypeBuilder<Address> builder)
    {
        builder.HasKey(a => a.Id);

        builder.Property(a => a.StreetLine1).HasMaxLength(200);
        builder.Property(a => a.StreetLine2).HasMaxLength(200);
        builder.Property(a => a.City).HasMaxLength(100);
        builder.Property(a => a.StateProvince).HasMaxLength(100);
        builder.Property(a => a.PostalCode).HasMaxLength(20);
        builder.Property(a => a.Country).HasMaxLength(100);

        builder.Property(a => a.Type)
            .HasConversion<string>()
            .HasMaxLength(20);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactConfiguration.cs
SIZE: 1.59 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/ContactConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class ContactConfiguration : IEntityTypeConfiguration<Contact>
{
    public void Configure(EntityTypeBuilder<Contact> builder)
    {
        builder.HasKey(c => c.Id);

        builder.Property(c => c.FirstName)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(c => c.LastName)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(c => c.MiddleName)
            .HasMaxLength(100);

        builder.Property(c => c.Nickname)
            .HasMaxLength(50);

        builder.Property(c => c.Company)
            .HasMaxLength(200);

        builder.Property(c => c.JobTitle)
            .HasMaxLength(100);

        builder.Property(c => c.Notes)
            .HasMaxLength(1000);

        builder.HasMany(c => c.EmailAddresses)
            .WithOne(e => e.Contact)
            .HasForeignKey(e => e.ContactId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(c => c.PhoneNumbers)
            .WithOne(p => p.Contact)
            .HasForeignKey(p => p.ContactId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(c => c.Addresses)
            .WithOne(a => a.Contact)
            .HasForeignKey(a => a.ContactId)
            .OnDelete(DeleteBehavior.Cascade);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactGroupConfiguration.cs
SIZE: 0.79 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/ContactGroupConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class ContactGroupConfiguration : IEntityTypeConfiguration<ContactGroup>
{
    public void Configure(EntityTypeBuilder<ContactGroup> builder)
    {
        builder.HasKey(cg => new { cg.ContactId, cg.GroupId });

        builder.HasOne(cg => cg.Contact)
            .WithMany(c => c.ContactGroups)
            .HasForeignKey(cg => cg.ContactId);

        builder.HasOne(cg => cg.Group)
            .WithMany(g => g.ContactGroups)
            .HasForeignKey(cg => cg.GroupId);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactTagConfiguration.cs
SIZE: 0.76 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/ContactTagConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class ContactTagConfiguration : IEntityTypeConfiguration<ContactTag>
{
    public void Configure(EntityTypeBuilder<ContactTag> builder)
    {
        builder.HasKey(ct => new { ct.ContactId, ct.TagId });

        builder.HasOne(ct => ct.Contact)
            .WithMany(c => c.Tags)
            .HasForeignKey(ct => ct.ContactId);

        builder.HasOne(ct => ct.Tag)
            .WithMany(t => t.ContactTags)
            .HasForeignKey(ct => ct.TagId);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\EmailAddressConfiguration.cs
SIZE: 0.73 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/EmailAddressConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class EmailAddressConfiguration : IEntityTypeConfiguration<EmailAddress>
{
    public void Configure(EntityTypeBuilder<EmailAddress> builder)
    {
        builder.HasKey(e => e.Id);

        builder.Property(e => e.Email)
            .IsRequired()
            .HasMaxLength(254); // Standard email max length

        builder.Property(e => e.Type)
            .HasConversion<string>()
            .HasMaxLength(20);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\GroupConfiguration.cs
SIZE: 0.64 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/GroupConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class GroupConfiguration : IEntityTypeConfiguration<Group>
{
    public void Configure(EntityTypeBuilder<Group> builder)
    {
        builder.HasKey(g => g.Id);

        builder.Property(g => g.Name)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(g => g.Description)
            .HasMaxLength(500);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\PhoneNumberConfiguration.cs
SIZE: 0.7 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/PhoneNumberConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class PhoneNumberConfiguration : IEntityTypeConfiguration<PhoneNumber>
{
    public void Configure(EntityTypeBuilder<PhoneNumber> builder)
    {
        builder.HasKey(p => p.Id);

        builder.Property(p => p.Number)
            .IsRequired()
            .HasMaxLength(50);

        builder.Property(p => p.Type)
            .HasConversion<string>()
            .HasMaxLength(20);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\TagConfiguration.cs
SIZE: 0.7 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/TagConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class TagConfiguration : IEntityTypeConfiguration<Tag>
{
    public void Configure(EntityTypeBuilder<Tag> builder)
    {
        builder.HasKey(t => t.Id);

        builder.Property(t => t.Name)
            .IsRequired()
            .HasMaxLength(50);

        builder.Property(t => t.ColorHex)
            .HasMaxLength(7); // #RRGGBB format

        builder.HasIndex(t => t.Name).IsUnique();
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.cs
SIZE: 11.04 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Contacts",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    FirstName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    MiddleName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Nickname = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true),
                    Company = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true),
                    JobTitle = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    DateOfBirth = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Notes = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contacts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Groups",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Groups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Tags",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    ColorHex = table.Column<string>(type: "character varying(7)", maxLength: 7, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Addresses",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    StreetLine1 = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true),
                    StreetLine2 = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true),
                    City = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    StateProvince = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    PostalCode = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Country = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Type = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    IsPrimary = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Addresses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Addresses_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmailAddresses",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    Email = table.Column<string>(type: "character varying(254)", maxLength: 254, nullable: false),
                    Type = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    IsPrimary = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmailAddresses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmailAddresses_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PhoneNumbers",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    Number = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    Type = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    IsPrimary = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhoneNumbers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PhoneNumbers_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ContactGroups",
                columns: table => new
                {
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    GroupId = table.Column<Guid>(type: "uuid", nullable: false),
                    AddedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactGroups", x => new { x.ContactId, x.GroupId });
                    table.ForeignKey(
                        name: "FK_ContactGroups_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContactGroups_Groups_GroupId",
                        column: x => x.GroupId,
                        principalTable: "Groups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ContactTags",
                columns: table => new
                {
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    TagId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactTags", x => new { x.ContactId, x.TagId });
                    table.ForeignKey(
                        name: "FK_ContactTags_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContactTags_Tags_TagId",
                        column: x => x.TagId,
                        principalTable: "Tags",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Addresses_ContactId",
                table: "Addresses",
                column: "ContactId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactGroups_GroupId",
                table: "ContactGroups",
                column: "GroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactTags_TagId",
                table: "ContactTags",
                column: "TagId");

            migrationBuilder.CreateIndex(
                name: "IX_EmailAddresses_ContactId",
                table: "EmailAddresses",
                column: "ContactId");

            migrationBuilder.CreateIndex(
                name: "IX_PhoneNumbers_ContactId",
                table: "PhoneNumbers",
                column: "ContactId");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_Name",
                table: "Tags",
                column: "Name",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Addresses");

            migrationBuilder.DropTable(
                name: "ContactGroups");

            migrationBuilder.DropTable(
                name: "ContactTags");

            migrationBuilder.DropTable(
                name: "EmailAddresses");

            migrationBuilder.DropTable(
                name: "PhoneNumbers");

            migrationBuilder.DropTable(
                name: "Groups");

            migrationBuilder.DropTable(
                name: "Tags");

            migrationBuilder.DropTable(
                name: "Contacts");
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.Designer.cs
SIZE: 12.92 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOpenTelemetryApi.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250804231722_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactGroups")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Group", "Group")
                        .WithMany("ContactGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactGroups");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Navigation("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.cs
SIZE: 1.96 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// This is what to paste into the generated migration file
// After running: dotnet ef migrations add AddContactPaginationIndexes
// Find the file in: src/MyOpenTelemetryApi.Infrastructure/Data/Migrations/
// It will be named something like: 20251003182600_AddContactPaginationIndexes.cs

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    /// <inheritdoc />
    public partial class AddContactPaginationIndexes : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // Primary pagination index - for default sort by LastName, FirstName
            // This will dramatically improve query performance for the default sort order
            migrationBuilder.CreateIndex(
                name: "IX_Contacts_LastName_FirstName_Id",
                table: "Contacts",
                columns: new[] { "LastName", "FirstName", "Id" });

            // Additional sort option indexes for other sort orders
            migrationBuilder.CreateIndex(
                name: "IX_Contacts_Company_Id",
                table: "Contacts",
                columns: new[] { "Company", "Id" });

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_FirstName_Id",
                table: "Contacts",
                columns: new[] { "FirstName", "Id" });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_Contacts_LastName_FirstName_Id",
                table: "Contacts");

            migrationBuilder.DropIndex(
                name: "IX_Contacts_Company_Id",
                table: "Contacts");

            migrationBuilder.DropIndex(
                name: "IX_Contacts_FirstName_Id",
                table: "Contacts");
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.Designer.cs
SIZE: 12.96 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOpenTelemetryApi.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251003222820_AddContactPaginationIndexes")]
    partial class AddContactPaginationIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactGroups")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Group", "Group")
                        .WithMany("ContactGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactGroups");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Navigation("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\AppDbContextModelSnapshot.cs
SIZE: 12.83 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOpenTelemetryApi.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactGroups")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Group", "Group")
                        .WithMany("ContactGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactGroups");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Navigation("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj
SIZE: 0.58 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore"/>
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL"/>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\ContactRepository.cs
SIZE: 2.46 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/ContactRepository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class ContactRepository(AppDbContext context) : Repository<Contact>(context), IContactRepository
{
    public async Task<IEnumerable<Contact>> GetContactsByGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
    {
        return await _context.Contacts
            .Include(c => c.ContactGroups)
            .Where(c => c.ContactGroups.Any(cg => cg.GroupId == groupId))
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Contact>> GetContactsByTagAsync(Guid tagId, CancellationToken cancellationToken = default)
    {
        return await _context.Contacts
            .Include(c => c.Tags)
            .Where(c => c.Tags.Any(ct => ct.TagId == tagId))
            .ToListAsync(cancellationToken);
    }

    public async Task<Contact?> GetContactWithDetailsAsync(Guid id, CancellationToken cancellationToken = default)
    {
        return await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.ContactGroups)
                .ThenInclude(cg => cg.Group)
            .Include(c => c.Tags)
                .ThenInclude(ct => ct.Tag)
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken);
    }

    public async Task<IEnumerable<Contact>> SearchContactsAsync(string searchTerm, CancellationToken cancellationToken = default)
    {
        string lowerSearchTerm = searchTerm.ToLower();

        return await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Where(c =>
                c.FirstName.ToLower().Contains(lowerSearchTerm) ||
                c.LastName.ToLower().Contains(lowerSearchTerm) ||
                (c.Nickname != null && c.Nickname.ToLower().Contains(lowerSearchTerm)) ||
                (c.Company != null && c.Company.ToLower().Contains(lowerSearchTerm)) ||
                c.EmailAddresses.Any(e => e.Email.ToLower().Contains(lowerSearchTerm)) ||
                c.PhoneNumbers.Any(p => p.Number.Contains(searchTerm)))
            .ToListAsync(cancellationToken);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\GroupRepository.cs
SIZE: 0.73 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/GroupRepository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class GroupRepository(AppDbContext context) : Repository<Group>(context), IGroupRepository
{
    public async Task<Group?> GetGroupWithContactsAsync(Guid id, CancellationToken cancellationToken = default)
    {
        return await _context.Groups
            .Include(g => g.ContactGroups)
                .ThenInclude(cg => cg.Contact)
            .FirstOrDefaultAsync(g => g.Id == id, cancellationToken);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\Repository.cs
SIZE: 1.26 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/Repository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class Repository<T>(AppDbContext context) : IRepository<T> where T : class
{
    protected readonly AppDbContext _context = context;
    protected readonly DbSet<T> _dbSet = context.Set<T>();

    public virtual async Task<T?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default)
    {
        return await _dbSet.FindAsync([id], cancellationToken);
    }

    public virtual async Task<IEnumerable<T>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        return await _dbSet.ToListAsync(cancellationToken);
    }

    public virtual IQueryable<T> GetQueryable()
    {
        return _dbSet.AsQueryable();
    }

    public virtual async Task AddAsync(T entity, CancellationToken cancellationToken = default)
    {
        await _dbSet.AddAsync(entity, cancellationToken);
    }

    public virtual void Update(T entity)
    {
        _dbSet.Update(entity);
    }

    public virtual void Delete(T entity)
    {
        _dbSet.Remove(entity);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\TagRepository.cs
SIZE: 0.64 KB
MODIFIED: 10/20/2025 15:48:31
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/TagRepository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class TagRepository(AppDbContext context) : Repository<Tag>(context), ITagRepository
{
    public async Task<Tag?> GetByNameAsync(string name, CancellationToken cancellationToken = default)
    {
        return await _context.Tags
            .FirstOrDefaultAsync(t => t.Name.ToLower() == name.ToLower(), cancellationToken);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\UnitOfWork.cs
SIZE: 1.31 KB
MODIFIED: 09/17/2025 14:51:00
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/UnitOfWork.cs
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class UnitOfWork : IUnitOfWork, IDisposable
{
    private readonly AppDbContext _context;
    private IContactRepository? _contacts;
    private IGroupRepository? _groups;
    private ITagRepository? _tags;
    private bool _disposed;

    public UnitOfWork(AppDbContext context)
    {
        _context = context;
    }

    public IContactRepository Contacts => _contacts ??= new ContactRepository(_context);
    public IGroupRepository Groups => _groups ??= new GroupRepository(_context);
    public ITagRepository Tags => _tags ??= new TagRepository(_context);

    public async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        return await _context.SaveChangesAsync(cancellationToken);
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                _context.Dispose();
            }
            _disposed = true;
        }
    }
}



================================================================================
FILE: tests\MyOpenTelemetryApi.Api.Tests\MyOpenTelemetryApi.Api.Tests.csproj
SIZE: 1.03 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk"/>
    <PackageReference Include="xunit"/>
    <PackageReference Include="xunit.analyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: tests\MyOpenTelemetryApi.Api.Tests\UnitTest1.cs
SIZE: 1.99 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// tests/MyOpenTelemetryApi.Api.Tests/ApiTests.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Api.Tests;

public class ApiTests
{
    [Fact]
    public void HealthController_Constructor_DoesNotThrow()
    {
        // This is a simple test to verify the test project is set up correctly
        Assert.True(true);
    }

    [Fact]
    public void PaginatedResultDto_CalculatesTotalPagesCorrectly()
    {
        // Arrange
        PaginatedResultDto<string> result = new()
        {
            TotalCount = 95,
            PageSize = 10
        };

        // Act & Assert
        Assert.Equal(10, result.TotalPages);
    }

    [Fact]
    public void PaginatedResultDto_HasPreviousPage_WorksCorrectly()
    {
        // Arrange
        PaginatedResultDto<string> result1 = new() { PageNumber = 1 };
        PaginatedResultDto<string> result2 = new() { PageNumber = 2 };

        // Act & Assert
        Assert.False(result1.HasPreviousPage);
        Assert.True(result2.HasPreviousPage);
    }

    [Fact]
    public void PaginatedResultDto_HasNextPage_WorksCorrectly()
    {
        // Arrange
        PaginatedResultDto<string> result = new()
        {
            PageNumber = 3,
            PageSize = 10,
            TotalCount = 25
        };

        // Act & Assert
        Assert.False(result.HasNextPage); // Page 3 is the last page (25 items / 10 per page)
    }

    [Theory]
    [InlineData(0, 10, 0)]
    [InlineData(1, 10, 1)]
    [InlineData(10, 10, 1)]
    [InlineData(11, 10, 2)]
    [InlineData(100, 10, 10)]
    [InlineData(101, 10, 11)]
    public void PaginatedResultDto_TotalPages_CalculatesCorrectly(int totalCount, int pageSize, int expectedPages)
    {
        // Arrange
        PaginatedResultDto<string> result = new()
        {
            TotalCount = totalCount,
            PageSize = pageSize
        };

        // Act & Assert
        Assert.Equal(expectedPages, result.TotalPages);
    }
}



================================================================================
FILE: tests\MyOpenTelemetryApi.Application.Tests\MyOpenTelemetryApi.Application.Tests.csproj
SIZE: 1.03 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================


<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk"/>
    <PackageReference Include="xunit"/>
    <PackageReference Include="xunit.analyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: tests\MyOpenTelemetryApi.Application.Tests\UnitTest1.cs
SIZE: 3.43 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// tests/MyOpenTelemetryApi.Application.Tests/ApplicationTests.cs
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Application.Tests;

public class ApplicationTests
{
    [Fact]
    public void ContactDto_Initialization_SetsDefaultValues()
    {
        // Arrange & Act
        ContactDto dto = new();

        // Assert
        Assert.NotNull(dto.FirstName);
        Assert.NotNull(dto.LastName);
        Assert.NotNull(dto.EmailAddresses);
        Assert.NotNull(dto.PhoneNumbers);
        Assert.NotNull(dto.Addresses);
        Assert.NotNull(dto.Groups);
        Assert.NotNull(dto.Tags);
        Assert.Empty(dto.EmailAddresses);
        Assert.Empty(dto.PhoneNumbers);
    }

    [Fact]
    public void CreateContactDto_Initialization_SetsDefaultValues()
    {
        // Arrange & Act
        CreateContactDto dto = new();

        // Assert
        Assert.NotNull(dto.FirstName);
        Assert.NotNull(dto.LastName);
        Assert.NotNull(dto.EmailAddresses);
        Assert.NotNull(dto.PhoneNumbers);
        Assert.NotNull(dto.Addresses);
        Assert.NotNull(dto.GroupIds);
        Assert.NotNull(dto.TagIds);
    }

    [Theory]
    [InlineData("Personal", EmailType.Personal)]
    [InlineData("Work", EmailType.Work)]
    [InlineData("Other", EmailType.Other)]
    public void EmailType_ParsesCorrectly(string input, EmailType expected)
    {
        // Act
        EmailType result = Enum.Parse<EmailType>(input);

        // Assert
        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("Mobile", PhoneType.Mobile)]
    [InlineData("Home", PhoneType.Home)]
    [InlineData("Work", PhoneType.Work)]
    [InlineData("Fax", PhoneType.Fax)]
    [InlineData("Other", PhoneType.Other)]
    public void PhoneType_ParsesCorrectly(string input, PhoneType expected)
    {
        // Act
        PhoneType result = Enum.Parse<PhoneType>(input);

        // Assert
        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("Home", AddressType.Home)]
    [InlineData("Work", AddressType.Work)]
    [InlineData("Other", AddressType.Other)]
    public void AddressType_ParsesCorrectly(string input, AddressType expected)
    {
        // Act
        AddressType result = Enum.Parse<AddressType>(input);

        // Assert
        Assert.Equal(expected, result);
    }

    [Fact]
    public void TagDto_CanBeCreatedWithName()
    {
        // Arrange & Act
        TagDto tag = new()
        {
            Id = Guid.NewGuid(),
            Name = "Important",
            ColorHex = "#FF0000"
        };

        // Assert
        Assert.NotEqual(Guid.Empty, tag.Id);
        Assert.Equal("Important", tag.Name);
        Assert.Equal("#FF0000", tag.ColorHex);
    }

    [Fact]
    public void GroupDto_ContactCountDefaultsToZero()
    {
        // Arrange & Act
        GroupDto group = new();

        // Assert
        Assert.Equal(0, group.ContactCount);
    }

    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData("Some notes")]
    public void UpdateContactDto_AcceptsVariousNoteValues(string? notes)
    {
        // Arrange & Act
        UpdateContactDto dto = new()
        {
            FirstName = "John",
            LastName = "Doe",
            Notes = notes
        };

        // Assert
        Assert.Equal(notes, dto.Notes);
    }
}



================================================================================
FILE: tests\MyOpenTelemetryApi.Infrastructure.Tests\MyOpenTelemetryApi.Infrastructure.Tests.csproj
SIZE: 1.03 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk"/>
    <PackageReference Include="xunit"/>
    <PackageReference Include="xunit.analyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: tests\MyOpenTelemetryApi.Infrastructure.Tests\UnitTest1.cs
SIZE: 5.61 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// tests/MyOpenTelemetryApi.Infrastructure.Tests/InfrastructureTests.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Tests;

public class InfrastructureTests
{
    [Fact]
    public void Contact_Entity_HasCorrectDefaults()
    {
        // Arrange & Act
        Contact contact = new();

        // Assert
        Assert.NotNull(contact.FirstName);
        Assert.NotNull(contact.LastName);
        Assert.NotNull(contact.EmailAddresses);
        Assert.NotNull(contact.PhoneNumbers);
        Assert.NotNull(contact.Addresses);
        Assert.NotNull(contact.ContactGroups);
        Assert.NotNull(contact.Tags);
        Assert.Empty(contact.EmailAddresses);
        Assert.Empty(contact.PhoneNumbers);
        Assert.Empty(contact.Addresses);
        Assert.Empty(contact.ContactGroups);
        Assert.Empty(contact.Tags);
    }

    [Fact]
    public void EmailAddress_Entity_CanBeCreated()
    {
        // Arrange & Act
        EmailAddress email = new()
        {
            Id = Guid.NewGuid(),
            ContactId = Guid.NewGuid(),
            Email = "test@example.com",
            Type = EmailType.Personal,
            IsPrimary = true
        };

        // Assert
        Assert.NotEqual(Guid.Empty, email.Id);
        Assert.NotEqual(Guid.Empty, email.ContactId);
        Assert.Equal("test@example.com", email.Email);
        Assert.Equal(EmailType.Personal, email.Type);
        Assert.True(email.IsPrimary);
    }

    [Fact]
    public void PhoneNumber_Entity_CanBeCreated()
    {
        // Arrange & Act
        PhoneNumber phone = new()
        {
            Id = Guid.NewGuid(),
            ContactId = Guid.NewGuid(),
            Number = "+1-555-123-4567",
            Type = PhoneType.Mobile,
            IsPrimary = true
        };

        // Assert
        Assert.NotEqual(Guid.Empty, phone.Id);
        Assert.NotEqual(Guid.Empty, phone.ContactId);
        Assert.Equal("+1-555-123-4567", phone.Number);
        Assert.Equal(PhoneType.Mobile, phone.Type);
        Assert.True(phone.IsPrimary);
    }

    [Fact]
    public void Address_Entity_CanBeCreated()
    {
        // Arrange & Act
        Address address = new()
        {
            Id = Guid.NewGuid(),
            ContactId = Guid.NewGuid(),
            StreetLine1 = "123 Main St",
            City = "Springfield",
            StateProvince = "IL",
            PostalCode = "62701",
            Country = "USA",
            Type = AddressType.Home,
            IsPrimary = true
        };

        // Assert
        Assert.NotEqual(Guid.Empty, address.Id);
        Assert.NotEqual(Guid.Empty, address.ContactId);
        Assert.Equal("123 Main St", address.StreetLine1);
        Assert.Equal("Springfield", address.City);
        Assert.Equal("IL", address.StateProvince);
        Assert.Equal("62701", address.PostalCode);
        Assert.Equal("USA", address.Country);
        Assert.Equal(AddressType.Home, address.Type);
        Assert.True(address.IsPrimary);
    }

    [Fact]
    public void Group_Entity_HasCorrectDefaults()
    {
        // Arrange & Act
        Group group = new();

        // Assert
        Assert.NotNull(group.Name);
        Assert.NotNull(group.ContactGroups);
        Assert.Empty(group.ContactGroups);
    }

    [Fact]
    public void Tag_Entity_HasCorrectDefaults()
    {
        // Arrange & Act
        Tag tag = new();

        // Assert
        Assert.NotNull(tag.Name);
        Assert.NotNull(tag.ContactTags);
        Assert.Empty(tag.ContactTags);
    }

    [Fact]
    public void ContactGroup_JoinEntity_CanBeCreated()
    {
        // Arrange
        Guid contactId = Guid.NewGuid();
        Guid groupId = Guid.NewGuid();
        DateTime addedAt = DateTime.UtcNow;

        // Act
        ContactGroup contactGroup = new()
        {
            ContactId = contactId,
            GroupId = groupId,
            AddedAt = addedAt
        };

        // Assert
        Assert.Equal(contactId, contactGroup.ContactId);
        Assert.Equal(groupId, contactGroup.GroupId);
        Assert.Equal(addedAt, contactGroup.AddedAt);
    }

    [Fact]
    public void ContactTag_JoinEntity_CanBeCreated()
    {
        // Arrange
        Guid contactId = Guid.NewGuid();
        Guid tagId = Guid.NewGuid();

        // Act
        ContactTag contactTag = new()
        {
            ContactId = contactId,
            TagId = tagId
        };

        // Assert
        Assert.Equal(contactId, contactTag.ContactId);
        Assert.Equal(tagId, contactTag.TagId);
    }

    [Theory]
    [InlineData("#FF0000", true)]
    [InlineData("#00FF00", true)]
    [InlineData("#0000FF", true)]
    [InlineData("#GGGGGG", false)]
    [InlineData("FF0000", false)]
    [InlineData("#FF00", false)]
    [InlineData(null, true)]
    [InlineData("", true)]
    public void Tag_ColorHex_ValidationPattern(string? colorHex, bool isValid)
    {
        // This tests the expected format for color hex values
        // Arrange & Act
        Tag tag = new() { Name = "Test", ColorHex = colorHex };

        // Assert
        if (isValid)
        {
            Assert.True(string.IsNullOrEmpty(tag.ColorHex) ||
                       (tag.ColorHex.Length == 7 && tag.ColorHex.StartsWith('#')));
        }
        else
        {
            Assert.False(tag.ColorHex?.Length == 7 &&
                        tag.ColorHex.StartsWith('#') &&
                        tag.ColorHex.Skip(1).All(c => "0123456789ABCDEFabcdef".Contains(c)));
        }
    }
}



===============================================================================
EXPORT COMPLETED: 10/22/2025 13:27:58
Total Files Exported: 82
Output File: D:\DEV\MyOpenTelemetryApi\my_project_export.txt
===============================================================================
