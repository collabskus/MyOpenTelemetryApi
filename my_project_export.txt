
===============================================================================
ASP.NET PROJECT EXPORT
Generated: 10/09/2025 07:20:55
Project Path: D:\DEV\MyOpenTelemetryApi
===============================================================================

DIRECTORY STRUCTURE:
===================

Folder PATH listing for volume DATA
Volume serial number is 128B-05C1
D:\DEV\MYOPENTELEMETRYAPI
|   .dockerignore
|   .editorconfig
|   .gitattributes
|   .gitignore
|   appsettings.Container.json
|   CONTAINER_SETUP.md
|   Directory.Build.props
|   Directory.Build.targets
|   Directory.Packages.props
|   docker-compose.yml
|   Dockerfile
|   Dockerfile.migrations
|   Export-Project.ps1
|   LICENSE.txt
|   MyOpenTelemetryApi.sln
|   my_project_export.txt
|   omnibus.ps1
|   podman-compose.yml
|   README.md
|   
+---.github
|   |   dependabot.yml
|   |   
|   \---workflows
|           ci.yml
|           codeql.yml
|           
+---docs
|       contact-manager-specification-sheet-backend.md
|       contact-manager-specification-sheet.md
|       firewall.png
|       llm.md
|       log-sample.txt
|       scratch.md
|       Windows PowerShell.txt
|       
+---src
|   +---MyOpenTelemetryApi.Api
|   |   |   appsettings.Development.json
|   |   |   appsettings.json
|   |   |   appsettings.Production.json
|   |   |   dependencies.json
|   |   |   MyOpenTelemetryApi.Api.csproj
|   |   |   MyOpenTelemetryApi.Api.http
|   |   |   Program.cs
|   |   |   
|   |   +---Authentication
|   |   |       ApiKeyAuthenticationHandler.cs
|   |   |       
|   |   +---Controllers
|   |   |       ContactsController.cs
|   |   |       GroupsController.cs
|   |   |       HealthController.cs
|   |   |       TagsController.cs
|   |   |       
|   |   +---Properties
|   |   |       launchSettings.json
|   |   |       
|   |   \---Telemetry
|   |           FileExporter.cs
|   |           TelemetryConstants.cs
|   |           TelemetryExtensions.cs
|   |           
|   +---MyOpenTelemetryApi.Application
|   |   |   MyOpenTelemetryApi.Application.csproj
|   |   |   
|   |   +---DTOs
|   |   |       AddressDto.cs
|   |   |       ContactDto.cs
|   |   |       ContactSummaryDto.cs
|   |   |       CreateContactDto.cs
|   |   |       EmailAddressDto.cs
|   |   |       GroupDto.cs
|   |   |       PaginatedResultDto.cs
|   |   |       PhoneNumberDto.cs
|   |   |       TagDto.cs
|   |   |       UpdateContactDto.cs
|   |   |       
|   |   \---Services
|   |           ContactService.cs
|   |           GroupService.cs
|   |           IContactService.cs
|   |           IGroupService.cs
|   |           ITagService.cs
|   |           TagService.cs
|   |           
|   +---MyOpenTelemetryApi.Domain
|   |   |   MyOpenTelemetryApi.Domain.csproj
|   |   |   
|   |   +---Entities
|   |   |       Address.cs
|   |   |       AddressType.cs
|   |   |       Contact.cs
|   |   |       ContactGroup.cs
|   |   |       ContactTag.cs
|   |   |       EmailAddress.cs
|   |   |       EmailType.cs
|   |   |       Group.cs
|   |   |       PhoneNumber.cs
|   |   |       PhoneType.cs
|   |   |       Tag.cs
|   |   |       
|   |   \---Interfaces
|   |           IContactRepository.cs
|   |           IGroupRepository.cs
|   |           IRepository.cs
|   |           ITagRepository.cs
|   |           IUnitOfWork.cs
|   |           
|   \---MyOpenTelemetryApi.Infrastructure
|       |   MyOpenTelemetryApi.Infrastructure.csproj
|       |   
|       +---Data
|       |   |   AppDbContext.cs
|       |   |   
|       |   +---Configurations
|       |   |       AddressConfiguration.cs
|       |   |       ContactConfiguration.cs
|       |   |       ContactGroupConfiguration.cs
|       |   |       ContactTagConfiguration.cs
|       |   |       EmailAddressConfiguration.cs
|       |   |       GroupConfiguration.cs
|       |   |       PhoneNumberConfiguration.cs
|       |   |       TagConfiguration.cs
|       |   |       
|       |   \---Migrations
|       |           20250804231722_InitialCreate.cs
|       |           20250804231722_InitialCreate.Designer.cs
|       |           20251003222820_AddContactPaginationIndexes.cs
|       |           20251003222820_AddContactPaginationIndexes.Designer.cs
|       |           AppDbContextModelSnapshot.cs
|       |           
|       \---Repositories
|               ContactRepository.cs
|               GroupRepository.cs
|               Repository.cs
|               TagRepository.cs
|               UnitOfWork.cs
|               
\---tests
    +---MyOpenTelemetryApi.Api.Tests
    |       MyOpenTelemetryApi.Api.Tests.csproj
    |       UnitTest1.cs
    |       
    +---MyOpenTelemetryApi.Application.Tests
    |       MyOpenTelemetryApi.Application.Tests.csproj
    |       UnitTest1.cs
    |       
    \---MyOpenTelemetryApi.Infrastructure.Tests
            MyOpenTelemetryApi.Infrastructure.Tests.csproj
            UnitTest1.cs
            


FILE CONTENTS:
==============

================================================================================
FILE: .github\dependabot.yml
SIZE: 0.63 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

# .github/dependabot.yml
version: 2
updates:
  - package-ecosystem: "nuget"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
    open-pull-requests-limit: 5
    groups:
      microsoft-packages:
        patterns:
          - "Microsoft.*"
          - "System.*"
      opentelemetry:
        patterns:
          - "OpenTelemetry*"
      test-packages:
        patterns:
          - "xunit*"
          - "coverlet*"
          - "*.Test.*"

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
    open-pull-requests-limit: 5




================================================================================
FILE: .github\workflows\ci.yml
SIZE: 5.06 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '10.0.x'
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger "console;verbosity=detailed" --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.13
      with:
        reports: coverage/**/coverage.cobertura.xml
        targetdir: coverage-report
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
        verbosity: 'Info'

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Add coverage PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        path: coverage-report/SummaryGithub.md

    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run EF Core migrations check
      run: |
        dotnet tool install --global dotnet-ef
        dotnet ef migrations has-pending-model-changes --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Test database migrations
      run: |
        dotnet ef database update --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Run integration tests (if any)
      run: |
        echo "No integration tests yet - placeholder for future tests"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        name: build-artifacts
        path: |
          src/MyOpenTelemetryApi.Api/bin/Release/net10.0/
          !src/MyOpenTelemetryApi.Api/bin/Release/net10.0/*.pdb
        retention-days: 7

  code-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install .NET tools
      run: |
        dotnet tool install --global dotnet-outdated-tool
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Check for outdated packages
      run: dotnet outdated --fail-on-updates
      continue-on-error: true

    - name: Security scan
      run: |
        dotnet list package --vulnerable --include-transitive

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    # REMOVED: "Create Dockerfile" step - use the real Dockerfile from repo instead

    - name: Build Docker image
      run: docker build -t myopentelemetryapi:${{ github.sha }} .

    - name: Run Docker container test
      run: |
        echo "Skipping container health check - requires database setup"
        # Will implement proper container testing later

    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save myopentelemetryapi:${{ github.sha }} | gzip > myopentelemetryapi.tar.gz

    - name: Upload Docker image
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: myopentelemetryapi.tar.gz
        retention-days: 7



================================================================================
FILE: .github\workflows\codeql.yml
SIZE: 0.92 KB
MODIFIED: 09/17/2025 13:05:07
================================================================================

# .github/workflows/codeql.yml
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 5 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '10.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3


================================================================================
FILE: appsettings.Container.json
SIZE: 1.12 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Information",
      "Microsoft.EntityFrameworkCore": "Information",
      "Microsoft.EntityFrameworkCore.Database.Command": "Information",
      "MyOpenTelemetryApi": "Debug",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Host=db;Port=5432;Database=myoteldb;Username=myoteluser;Password=myotelpass123;Include Error Detail=true;"
  },
  "OpenTelemetry": {
    "ServiceName": "MyOpenTelemetryApi-Container",
    "ServiceVersion": "1.0.0-container",
    "Exporter": {
      "Console": {
        "Enabled": true
      },
      "OTLP": {
        "Enabled": false,
        "Endpoint": "http://jaeger:4317",
        "Protocol": "Grpc"
      },
      "File": {
        "Enabled": true,
        "LogPath": "/app/logs/otel-logs.json",
        "TracePath": "/app/logs/otel-traces.json",
        "MetricsPath": "/app/logs/otel-metrics.json"
      }
    },
    "Sampling": {
      "AlwaysOn": true,
      "Ratio": 1.0
    }
  },
  "AllowedHosts": "*"
}


================================================================================
FILE: CONTAINER_SETUP.md
SIZE: 7.42 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

# ðŸ³ MyOpenTelemetryApi - Podman Setup

This guide will help you run the MyOpenTelemetryApi application using Podman with PostgreSQL.

## ðŸ“‹ Prerequisites

- [Podman](https://podman.io/getting-started/installation) installed
- [podman-compose](https://github.com/containers/podman-compose) (optional, but recommended)
- `curl` and `jq` (for testing, optional)

### Installing Prerequisites

#### Ubuntu/Debian:
```bash
sudo apt update
sudo apt install -y podman curl jq
pip3 install podman-compose
```

#### RHEL/Fedora/CentOS:
```bash
sudo dnf install -y podman curl jq python3-pip
pip3 install podman-compose
```

#### macOS:
```bash
brew install podman curl jq
pip3 install podman-compose
```

## ðŸš€ Quick Start

### Option 1: Using the Setup Script (Recommended)

1. **Make the setup script executable:**
   ```bash
   chmod +x setup-podman.sh
   ```

2. **Run the setup script:**
   ```bash
   ./setup-podman.sh
   ```

3. **To see logs during startup:**
   ```bash
   ./setup-podman.sh --logs
   ```

### Option 2: Manual Setup

1. **Create necessary directories:**
   ```bash
   mkdir -p logs init-db
   ```

2. **Build and start services:**
   ```bash
   # Using podman-compose
   podman-compose up --build -d
   
   # OR using podman compose
   podman compose up --build -d
   ```

3. **Check service status:**
   ```bash
   podman ps
   ```

## ðŸ”§ Configuration

The application runs with the following default configuration:

| Service | Port | Credentials |
|---------|------|-------------|
| API | 5174 | N/A |
| PostgreSQL | 5432 | User: `myoteluser`<br>Password: `myotelpass123`<br>Database: `myoteldb` |

### Environment Variables

Key environment variables configured in the container:

- `ASPNETCORE_ENVIRONMENT=Development`
- `ConnectionStrings__DefaultConnection` - PostgreSQL connection string
- `OpenTelemetry__ServiceName=MyOpenTelemetryApi-Podman`
- `OpenTelemetry__Exporter__Console__Enabled=true`
- `OpenTelemetry__Exporter__File__Enabled=true`

## ðŸ§ª Testing the Application

### Health Checks
```bash
# Basic health check
curl http://localhost:5174/api/health | jq

# Readiness check
curl http://localhost:5174/api/health/ready | jq

# Get all contacts (should return empty array initially)
curl http://localhost:5174/api/contacts | jq
```

### Creating Test Data
```bash
# Create a test contact
curl -X POST http://localhost:5174/api/contacts \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "John",
    "lastName": "Doe",
    "company": "Tech Corp",
    "emailAddresses": [{
      "email": "john.doe@example.com",
      "type": "Work",
      "isPrimary": true
    }],
    "phoneNumbers": [{
      "number": "+1-555-123-4567",
      "type": "Mobile",
      "isPrimary": true
    }]
  }' | jq

# Get all contacts to see the created contact
curl http://localhost:5174/api/contacts | jq
```

### Creating Test Groups and Tags
```bash
# Create a group
curl -X POST http://localhost:5174/api/groups \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Work Colleagues",
    "description": "People from work"
  }' | jq

# Create a tag
curl -X POST http://localhost:5174/api/tags \
  -H "Content-Type: application/json" \
  -d '{
    "name": "VIP",
    "colorHex": "#FF0000"
  }' | jq

# Get all groups
curl http://localhost:5174/api/groups | jq

# Get all tags
curl http://localhost:5174/api/tags | jq
```

## ðŸ“Š Monitoring and Logs

### Application Logs
```bash
# View application logs
podman-compose logs -f api

# View PostgreSQL logs
podman-compose logs -f db

# View all logs
podman-compose logs -f
```

### OpenTelemetry File Logs
The application writes OpenTelemetry logs to `./logs/otel-logs.json`:
```bash
# View structured logs
tail -f logs/otel-logs.json | jq

# Monitor logs in real-time with formatting
tail -f logs/otel-logs.json | while read line; do echo "$line" | jq -C; done
```

### Container Management
```bash
# View running containers
podman ps

# Stop all services
podman-compose down

# Restart just the API
podman-compose restart api

# Rebuild and restart
podman-compose up --build -d

# Shell into API container
podman exec -it myotel-api /bin/bash

# Shell into PostgreSQL container
podman exec -it myotel-postgres psql -U myoteluser -d myoteldb
```

## ðŸ—„ï¸ Database Management

### Connect to PostgreSQL
```bash
# Using podman exec
podman exec -it myotel-postgres psql -U myoteluser -d myoteldb

# Using external psql client (if installed)
psql -h localhost -p 5432 -U myoteluser -d myoteldb
```

### Common SQL Queries
```sql
-- List all tables
\dt

-- View contacts
SELECT * FROM "Contacts";

-- View groups
SELECT * FROM "Groups";

-- View tags
SELECT * FROM "Tags";

-- View contact-group relationships
SELECT c."FirstName", c."LastName", g."Name" as "GroupName"
FROM "Contacts" c
JOIN "ContactGroups" cg ON c."Id" = cg."ContactId"
JOIN "Groups" g ON cg."GroupId" = g."Id";
```

## ðŸ”„ Development Workflow

### Rebuilding After Code Changes
```bash
# Stop services
podman-compose down

# Rebuild and start
podman-compose up --build -d

# Or use the script
./setup-podman.sh --no-test
```

### Resetting Database
```bash
# Stop services
podman-compose down

# Remove database volume
podman volume rm myopentelemetryapi_postgres_data

# Start services (will recreate database)
podman-compose up -d
```

### Cleanup Everything
```bash
# Stop and remove containers
podman-compose down

# Remove volumes
podman volume prune

# Remove images
podman image prune -a

# Or use the cleanup function in the script
./setup-podman.sh
```

## ðŸ”§ Troubleshooting

### Common Issues

1. **Port already in use:**
   ```bash
   # Check what's using the port
   netstat -tulpn | grep :5174
   
   # Stop the conflicting service or change ports in docker-compose.yml
   ```

2. **Database connection failed:**
   ```bash
   # Check if PostgreSQL is running
   podman exec myotel-postgres pg_isready -U myoteluser -d myoteldb
   
   # Check database logs
   podman logs myotel-postgres
   ```

3. **API not starting:**
   ```bash
   # Check API logs
   podman logs myotel-api
   
   # Check if API container is running
   podman ps -a
   ```

4. **Permission issues (SELinux):**
   ```bash
   # If you're on a system with SELinux, add :Z to volume mounts
   # This is already done in podman-compose.yml
   ```

### Performance Issues
```bash
# Check resource usage
podman stats

# View container resource limits
podman inspect myotel-api | jq '.[0].HostConfig'
```

## ðŸŽ¯ Next Steps

- **Add Observability Stack:** Uncomment Jaeger, Prometheus, and Grafana services in `podman-compose.yml`
- **Configure OTLP Export:** Set up OpenTelemetry Protocol export to external systems
- **Add SSL/TLS:** Configure HTTPS for production-like setup
- **Persistent Data:** Configure persistent volumes for production use
- **Load Testing:** Use tools like `hey` or `wrk` to test API performance
- **Custom Metrics:** Add custom application metrics to monitor business logic

## ðŸ“š Useful Resources

- [Podman Documentation](https://docs.podman.io/)
- [OpenTelemetry Documentation](https://opentelemetry.io/docs/)
- [ASP.NET Core Docker](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/)
- [PostgreSQL Docker](https://hub.docker.com/_/postgres)

---

**Happy Coding! ðŸŽ‰**


================================================================================
FILE: docker-compose.yml
SIZE: 1.33 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: myopentelemetryapi-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-contactmanager}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myopentelemetryapi-api
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: "http://+:8080;http://+:8081"
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${POSTGRES_DB:-contactmanager};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}"
      ApiKey: ${API_KEY:-your-secret-api-key-change-in-production}
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./appsettings.Container.json:/app/appsettings.Production.json:ro
    restart: unless-stopped

volumes:
  postgres_data:



================================================================================
FILE: docs\contact-manager-specification-sheet.md
SIZE: 47 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

I'll review and enhance this Angular Contact Manager Application specification to make it more comprehensive, modern, and aligned with Angular 20+ best practices.I've significantly enhanced the Angular Contact Manager Application specifications with the following improvements:

## Key Enhancements:

### 1. **Technical Architecture**
- Added proper Angular 20+ features including the experimental zoneless change detection
- Included resource() API for better data fetching
- Added Vite build system for optimal performance
- Included SSR, PWA, and i18n support

### 2. **Enhanced Data Models**
- Added social profiles, custom fields, and activity tracking
- Included audit fields (createdAt, updatedBy, etc.)
- Added bulk operations support
- Implemented import/export functionality with proper error handling

### 3. **Advanced Features**
- **Real-time Updates**: WebSocket integration for live synchronization
- **Virtual Scrolling**: CDK virtual scrolling for performance
- **Deferred Loading**: Using @defer blocks for optimization
- **Advanced Search**: Complex filtering and duplicate detection
- **Activity Tracking**: Track all interactions with contacts

### 4. **Improved Component Architecture**
- Comprehensive example of ContactListComponent with modern Angular patterns
- Proper use of signals, computed values, and effects
- Container queries for responsive design
- Skeleton loading states and error handling

### 5. **Performance Optimizations**
- Detailed build optimization strategies
- Runtime performance improvements
- Lazy loading and code splitting
- Image optimization and compression strategies

### 6. **Security & Compliance**
- Input validation and XSS prevention
- CSRF protection and CSP headers
- PII handling and audit logging
- Rate limiting strategies

### 7. **Testing Strategy**
- Unit testing examples with signals
- E2E testing with Cypress
- Coverage requirements (>80%)

### 8. **Accessibility (WCAG 2.1 AA)**
- Comprehensive accessibility requirements
- ARIA labels and landmarks
- Keyboard navigation support
- Screen reader compatibility

### 9. **Internationalization**
- Multi-language support including RTL
- Translation service with signals
- Locale-specific formatting

### 10. **Deployment & DevOps**
- Docker multi-stage builds
- CI/CD pipeline configuration
- Health monitoring and analytics
- Comprehensive monitoring strategy

### 11. **Developer Experience**
- Clear project structure
- Detailed implementation checklist
- Development commands
- Support documentation

### 12. **Future Roadmap**
- Phase 2: AI features, calendar integration, mobile apps
- Phase 3: CRM integration, ML-powered recommendations, AR features

The enhanced specification is now production-ready and follows all the latest Angular best practices. It provides a complete blueprint for building a modern, scalable, and maintainable contact management application that showcases the full power of Angular 20+.


























# Angular Contact Manager Application Specifications v2.0

## Executive Summary
A modern, zoneless Angular 20+ contact management application showcasing cutting-edge Angular features including signals, resource API, and standalone components. The application provides comprehensive contact management capabilities with real-time updates, advanced filtering, and optimal performance.

## Technical Architecture

### Core Angular Configuration
- **Angular Version**: 20+ (latest stable)
- **Change Detection**: Zoneless with `provideExperimentalZonelessChangeDetection()`
- **Component Architecture**: 100% standalone components, no NgModules
- **State Management**: Signal-based reactive state with computed signals
- **HTTP Layer**: HttpClient with resource() API and signal-based interceptors
- **Routing**: Signal-based router with input bindings and withComponentInputBinding()
- **Forms**: Template-driven forms with signal-based two-way binding using model()
- **Build System**: Vite-based with esbuild for optimal build performance

### Advanced Features
- **Server-Side Rendering (SSR)**: Optional Angular Universal support
- **Progressive Web App (PWA)**: Offline-first architecture with service workers
- **Internationalization (i18n)**: Multi-language support with @angular/localize
- **Real-time Updates**: WebSocket integration for live contact updates
- **Virtual Scrolling**: CDK virtual scrolling for large datasets
- **Deferred Loading**: Using @defer blocks for performance optimization

## Enhanced Project Structure

```
src/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ core/
â”‚   â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”‚   â”œâ”€â”€ api.service.ts              # Base HTTP service with interceptors
â”‚   â”‚   â”‚   â”œâ”€â”€ contact.service.ts          # Contact-specific operations
â”‚   â”‚   â”‚   â”œâ”€â”€ group.service.ts            # Group management
â”‚   â”‚   â”‚   â”œâ”€â”€ tag.service.ts              # Tag management
â”‚   â”‚   â”‚   â”œâ”€â”€ health.service.ts           # Health monitoring
â”‚   â”‚   â”‚   â”œâ”€â”€ websocket.service.ts        # Real-time updates
â”‚   â”‚   â”‚   â””â”€â”€ storage.service.ts          # Local storage management
â”‚   â”‚   â”œâ”€â”€ interceptors/
â”‚   â”‚   â”‚   â”œâ”€â”€ error.interceptor.ts        # Global error handling
â”‚   â”‚   â”‚   â”œâ”€â”€ retry.interceptor.ts        # Automatic retry logic
â”‚   â”‚   â”‚   â””â”€â”€ cache.interceptor.ts        # HTTP caching
â”‚   â”‚   â”œâ”€â”€ guards/
â”‚   â”‚   â”‚   â””â”€â”€ unsaved-changes.guard.ts    # Prevent navigation with unsaved changes
â”‚   â”‚   â””â”€â”€ utils/
â”‚   â”‚       â”œâ”€â”€ validators.ts               # Custom validators
â”‚   â”‚       â”œâ”€â”€ debounce.ts                 # Debounce utility
â”‚   â”‚       â””â”€â”€ export.utils.ts             # CSV/PDF export utilities
â”‚   â”œâ”€â”€ features/
â”‚   â”‚   â”œâ”€â”€ contacts/
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-list.component.ts   # List with virtual scrolling
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-detail.component.ts # Detail view with edit mode
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-form.component.ts   # Create/Edit form
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-card.component.ts   # Card view component
â”‚   â”‚   â”‚   â””â”€â”€ contact-search.component.ts # Advanced search
â”‚   â”‚   â”œâ”€â”€ groups/
â”‚   â”‚   â”‚   â”œâ”€â”€ group-list.component.ts
â”‚   â”‚   â”‚   â””â”€â”€ group-form.component.ts
â”‚   â”‚   â”œâ”€â”€ tags/
â”‚   â”‚   â”‚   â”œâ”€â”€ tag-list.component.ts
â”‚   â”‚   â”‚   â””â”€â”€ tag-form.component.ts
â”‚   â”‚   â””â”€â”€ dashboard/
â”‚   â”‚       â”œâ”€â”€ dashboard.component.ts      # Overview dashboard
â”‚   â”‚       â””â”€â”€ health-monitor.component.ts # API health monitoring
â”‚   â”œâ”€â”€ shared/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”‚   â”œâ”€â”€ confirm-dialog.component.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ loading-spinner.component.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ pagination.component.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ search-input.component.ts
â”‚   â”‚   â”‚   â””â”€â”€ toast.component.ts
â”‚   â”‚   â”œâ”€â”€ directives/
â”‚   â”‚   â”‚   â”œâ”€â”€ auto-focus.directive.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ infinite-scroll.directive.ts
â”‚   â”‚   â”‚   â””â”€â”€ tooltip.directive.ts
â”‚   â”‚   â””â”€â”€ pipes/
â”‚   â”‚       â”œâ”€â”€ phone-format.pipe.ts
â”‚   â”‚       â”œâ”€â”€ initials.pipe.ts
â”‚   â”‚       â””â”€â”€ highlight.pipe.ts
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â”œâ”€â”€ contact.model.ts
â”‚   â”‚   â”œâ”€â”€ group.model.ts
â”‚   â”‚   â”œâ”€â”€ tag.model.ts
â”‚   â”‚   â””â”€â”€ common.model.ts
â”‚   â”œâ”€â”€ app.component.ts
â”‚   â”œâ”€â”€ app.routes.ts
â”‚   â””â”€â”€ app.config.ts
â”œâ”€â”€ assets/
â”‚   â”œâ”€â”€ icons/
â”‚   â”œâ”€â”€ images/
â”‚   â””â”€â”€ i18n/
â”œâ”€â”€ environments/
â”‚   â”œâ”€â”€ environment.ts
â”‚   â”œâ”€â”€ environment.prod.ts
â”‚   â””â”€â”€ environment.staging.ts
â”œâ”€â”€ styles/
â”‚   â”œâ”€â”€ _variables.scss
â”‚   â”œâ”€â”€ _mixins.scss
â”‚   â”œâ”€â”€ _themes.scss
â”‚   â””â”€â”€ styles.scss
â”œâ”€â”€ index.html
â”œâ”€â”€ main.ts
â””â”€â”€ main.server.ts  # SSR entry point
```

## Enhanced Data Models

```typescript
// Enhanced Contact Model with additional fields
interface ContactDto {
  id: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  nickname?: string;
  prefix?: string;  // Mr., Ms., Dr., etc.
  suffix?: string;  // Jr., III, PhD, etc.
  company?: string;
  department?: string;  // New field
  jobTitle?: string;
  dateOfBirth?: string;
  anniversary?: string;  // New field
  notes?: string;
  emailAddresses: EmailAddress[];
  phoneNumbers: PhoneNumber[];
  addresses: Address[];
  socialProfiles: SocialProfile[];  // New field
  customFields: CustomField[];  // New field
  groups: Group[];
  tags: Tag[];
  avatar?: string;  // Base64 or URL
  favorite: boolean;  // New field
  lastContactedAt?: string;  // New field
  createdAt: string;
  updatedAt: string;
  createdBy?: string;
  updatedBy?: string;
}

// New interfaces for enhanced functionality
interface SocialProfile {
  id: string;
  platform: 'linkedin' | 'twitter' | 'facebook' | 'instagram' | 'github' | 'other';
  url: string;
  username?: string;
}

interface CustomField {
  id: string;
  fieldName: string;
  fieldValue: string;
  fieldType: 'text' | 'number' | 'date' | 'boolean' | 'url';
}

interface ContactActivity {
  id: string;
  contactId: string;
  activityType: 'email' | 'call' | 'meeting' | 'note' | 'task';
  subject: string;
  description?: string;
  activityDate: string;
  completed: boolean;
}

interface BulkOperation<T> {
  operation: 'create' | 'update' | 'delete';
  items: T[];
  options?: BulkOperationOptions;
}

interface BulkOperationOptions {
  skipValidation?: boolean;
  continueOnError?: boolean;
  transactional?: boolean;
}

interface ImportResult {
  success: number;
  failed: number;
  errors: ImportError[];
}

interface ImportError {
  row: number;
  field: string;
  value: any;
  error: string;
}

interface ExportOptions {
  format: 'csv' | 'excel' | 'json' | 'vcard';
  fields?: string[];
  includeGroups?: boolean;
  includeTags?: boolean;
  dateFormat?: string;
}
```

## Enhanced API Endpoints

### Contact Operations
```typescript
// Basic CRUD
GET    /api/contacts?page=1&size=20&sort=lastName,asc&filter=...
GET    /api/contacts/{id}
POST   /api/contacts
PUT    /api/contacts/{id}
PATCH  /api/contacts/{id}  // Partial update
DELETE /api/contacts/{id}

// Bulk Operations
POST   /api/contacts/bulk
PUT    /api/contacts/bulk
DELETE /api/contacts/bulk

// Search & Filter
GET    /api/contacts/search?q={query}&fields=firstName,lastName,company
GET    /api/contacts/advanced-search  // POST body with complex filters
GET    /api/contacts/duplicates  // Find potential duplicates
GET    /api/contacts/birthdays?month={month}
GET    /api/contacts/recently-contacted?days=30

// Import/Export
POST   /api/contacts/import  // Multipart file upload
GET    /api/contacts/export?format=csv&ids=1,2,3
GET    /api/contacts/export-template  // Download import template

// Activities
GET    /api/contacts/{id}/activities
POST   /api/contacts/{id}/activities
PUT    /api/contacts/{id}/activities/{activityId}
DELETE /api/contacts/{id}/activities/{activityId}

// Relationships
GET    /api/contacts/{id}/relationships
POST   /api/contacts/{id}/relationships
DELETE /api/contacts/{id}/relationships/{relationshipId}
```

### WebSocket Events
```typescript
// Real-time updates via WebSocket
ws://api/contacts/live

// Event types
interface ContactEvent {
  type: 'created' | 'updated' | 'deleted';
  payload: ContactDto | { id: string };
  timestamp: string;
  userId?: string;
}
```

## Signal-Based State Management (Enhanced)

```typescript
// Application state using Angular signals
export class AppStateService {
  // Core state
  private readonly _contacts = signal<ContactDto[]>([]);
  private readonly _selectedContact = signal<ContactDto | null>(null);
  private readonly _groups = signal<Group[]>([]);
  private readonly _tags = signal<Tag[]>([]);
  
  // UI state
  private readonly _loading = signal<boolean>(false);
  private readonly _error = signal<Error | null>(null);
  private readonly _viewMode = signal<'list' | 'grid' | 'card'>('list');
  private readonly _theme = signal<'light' | 'dark' | 'auto'>('auto');
  
  // Filter state
  private readonly _searchQuery = signal<string>('');
  private readonly _activeFilters = signal<FilterCriteria>({});
  private readonly _sortBy = signal<SortCriteria>({ field: 'lastName', direction: 'asc' });
  
  // Pagination state
  private readonly _currentPage = signal<number>(1);
  private readonly _pageSize = signal<number>(20);
  private readonly _totalItems = signal<number>(0);
  
  // Computed signals
  readonly filteredContacts = computed(() => {
    const contacts = this._contacts();
    const query = this._searchQuery().toLowerCase();
    const filters = this._activeFilters();
    
    return contacts.filter(contact => {
      // Search logic
      if (query && !this.matchesSearch(contact, query)) return false;
      // Filter logic
      if (!this.matchesFilters(contact, filters)) return false;
      return true;
    });
  });
  
  readonly paginatedContacts = computed(() => {
    const filtered = this.filteredContacts();
    const page = this._currentPage();
    const size = this._pageSize();
    const start = (page - 1) * size;
    return filtered.slice(start, start + size);
  });
  
  readonly totalPages = computed(() => 
    Math.ceil(this.filteredContacts().length / this._pageSize())
  );
  
  readonly statistics = computed(() => ({
    total: this._contacts().length,
    favorites: this._contacts().filter(c => c.favorite).length,
    withEmails: this._contacts().filter(c => c.emailAddresses.length > 0).length,
    byGroup: this.groupStatistics(),
    byTag: this.tagStatistics()
  }));
  
  // Effects
  constructor() {
    // Auto-save to localStorage
    effect(() => {
      const state = {
        viewMode: this._viewMode(),
        theme: this._theme(),
        pageSize: this._pageSize(),
        sortBy: this._sortBy()
      };
      localStorage.setItem('app-preferences', JSON.stringify(state));
    });
    
    // WebSocket sync
    effect(() => {
      if (this._contacts().length > 0) {
        this.subscribeToWebSocket();
      }
    });
  }
}
```

## Component Examples (Enhanced)

### Contact List Component with Advanced Features
```typescript
@Component({
  selector: 'app-contact-list',
  standalone: true,
  imports: [CommonModule, FormsModule, CdkVirtualScrollingModule],
  template: `
    <div class="contact-list-container">
      <!-- Toolbar -->
      <div class="toolbar">
        <app-search-input 
          [(query)]="searchQuery"
          [debounceTime]="300"
          placeholder="Search contacts...">
        </app-search-input>
        
        <div class="view-toggles">
          <button (click)="viewMode.set('list')" 
                  [class.active]="viewMode() === 'list'">
            <icon name="list" />
          </button>
          <button (click)="viewMode.set('grid')" 
                  [class.active]="viewMode() === 'grid'">
            <icon name="grid" />
          </button>
          <button (click)="viewMode.set('card')" 
                  [class.active]="viewMode() === 'card'">
            <icon name="card" />
          </button>
        </div>
        
        <button class="btn-primary" (click)="createContact()">
          <icon name="plus" /> Add Contact
        </button>
      </div>
      
      <!-- Filters -->
      <div class="filters" *ngIf="showFilters()">
        <app-filter-chips 
          [filters]="activeFilters()"
          (remove)="removeFilter($event)">
        </app-filter-chips>
      </div>
      
      <!-- Virtual Scrolling List -->
      <cdk-virtual-scroll-viewport 
        itemSize="72" 
        class="contact-viewport"
        (scrolledIndexChange)="onScroll($event)">
        
        @defer (on viewport) {
          <div *cdkVirtualFor="let contact of contacts(); trackBy: trackById"
               class="contact-item"
               [class.selected]="isSelected(contact)"
               (click)="selectContact(contact)">
            
            <app-contact-avatar [contact]="contact" />
            
            <div class="contact-info">
              <h3>{{ contact.firstName }} {{ contact.lastName }}</h3>
              <p class="company">{{ contact.company }}</p>
              <p class="email">{{ contact.primaryEmail }}</p>
            </div>
            
            <div class="contact-actions">
              @if (contact.favorite) {
                <icon name="star" class="favorite" />
              }
              <button (click)="editContact(contact, $event)">
                <icon name="edit" />
              </button>
              <button (click)="deleteContact(contact, $event)">
                <icon name="delete" />
              </button>
            </div>
          </div>
        } @placeholder {
          <div class="loading-skeleton">
            @for (item of skeletonItems; track item) {
              <div class="skeleton-item"></div>
            }
          </div>
        } @error {
          <div class="error-message">
            Failed to load contacts. 
            <button (click)="retry()">Retry</button>
          </div>
        }
      </cdk-virtual-scroll-viewport>
      
      <!-- Pagination -->
      <app-pagination 
        [currentPage]="currentPage()"
        [totalPages]="totalPages()"
        [pageSize]="pageSize()"
        (pageChange)="onPageChange($event)"
        (pageSizeChange)="onPageSizeChange($event)">
      </app-pagination>
    </div>
  `,
  styles: [`
    :host {
      display: block;
      height: 100%;
      container-type: inline-size;
    }
    
    .contact-list-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      gap: 1rem;
    }
    
    .toolbar {
      display: flex;
      gap: 1rem;
      padding: 1rem;
      background: var(--surface-color);
      border-radius: 0.5rem;
      flex-wrap: wrap;
      
      @container (max-width: 640px) {
        flex-direction: column;
      }
    }
    
    .view-toggles {
      display: flex;
      gap: 0.25rem;
      
      button {
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        background: transparent;
        cursor: pointer;
        transition: all 0.2s;
        
        &.active {
          background: var(--primary-color);
          color: white;
        }
        
        &:hover:not(.active) {
          background: var(--hover-color);
        }
      }
    }
    
    .contact-viewport {
      flex: 1;
      background: var(--surface-color);
      border-radius: 0.5rem;
      overflow-y: auto;
    }
    
    .contact-item {
      display: flex;
      align-items: center;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      cursor: pointer;
      transition: background 0.2s;
      
      &:hover {
        background: var(--hover-color);
      }
      
      &.selected {
        background: var(--selected-color);
      }
    }
    
    .contact-info {
      flex: 1;
      margin: 0 1rem;
      
      h3 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 500;
      }
      
      p {
        margin: 0.25rem 0;
        color: var(--text-secondary);
        font-size: 0.9rem;
      }
    }
    
    .contact-actions {
      display: flex;
      gap: 0.5rem;
      
      button {
        padding: 0.5rem;
        border: none;
        background: transparent;
        cursor: pointer;
        color: var(--text-secondary);
        transition: color 0.2s;
        
        &:hover {
          color: var(--primary-color);
        }
      }
      
      .favorite {
        color: var(--warning-color);
      }
    }
    
    .loading-skeleton {
      padding: 1rem;
    }
    
    .skeleton-item {
      height: 72px;
      background: linear-gradient(90deg, 
        var(--skeleton-base) 25%, 
        var(--skeleton-highlight) 50%, 
        var(--skeleton-base) 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
      margin-bottom: 0.5rem;
      border-radius: 0.5rem;
    }
    
    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    
    .error-message {
      padding: 2rem;
      text-align: center;
      color: var(--error-color);
    }
  `]
})
export class ContactListComponent {
  private contactService = inject(ContactService);
  private router = inject(Router);
  private dialog = inject(DialogService);
  private toastService = inject(ToastService);
  
  // Signals
  contacts = this.contactService.contacts;
  searchQuery = signal('');
  viewMode = signal<'list' | 'grid' | 'card'>('list');
  showFilters = signal(false);
  activeFilters = signal<FilterCriteria>({});
  currentPage = signal(1);
  pageSize = signal(20);
  totalPages = computed(() => 
    Math.ceil(this.contacts().length / this.pageSize())
  );
  
  // Skeleton items for loading state
  skeletonItems = Array(10).fill(0);
  
  // Lifecycle
  constructor() {
    // Load contacts on init
    effect(() => {
      this.loadContacts();
    }, { allowSignalWrites: true });
    
    // Search effect with debounce
    effect(() => {
      const query = this.searchQuery();
      if (query.length > 2) {
        this.searchContacts(query);
      }
    });
  }
  
  // Methods
  async loadContacts() {
    try {
      await this.contactService.loadContacts({
        page: this.currentPage(),
        size: this.pageSize()
      });
    } catch (error) {
      this.toastService.error('Failed to load contacts');
    }
  }
  
  selectContact(contact: ContactDto) {
    this.router.navigate(['/contacts', contact.id]);
  }
  
  createContact() {
    this.router.navigate(['/contacts/new']);
  }
  
  editContact(contact: ContactDto, event: Event) {
    event.stopPropagation();
    this.router.navigate(['/contacts', contact.id, 'edit']);
  }
  
  async deleteContact(contact: ContactDto, event: Event) {
    event.stopPropagation();
    
    const confirmed = await this.dialog.confirm({
      title: 'Delete Contact',
      message: `Are you sure you want to delete ${contact.firstName} ${contact.lastName}?`,
      confirmText: 'Delete',
      confirmColor: 'danger'
    });
    
    if (confirmed) {
      try {
        await this.contactService.deleteContact(contact.id);
        this.toastService.success('Contact deleted successfully');
      } catch (error) {
        this.toastService.error('Failed to delete contact');
      }
    }
  }
  
  trackById(index: number, contact: ContactDto): string {
    return contact.id;
  }
  
  onScroll(index: number) {
    // Infinite scroll logic
    const total = this.contacts().length;
    if (index > total - 5) {
      this.loadMoreContacts();
    }
  }
  
  // Additional methods...
}
```

## Performance Optimizations

### Build Optimizations
```json
{
  "optimization": {
    "scripts": true,
    "styles": {
      "minify": true,
      "inlineCritical": true,
      "removeUnusedCss": true
    },
    "fonts": {
      "inline": true
    }
  },
  "budgets": [
    {
      "type": "initial",
      "maximumWarning": "500kb",
      "maximumError": "1mb"
    },
    {
      "type": "anyComponentStyle",
      "maximumWarning": "6kb",
      "maximumError": "10kb"
    }
  ]
}
```

### Runtime Optimizations
- **Code Splitting**: Lazy load feature modules
- **Tree Shaking**: Remove unused code
- **Preloading Strategy**: Preload modules based on user behavior
- **Image Optimization**: Lazy load images, use WebP format
- **Font Loading**: Use font-display: swap
- **HTTP/2 Push**: Push critical resources
- **Compression**: Brotli compression for assets

## Testing Strategy

### Unit Testing
```typescript
describe('ContactListComponent', () => {
  let component: ContactListComponent;
  let contactService: jasmine.SpyObj<ContactService>;
  
  beforeEach(() => {
    const spy = jasmine.createSpyObj('ContactService', ['loadContacts']);
    
    TestBed.configureTestingModule({
      providers: [
        { provide: ContactService, useValue: spy }
      ]
    });
    
    component = TestBed.createComponent(ContactListComponent).componentInstance;
    contactService = TestBed.inject(ContactService) as jasmine.SpyObj<ContactService>;
  });
  
  it('should load contacts on init', () => {
    const mockContacts = [/* ... */];
    contactService.loadContacts.and.returnValue(Promise.resolve(mockContacts));
    
    component.ngOnInit();
    
    expect(contactService.loadContacts).toHaveBeenCalled();
    expect(component.contacts()).toEqual(mockContacts);
  });
  
  // More tests...
});
```

### E2E Testing
```typescript
describe('Contact Management', () => {
  it('should create a new contact', () => {
    cy.visit('/contacts');
    cy.get('[data-test="add-contact"]').click();
    cy.url().should('include', '/contacts/new');
    
    cy.get('[data-test="first-name"]').type('John');
    cy.get('[data-test="last-name"]').type('Doe');
    cy.get('[data-test="email"]').type('john@example.com');
    cy.get('[data-test="save"]').click();
    
    cy.url().should('match', /\/contacts\/[\w-]+$/);
    cy.contains('John Doe').should('be.visible');
  });
});
```

## Security Considerations

### Input Validation
- **XSS Prevention**: Sanitize all user inputs
- **SQL Injection**: Use parameterized queries
- **CSRF Protection**: Include CSRF tokens
- **Content Security Policy**: Implement strict CSP headers

### Data Protection
- **Encryption**: Encrypt sensitive data at rest and in transit
- **PII Handling**: Mask sensitive information in logs
- **Audit Logging**: Log all data access and modifications
- **Rate Limiting**: Implement rate limiting on API endpoints

## Deployment Configuration

### Docker Configuration
```dockerfile
# Multi-stage build
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build:prod

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

### CI/CD Pipeline
```yaml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run test:ci
      - run: npm run build:prod
      - run: npm run deploy
```

## Monitoring & Analytics

### Application Monitoring
- **Error Tracking**: Sentry integration for error monitoring
- **Performance Monitoring**: Web Vitals tracking
- **User Analytics**: Google Analytics or Mixpanel
- **Custom Metrics**: Track feature usage and user behavior

### Health Checks
```typescript
interface HealthCheck {
  service: string;
  status: 'healthy' | 'degraded' | 'unhealthy';
  responseTime: number;
  lastChecked: Date;
  details?: any;
}

// Automated health checks every 30 seconds
const healthChecks: HealthCheck[] = [
  { service: 'api', endpoint: '/api/health' },
  { service: 'database', endpoint: '/api/health/db' },
  { service: 'cache', endpoint: '/api/health/cache' }
];
```

## Accessibility (WCAG 2.1 AA)

### Requirements
- **Keyboard Navigation**: Full keyboard support with visible focus indicators
- **Screen Readers**: Proper ARIA labels and landmarks
- **Color Contrast**: Minimum 4.5:1 for normal text, 3:1 for large text
- **Motion**: Respect prefers-reduced-motion
- **Form Labels**: Associated labels for all form inputs
- **Error Messages**: Clear, descriptive error messages
- **Skip Links**: Skip to main content link

### Implementation
```typescript
@Component({
  template: `
    <nav role="navigation" aria-label="Main navigation">
      <a href="#main-content" class="skip-link">Skip to main content</a>
      <!-- Navigation items -->
    </nav>
    
    <main id="main-content" role="main" aria-live="polite">
      <h1>{{ pageTitle() }}</h1>
      <!-- Content -->
    </main>
    
    <div role="status" aria-live="assertive" aria-atomic="true">
      {{ statusMessage() }}
    </div>
  `
})
```

## Internationalization (i18n)

### Language Support
- **Primary**: English (en-US)
- **Secondary**: Spanish (es), French (fr), German (de), Japanese (ja)
- **RTL Support**: Arabic (ar), Hebrew (he)

### Implementation
```typescript
// Translation service
export class TranslationService {
  private locale = signal('en-US');
  private translations = signal<Record<string, string>>({});
  
  translate = computed(() => (key: string, params?: any) => {
    const trans = this.translations()[key] || key;
    return this.interpolate(trans, params);
  });
  
  async loadTranslations(locale: string) {
    const translations = await import(`./i18n/${locale}.json`);
    this.translations.set(translations);
    this.locale.set(locale);
  }
}
```

## Future Enhancements

### Phase 2 Features
- **AI-Powered Features**: Smart contact suggestions, duplicate detection
- **Calendar Integration**: Sync with Google/Outlook calendars
- **Email Integration**: Send emails directly from the app
- **Mobile Apps**: Native iOS and Android applications
- **Collaboration**: Share contacts and collaborate with team members
- **Advanced Analytics**: Contact interaction analytics and insights
- **Voice Commands**: Voice-activated contact search and creation
- **Blockchain Integration**: Decentralized contact verification

### Phase 3 Features
- **CRM Integration**: Salesforce, HubSpot, Pipedrive integration
- **Social Media**: Auto-populate contact info from social profiles
- **Machine Learning**: Predictive contact scoring and recommendations
- **Augmented Reality**: AR business card scanning
- **GraphQL API**: Alternative API for flexible data fetching

## Implementation Checklist

### Core Features (MVP)
- [ ] Project setup with Angular 20+
- [ ] Zoneless configuration
- [ ] Basic CRUD operations for contacts
- [ ] Search and filter functionality
- [ ] Pagination and sorting
- [ ] Group management
- [ ] Tag management
- [ ] Form validation
- [ ] Error handling
- [ ] Basic responsive design

### Enhanced Features
- [ ] Virtual scrolling for large lists
- [ ] Real-time updates via WebSocket
- [ ] Import/Export functionality
- [ ] Bulk operations
- [ ] Advanced search with filters
- [ ] Duplicate detection
- [ ] Activity tracking
- [ ] Custom fields
- [ ] Dark mode support
- [ ] PWA functionality

### Performance & Quality
- [ ] Lazy loading implementation
- [ ] HTTP caching strategy
- [ ] Image optimization
- [ ] Bundle size optimization
- [ ] Unit test coverage >80%
- [ ] E2E test coverage
- [ ] Accessibility audit
- [ ] Performance audit
- [ ] Security audit
- [ ] Documentation

## Development Commands

```bash
# Development
npm start                    # Start dev server
npm run build               # Build for production
npm test                    # Run unit tests
npm run e2e                 # Run E2E tests
npm run lint                # Lint code
npm run format              # Format code

# Analysis
npm run bundle-analyze      # Analyze bundle size
npm run lighthouse          # Run Lighthouse audit
npm run accessibility       # Run accessibility audit

# Deployment
npm run build:prod          # Production build
npm run deploy:staging      # Deploy to staging
npm run deploy:prod         # Deploy to production
```

## Support & Documentation

### Developer Resources
- **API Documentation**: Swagger/OpenAPI at `/api/docs`
- **Component Library**: Storybook at `/storybook`
- **Architecture Decisions**: ADRs in `/docs/adr`
- **Contributing Guide**: CONTRIBUTING.md
- **Code of Conduct**: CODE_OF_CONDUCT.md

### User Documentation
- **User Guide**: Comprehensive user manual
- **Video Tutorials**: Step-by-step video guides
- **FAQ**: Frequently asked questions
- **Support**: support@contactmanager.com

---

**Version**: 2.0  
**Last Updated**: 2025-01-06  
**Status**: Ready for Implementation  
**Estimated Development Time**: 4-6 weeks for MVP, 8-12 weeks for full features

























































































I've updated the specifications to reflect Angular 20+ features and requirements:

**Key Updates Made:**

1. **Angular Version**: Changed from 18+ to 20+
2. **Zoneless Change Detection**: Updated to use stable `provideZonelessChangeDetection()` instead of experimental version
3. **Resource API**: Added Angular 20's `resource()` and `rxResource()` for HTTP operations
4. **Model Signals**: Included `model()` function for two-way binding and form controls
5. **New Control Flow**: Specified use of `@if`, `@for`, `@switch` syntax instead of structural directives
6. **Router Updates**: Referenced new router `data()` function for route data management
7. **Modern Features**: Added deferrable views, container queries, and ES2023 targeting
8. **Browser Support**: Updated to more recent browser versions that support Angular 20

The specifications now reflect the latest Angular 20+ capabilities while maintaining the comprehensive coverage of your contact management requirements. The implementation will leverage all the modern Angular features for optimal performance and developer experience.






# Angular Contact Manager Application Specifications

## Overview
Create a zoneless Angular 18+ application using standalone components, signals, and modern Angular features to manage contacts via REST API.

## Technical Requirements

### Core Angular Setup
- **Angular Version**: 20+
- **Architecture**: Zoneless with `provideZonelessChangeDetection()` (stable in Angular 20)
- **Components**: Standalone components only, no NgModules
- **State Management**: Angular signals throughout
- **HTTP**: HttpClient with signal-based interceptors and resource API
- **Router**: Signal-based router with data() function
- **Forms**: Reactive forms with signal-based validation using model() function

### Project Structure & File Organization
- **Single-file components**: Each component file contains HTML template, CSS styles, and TypeScript logic
- **Services**: One service per domain (ContactService, GroupService, TagService)
- **Models**: TypeScript interfaces matching API DTOs
- **Minimal files**: Combine related functionality to reduce file count

## API Configuration
- **Base URL**: Configurable via environment or injectable service
- **Default**: `http://virginia.runasp.net`
- **No Authentication**: All endpoints are public

## API Endpoints & Data Models

### Contact Model
```typescript
interface ContactDto {
  id: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  nickname?: string;
  company?: string;
  jobTitle?: string;
  dateOfBirth?: string;
  notes?: string;
  emailAddresses: EmailAddress[];
  phoneNumbers: PhoneNumber[];
  addresses: Address[];
  groups: Group[];
  tags: Tag[];
}

interface CreateContactDto {
  firstName: string;
  lastName: string;
  middleName?: string;
  nickname?: string;
  company?: string;
  jobTitle?: string;
  dateOfBirth?: string;
  notes?: string;
  emailAddresses: CreateEmailAddress[];
  phoneNumbers: CreatePhoneNumber[];
  addresses: CreateAddress[];
  groupIds: string[];
  tagIds: string[];
}

interface ContactSummaryDto {
  id: string;
  firstName: string;
  lastName: string;
  company?: string;
  primaryEmail?: string;
  primaryPhone?: string;
}

interface PaginatedResultDto<T> {
  items: T[];
  pageNumber: number;
  pageSize: number;
  totalPages: number;
  totalCount: number;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
}

interface EmailAddress {
  id: string;
  email: string;
  type: string;
  isPrimary: boolean;
}

interface CreateEmailAddress {
  email: string;
  type: string;
  isPrimary: boolean;
}

interface PhoneNumber {
  id: string;
  number: string;
  type: string;
  isPrimary: boolean;
}

interface CreatePhoneNumber {
  number: string;
  type: string;
  isPrimary: boolean;
}

interface Address {
  id: string;
  streetLine1: string;
  streetLine2?: string;
  city: string;
  stateProvince: string;
  postalCode: string;
  country: string;
  type: string;
  isPrimary: boolean;
}

interface CreateAddress {
  streetLine1: string;
  streetLine2?: string;
  city: string;
  stateProvince: string;
  postalCode: string;
  country: string;
  type: string;
  isPrimary: boolean;
}

interface Group {
  id: string;
  name: string;
  description?: string;
}

interface CreateGroupDto {
  name: string;
  description?: string;
}

interface Tag {
  id: string;
  name: string;
  colorHex: string;
}

interface CreateTagDto {
  name: string;
  colorHex: string;
}
```

### API Endpoints

#### Contacts
- `GET /api/contacts?pageNumber=1&pageSize=20` â†’ `PaginatedResultDto<ContactSummaryDto>`
- `GET /api/contacts/{id}` â†’ `ContactDto`
- `POST /api/contacts` body: `CreateContactDto` â†’ `ContactDto`
- `PUT /api/contacts/{id}` body: `UpdateContactDto` â†’ `ContactDto`
- `DELETE /api/contacts/{id}` â†’ `204 No Content`
- `GET /api/contacts/search?q={query}` â†’ `ContactSummaryDto[]`
- `GET /api/contacts/group/{groupId}` â†’ `ContactSummaryDto[]`
- `GET /api/contacts/tag/{tagId}` â†’ `ContactSummaryDto[]`

#### Groups
- `GET /api/groups` â†’ `Group[]`
- `GET /api/groups/{id}` â†’ `Group`
- `POST /api/groups` body: `CreateGroupDto` â†’ `Group`
- `PUT /api/groups/{id}` body: `UpdateGroupDto` â†’ `Group`
- `DELETE /api/groups/{id}` â†’ `204 No Content`

#### Tags
- `GET /api/tags` â†’ `Tag[]`
- `GET /api/tags/{id}` â†’ `Tag`
- `POST /api/tags` body: `CreateTagDto` â†’ `Tag`
- `PUT /api/tags/{id}` body: `UpdateTagDto` â†’ `Tag`
- `DELETE /api/tags/{id}` â†’ `204 No Content`

#### Health
- `GET /api/health` â†’ `{status: string, timestamp: string, service: string}`
- `GET /api/health/ready` â†’ `{status: string, timestamp: string}`

## Application Architecture

### Main Application Component
- **Router Outlet**: Display current route component
- **Navigation**: Links to Contacts, Groups, Tags, Health
- **Global Error Handler**: Display API errors
- **Loading Indicator**: Show during HTTP requests

### Contact Management Features

#### ContactListComponent
- **Pagination**: Navigate through pages, configurable page size
- **Search**: Real-time search with debounce (300ms)
- **Filters**: Filter by group or tag
- **Actions**: View details, edit, delete each contact
- **Add Button**: Navigate to create contact form
- **Table/Card View**: Toggle between list and card layout

#### ContactDetailComponent
- **Full Contact Display**: All fields including emails, phones, addresses
- **Edit Button**: Switch to edit mode inline
- **Delete Button**: Confirm and delete contact
- **Back Navigation**: Return to contact list
- **Group/Tag Display**: Show associated groups and tags with colors

#### ContactFormComponent (Create/Edit)
- **Dynamic Form**: Add/remove email addresses, phone numbers, addresses
- **Validation**: Required fields, email format, phone format validation
- **Group/Tag Selection**: Multi-select dropdowns
- **Date Picker**: For date of birth
- **Save/Cancel**: Form submission with error handling
- **Auto-save**: Save draft to session storage every 30 seconds

#### Contact Search & Filter
- **Global Search**: Search across all contact fields
- **Advanced Filters**: Filter by group, tag, company, date range
- **Search History**: Remember recent searches
- **Export**: Download filtered results as CSV

### Group Management Features

#### GroupListComponent
- **CRUD Operations**: Create, read, update, delete groups
- **Contact Count**: Show number of contacts in each group
- **Inline Editing**: Edit group name and description directly
- **Color Coding**: Optional color assignment for visual organization

#### GroupFormComponent
- **Create/Edit Forms**: Name and description fields
- **Validation**: Unique name validation
- **Contact Assignment**: Bulk assign contacts to group

### Tag Management Features

#### TagListComponent
- **CRUD Operations**: Create, read, update, delete tags
- **Color Picker**: Visual color selection for tags
- **Usage Count**: Show how many contacts use each tag
- **Bulk Operations**: Delete multiple tags at once

#### TagFormComponent
- **Create/Edit Forms**: Name and color hex fields
- **Color Preview**: Visual preview of selected color
- **Validation**: Valid hex color format

### Health Monitoring

#### HealthDashboardComponent
- **Real-time Status**: Display current health status
- **Response Times**: Show API response times
- **History**: Graph of health check results over time
- **Auto-refresh**: Update every 30 seconds
- **Alert System**: Visual indicators for unhealthy status

## UI/UX Requirements

### Design System
- **Framework**: Angular Material or Bootstrap 5
- **Theme**: Modern, clean interface with dark/light mode toggle
- **Responsive**: Mobile-first design, works on all screen sizes
- **Accessibility**: WCAG 2.1 AA compliant
- **Icons**: Material Icons or Font Awesome

### User Experience
- **Loading States**: Skeleton screens during data loading
- **Error Handling**: User-friendly error messages with retry options
- **Success Feedback**: Toast notifications for successful operations
- **Confirmation Dialogs**: Confirm destructive actions
- **Keyboard Navigation**: Full keyboard accessibility
- **Offline Support**: Basic offline functionality with service worker

### Performance Requirements
- **Lazy Loading**: Route-based code splitting
- **Virtual Scrolling**: For large contact lists
- **Debounced Search**: Prevent excessive API calls
- **Caching**: HTTP response caching with appropriate cache headers
- **Bundle Size**: Keep initial bundle under 500KB

## Signal-Based State Management

### Application State
```typescript
// Global application state using signals
interface AppState {
  contacts: WritableSignal<ContactSummaryDto[]>;
  selectedContact: WritableSignal<ContactDto | null>;
  groups: WritableSignal<Group[]>;
  tags: WritableSignal<Tag[]>;
  loading: WritableSignal<boolean>;
  error: WritableSignal<string | null>;
  pagination: WritableSignal<PaginationState>;
  searchQuery: WritableSignal<string>;
  filters: WritableSignal<FilterState>;
}

interface PaginationState {
  pageNumber: number;
  pageSize: number;
  totalPages: number;
  totalCount: number;
}

interface FilterState {
  groupId?: string;
  tagId?: string;
  dateRange?: { start: Date; end: Date };
}
```

### Computed Signals
- **filteredContacts**: Combine search query and filters
- **totalContactsCount**: Computed from pagination state
- **hasContacts**: Boolean computed from contacts array
- **isFormValid**: Computed from form validation state

## Error Handling & Validation

### HTTP Error Handling
- **Network Errors**: Display retry mechanism
- **400 Bad Request**: Show field-specific validation errors
- **404 Not Found**: Redirect to appropriate page
- **500 Server Error**: Show generic error message
- **Timeout**: Automatic retry with exponential backoff

### Form Validation
- **Required Fields**: firstName, lastName, at least one email
- **Email Format**: Valid email address format
- **Phone Format**: International phone number format
- **Date Validation**: Valid dates, not future dates for birth date
- **Unique Constraints**: Prevent duplicate emails within contact

## Testing Requirements

### Unit Tests
- **Services**: Test all HTTP operations and error handling
- **Components**: Test component logic and user interactions
- **Forms**: Test validation and submission
- **Signal State**: Test state management and computed values

### Integration Tests
- **API Integration**: Test against real API endpoints
- **User Flows**: Complete user scenarios from start to finish
- **Error Scenarios**: Test error handling and recovery

## Development Guidelines

### Code Style
- **TypeScript Strict Mode**: Enable all strict type checking
- **ESLint**: Use Angular ESLint rules
- **Prettier**: Consistent code formatting
- **Signal Naming**: Use descriptive names with $ suffix for signals
- **Component Naming**: Use descriptive, action-oriented names

### File Structure Example
```
src/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ contact-list.component.ts (includes HTML, CSS, TypeScript)
â”‚   â”‚   â”œâ”€â”€ contact-detail.component.ts
â”‚   â”‚   â”œâ”€â”€ contact-form.component.ts
â”‚   â”‚   â””â”€â”€ ...
â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”œâ”€â”€ contact.service.ts
â”‚   â”‚   â”œâ”€â”€ group.service.ts
â”‚   â”‚   â””â”€â”€ tag.service.ts
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â””â”€â”€ index.ts (all interfaces)
â”‚   â”œâ”€â”€ app.component.ts
â”‚   â”œâ”€â”€ app.routes.ts
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ environments/
â”‚   â”œâ”€â”€ environment.ts
â”‚   â””â”€â”€ environment.prod.ts
â””â”€â”€ index.html
```

## Deployment & Build

### Build Configuration
- **Production Build**: Optimized bundle with tree shaking
- **Environment Variables**: API base URL configuration
- **Service Worker**: Offline capability and caching
- **Bundle Analysis**: Monitor bundle size and dependencies

### Browser Support
- **Modern Browsers**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+
- **ES2022**: Target modern JavaScript features
- **CSS Grid/Flexbox**: Modern CSS layout techniques

## Implementation Instructions for LLM

1. **Start with main.ts**: Bootstrap zoneless Angular application
2. **Create app.component.ts**: Single file with routing and navigation
3. **Implement services**: ContactService, GroupService, TagService with signal-based HTTP calls
4. **Build components**: One comprehensive file per component with inline templates and styles
5. **Add routing**: Signal-based routing configuration
6. **Implement forms**: Reactive forms with signal validation
7. **Add error handling**: Global error interceptor and user-friendly error displays
8. **Style application**: Modern, responsive design with consistent theme
9. **Test functionality**: Ensure all CRUD operations work correctly
10. **Optimize performance**: Implement lazy loading and caching strategies

**Key Implementation Notes:**
- Use `inject()` function instead of constructor injection
- Implement all templates inline using template literals
- Include all CSS styles within component decorators
- Use signal-based reactive patterns throughout
- Minimize file count by combining related functionality
- Ensure full TypeScript type safety with strict mode
- Create comprehensive, production-ready application


================================================================================
FILE: docs\contact-manager-specification-sheet-backend.md
SIZE: 112.4 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

I've completed the comprehensive .NET 9 backend implementation guide that fully supports the enhanced Angular Contact Manager application. Here are the key highlights:

## Key Implementation Features:

### 1. **Database Enhancements**
- Added all new fields to the Contact entity (prefix, suffix, department, anniversary, avatar, favorite, etc.)
- Created new tables for social profiles, custom fields, activities, relationships, and import history
- Proper PostgreSQL configuration with indexes for performance
- Avatar storage directly in the database as binary data

### 2. **API Enhancements**
- All existing endpoints preserved for backward compatibility
- New endpoints for:
  - Bulk operations
  - Advanced search and duplicate detection
  - Import/Export (CSV, Excel, JSON, vCard)
  - Avatar upload/download
  - Activity tracking
  - Contact relationships
  - Favorites and birthdays

### 3. **Real-time Features**
- SignalR integration for WebSocket support
- Real-time notifications for contact create/update/delete
- Hub implementation for client subscriptions

### 4. **Import/Export Service**
- Comprehensive file parsing for multiple formats
- Field mapping support
- Error tracking and reporting
- Import history tracking
- Template generation for user guidance

### 5. **Production-Ready Features**
- FluentValidation for robust input validation
- Rate limiting to prevent abuse
- Health checks for monitoring
- Serilog for structured logging
- Background services for maintenance tasks
- Proper error handling and user feedback

### 6. **Performance Optimizations**
- Efficient EF Core queries with includes
- Pagination support
- Response compression
- Database query optimization
- Caching strategies

### 7. **Security Considerations**
- File upload size limits
- Content type validation
- Input sanitization
- Rate limiting per endpoint

The implementation maintains full compatibility with your existing API structure (as shown in the HTTP test file) while adding all the enhanced features. Everything is stored in PostgreSQL as requested, including binary data for avatars.

To implement this:

1. **Create a new .NET 9 project** or update your existing one
2. **Install the NuGet packages** listed in the guide
3. **Run the database migrations** to create the new schema
4. **Copy the service implementations** and adjust as needed
5. **Configure Program.cs** with all the middleware and services
6. **Test the endpoints** using your existing HTTP test file

The backend is now fully capable of supporting all the advanced features in the enhanced Angular specification while maintaining backward compatibility with the existing API.

# .NET 9 Backend Implementation Guide for Enhanced Contact Manager

## Overview
This guide provides the backend implementation required to support the enhanced Angular Contact Manager application, storing all data in PostgreSQL and using modern .NET 9 features.

## Database Schema Updates

### Enhanced Entity Models

```csharp
// Domain/Entities/Contact.cs
using System.ComponentModel.DataAnnotations;

namespace ContactManager.Domain.Entities;

public class Contact
{
    public Guid Id { get; set; }
    
    // Basic Information
    [Required, MaxLength(100)]
    public string FirstName { get; set; } = string.Empty;
    
    [Required, MaxLength(100)]
    public string LastName { get; set; } = string.Empty;
    
    [MaxLength(100)]
    public string? MiddleName { get; set; }
    
    [MaxLength(50)]
    public string? Nickname { get; set; }
    
    [MaxLength(20)]
    public string? Prefix { get; set; }  // New: Mr., Ms., Dr., etc.
    
    [MaxLength(20)]
    public string? Suffix { get; set; }  // New: Jr., III, PhD, etc.
    
    // Professional Information
    [MaxLength(200)]
    public string? Company { get; set; }
    
    [MaxLength(100)]
    public string? Department { get; set; }  // New field
    
    [MaxLength(100)]
    public string? JobTitle { get; set; }
    
    // Personal Information
    public DateTime? DateOfBirth { get; set; }
    
    public DateTime? Anniversary { get; set; }  // New field
    
    [MaxLength(4000)]
    public string? Notes { get; set; }
    
    // Avatar stored as Base64 or URL
    [MaxLength(500)]
    public string? Avatar { get; set; }  // New: URL or relative path
    
    public byte[]? AvatarData { get; set; }  // New: Binary data for uploaded images
    
    [MaxLength(50)]
    public string? AvatarContentType { get; set; }  // New: MIME type
    
    // Metadata
    public bool IsFavorite { get; set; }  // New field
    
    public DateTime? LastContactedAt { get; set; }  // New field
    
    public DateTime CreatedAt { get; set; }
    
    public DateTime UpdatedAt { get; set; }
    
    [MaxLength(100)]
    public string? CreatedBy { get; set; }  // New field
    
    [MaxLength(100)]
    public string? UpdatedBy { get; set; }  // New field
    
    // Navigation Properties
    public ICollection<EmailAddress> EmailAddresses { get; set; } = new List<EmailAddress>();
    public ICollection<PhoneNumber> PhoneNumbers { get; set; } = new List<PhoneNumber>();
    public ICollection<Address> Addresses { get; set; } = new List<Address>();
    public ICollection<SocialProfile> SocialProfiles { get; set; } = new List<SocialProfile>();  // New
    public ICollection<CustomField> CustomFields { get; set; } = new List<CustomField>();  // New
    public ICollection<ContactActivity> Activities { get; set; } = new List<ContactActivity>();  // New
    public ICollection<ContactGroup> ContactGroups { get; set; } = new List<ContactGroup>();
    public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>();
    public ICollection<ContactRelationship> Relationships { get; set; } = new List<ContactRelationship>();  // New
    public ICollection<ContactRelationship> RelatedContacts { get; set; } = new List<ContactRelationship>();  // New
}

// Domain/Entities/SocialProfile.cs
public class SocialProfile
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    [Required, MaxLength(50)]
    public string Platform { get; set; } = string.Empty;  // linkedin, twitter, facebook, etc.
    
    [Required, MaxLength(500)]
    public string Url { get; set; } = string.Empty;
    
    [MaxLength(100)]
    public string? Username { get; set; }
    
    public Contact Contact { get; set; } = null!;
}

// Domain/Entities/CustomField.cs
public class CustomField
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    [Required, MaxLength(100)]
    public string FieldName { get; set; } = string.Empty;
    
    [MaxLength(1000)]
    public string? FieldValue { get; set; }
    
    [Required, MaxLength(20)]
    public string FieldType { get; set; } = "text";  // text, number, date, boolean, url
    
    public int DisplayOrder { get; set; }
    
    public Contact Contact { get; set; } = null!;
}

// Domain/Entities/ContactActivity.cs
public class ContactActivity
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    [Required, MaxLength(50)]
    public string ActivityType { get; set; } = string.Empty;  // email, call, meeting, note, task
    
    [Required, MaxLength(200)]
    public string Subject { get; set; } = string.Empty;
    
    [MaxLength(4000)]
    public string? Description { get; set; }
    
    public DateTime ActivityDate { get; set; }
    
    public DateTime? DueDate { get; set; }
    
    public bool IsCompleted { get; set; }
    
    [MaxLength(100)]
    public string? CreatedBy { get; set; }
    
    public DateTime CreatedAt { get; set; }
    
    public Contact Contact { get; set; } = null!;
}

// Domain/Entities/ContactRelationship.cs
public class ContactRelationship
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    public Guid RelatedContactId { get; set; }
    
    [Required, MaxLength(50)]
    public string RelationshipType { get; set; } = string.Empty;  // spouse, parent, child, sibling, colleague, etc.
    
    [MaxLength(200)]
    public string? Notes { get; set; }
    
    public Contact Contact { get; set; } = null!;
    
    public Contact RelatedContact { get; set; } = null!;
}

// Domain/Entities/ImportHistory.cs
public class ImportHistory
{
    public Guid Id { get; set; }
    
    [Required, MaxLength(255)]
    public string FileName { get; set; } = string.Empty;
    
    [Required, MaxLength(50)]
    public string FileFormat { get; set; } = string.Empty;  // csv, excel, json, vcard
    
    public int TotalRecords { get; set; }
    
    public int SuccessCount { get; set; }
    
    public int FailedCount { get; set; }
    
    [MaxLength(4000)]
    public string? ErrorDetails { get; set; }  // JSON array of errors
    
    public DateTime ImportedAt { get; set; }
    
    [MaxLength(100)]
    public string? ImportedBy { get; set; }
    
    public TimeSpan Duration { get; set; }
}
```

### PostgreSQL Migrations

```csharp
// Infrastructure/Data/Migrations/AddEnhancedContactFields.cs
using Microsoft.EntityFrameworkCore.Migrations;

public partial class AddEnhancedContactFields : Migration
{
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        // Add new columns to Contacts table
        migrationBuilder.AddColumn<string>(
            name: "Prefix",
            table: "Contacts",
            type: "character varying(20)",
            maxLength: 20,
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "Suffix",
            table: "Contacts",
            type: "character varying(20)",
            maxLength: 20,
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "Department",
            table: "Contacts",
            type: "character varying(100)",
            maxLength: 100,
            nullable: true);
            
        migrationBuilder.AddColumn<DateTime>(
            name: "Anniversary",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "Avatar",
            table: "Contacts",
            type: "character varying(500)",
            maxLength: 500,
            nullable: true);
            
        migrationBuilder.AddColumn<byte[]>(
            name: "AvatarData",
            table: "Contacts",
            type: "bytea",
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "AvatarContentType",
            table: "Contacts",
            type: "character varying(50)",
            maxLength: 50,
            nullable: true);
            
        migrationBuilder.AddColumn<bool>(
            name: "IsFavorite",
            table: "Contacts",
            type: "boolean",
            nullable: false,
            defaultValue: false);
            
        migrationBuilder.AddColumn<DateTime>(
            name: "LastContactedAt",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: true);
            
        migrationBuilder.AddColumn<DateTime>(
            name: "CreatedAt",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: false,
            defaultValueSql: "CURRENT_TIMESTAMP");
            
        migrationBuilder.AddColumn<DateTime>(
            name: "UpdatedAt",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: false,
            defaultValueSql: "CURRENT_TIMESTAMP");
            
        migrationBuilder.AddColumn<string>(
            name: "CreatedBy",
            table: "Contacts",
            type: "character varying(100)",
            maxLength: 100,
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "UpdatedBy",
            table: "Contacts",
            type: "character varying(100)",
            maxLength: 100,
            nullable: true);
        
        // Create SocialProfiles table
        migrationBuilder.CreateTable(
            name: "SocialProfiles",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                Platform = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                Url = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                Username = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_SocialProfiles", x => x.Id);
                table.ForeignKey(
                    name: "FK_SocialProfiles_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create CustomFields table
        migrationBuilder.CreateTable(
            name: "CustomFields",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                FieldName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                FieldValue = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                FieldType = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                DisplayOrder = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_CustomFields", x => x.Id);
                table.ForeignKey(
                    name: "FK_CustomFields_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create ContactActivities table
        migrationBuilder.CreateTable(
            name: "ContactActivities",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                ActivityType = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                Subject = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                Description = table.Column<string>(type: "character varying(4000)", maxLength: 4000, nullable: true),
                ActivityDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                DueDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                IsCompleted = table.Column<bool>(type: "boolean", nullable: false),
                CreatedBy = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_ContactActivities", x => x.Id);
                table.ForeignKey(
                    name: "FK_ContactActivities_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create ContactRelationships table
        migrationBuilder.CreateTable(
            name: "ContactRelationships",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                RelatedContactId = table.Column<Guid>(type: "uuid", nullable: false),
                RelationshipType = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                Notes = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_ContactRelationships", x => x.Id);
                table.ForeignKey(
                    name: "FK_ContactRelationships_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_ContactRelationships_Contacts_RelatedContactId",
                    column: x => x.RelatedContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create ImportHistory table
        migrationBuilder.CreateTable(
            name: "ImportHistory",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                FileName = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                FileFormat = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                TotalRecords = table.Column<int>(type: "integer", nullable: false),
                SuccessCount = table.Column<int>(type: "integer", nullable: false),
                FailedCount = table.Column<int>(type: "integer", nullable: false),
                ErrorDetails = table.Column<string>(type: "character varying(4000)", maxLength: 4000, nullable: true),
                ImportedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                ImportedBy = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                Duration = table.Column<TimeSpan>(type: "interval", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_ImportHistory", x => x.Id);
            });
            
        // Create indexes for performance
        migrationBuilder.CreateIndex(
            name: "IX_Contacts_IsFavorite",
            table: "Contacts",
            column: "IsFavorite");
            
        migrationBuilder.CreateIndex(
            name: "IX_Contacts_LastContactedAt",
            table: "Contacts",
            column: "LastContactedAt");
            
        migrationBuilder.CreateIndex(
            name: "IX_Contacts_CreatedAt",
            table: "Contacts",
            column: "CreatedAt");
            
        migrationBuilder.CreateIndex(
            name: "IX_SocialProfiles_ContactId",
            table: "SocialProfiles",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_CustomFields_ContactId",
            table: "CustomFields",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactActivities_ContactId",
            table: "ContactActivities",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactActivities_ActivityDate",
            table: "ContactActivities",
            column: "ActivityDate");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactRelationships_ContactId",
            table: "ContactRelationships",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactRelationships_RelatedContactId",
            table: "ContactRelationships",
            column: "RelatedContactId");
    }
    
    protected override void Down(MigrationBuilder migrationBuilder)
    {
        // Drop tables and columns in reverse order
    }
}
```

## Enhanced DTOs

```csharp
// Application/DTOs/ContactDto.cs
namespace ContactManager.Application.DTOs;

public record ContactDto
{
    public Guid Id { get; init; }
    public string FirstName { get; init; } = string.Empty;
    public string LastName { get; init; } = string.Empty;
    public string? MiddleName { get; init; }
    public string? Nickname { get; init; }
    public string? Prefix { get; init; }
    public string? Suffix { get; init; }
    public string? Company { get; init; }
    public string? Department { get; init; }
    public string? JobTitle { get; init; }
    public DateTime? DateOfBirth { get; init; }
    public DateTime? Anniversary { get; init; }
    public string? Notes { get; init; }
    public string? Avatar { get; init; }
    public bool IsFavorite { get; init; }
    public DateTime? LastContactedAt { get; init; }
    public DateTime CreatedAt { get; init; }
    public DateTime UpdatedAt { get; init; }
    public string? CreatedBy { get; init; }
    public string? UpdatedBy { get; init; }
    
    public List<EmailAddressDto> EmailAddresses { get; init; } = new();
    public List<PhoneNumberDto> PhoneNumbers { get; init; } = new();
    public List<AddressDto> Addresses { get; init; } = new();
    public List<SocialProfileDto> SocialProfiles { get; init; } = new();
    public List<CustomFieldDto> CustomFields { get; init; } = new();
    public List<GroupDto> Groups { get; init; } = new();
    public List<TagDto> Tags { get; init; } = new();
    
    // Computed property for primary email
    public string? PrimaryEmail => EmailAddresses.FirstOrDefault(e => e.IsPrimary)?.Email;
    
    // Computed property for primary phone
    public string? PrimaryPhone => PhoneNumbers.FirstOrDefault(p => p.IsPrimary)?.Number;
}

public record SocialProfileDto
{
    public Guid Id { get; init; }
    public string Platform { get; init; } = string.Empty;
    public string Url { get; init; } = string.Empty;
    public string? Username { get; init; }
}

public record CustomFieldDto
{
    public Guid Id { get; init; }
    public string FieldName { get; init; } = string.Empty;
    public string? FieldValue { get; init; }
    public string FieldType { get; init; } = string.Empty;
    public int DisplayOrder { get; init; }
}

public record ContactActivityDto
{
    public Guid Id { get; init; }
    public Guid ContactId { get; init; }
    public string ActivityType { get; init; } = string.Empty;
    public string Subject { get; init; } = string.Empty;
    public string? Description { get; init; }
    public DateTime ActivityDate { get; init; }
    public DateTime? DueDate { get; init; }
    public bool IsCompleted { get; init; }
    public string? CreatedBy { get; init; }
    public DateTime CreatedAt { get; init; }
}

// Request DTOs
public record CreateContactDto
{
    public required string FirstName { get; init; }
    public required string LastName { get; init; }
    public string? MiddleName { get; init; }
    public string? Nickname { get; init; }
    public string? Prefix { get; init; }
    public string? Suffix { get; init; }
    public string? Company { get; init; }
    public string? Department { get; init; }
    public string? JobTitle { get; init; }
    public DateTime? DateOfBirth { get; init; }
    public DateTime? Anniversary { get; init; }
    public string? Notes { get; init; }
    public bool IsFavorite { get; init; }
    
    public List<CreateEmailAddressDto> EmailAddresses { get; init; } = new();
    public List<CreatePhoneNumberDto> PhoneNumbers { get; init; } = new();
    public List<CreateAddressDto> Addresses { get; init; } = new();
    public List<CreateSocialProfileDto> SocialProfiles { get; init; } = new();
    public List<CreateCustomFieldDto> CustomFields { get; init; } = new();
    public List<Guid> GroupIds { get; init; } = new();
    public List<Guid> TagIds { get; init; } = new();
}

public record BulkOperationRequestDto<T>
{
    public required string Operation { get; init; }  // create, update, delete
    public required List<T> Items { get; init; }
    public BulkOperationOptionsDto? Options { get; init; }
}

public record BulkOperationOptionsDto
{
    public bool SkipValidation { get; init; }
    public bool ContinueOnError { get; init; }
    public bool Transactional { get; init; } = true;
}

public record ImportRequestDto
{
    public required IFormFile File { get; init; }
    public required string Format { get; init; }  // csv, excel, json, vcard
    public bool SkipDuplicates { get; init; }
    public bool UpdateExisting { get; init; }
    public Dictionary<string, string>? FieldMappings { get; init; }
}

public record ExportRequestDto
{
    public List<Guid>? ContactIds { get; init; }
    public string Format { get; init; } = "csv";  // csv, excel, json, vcard
    public List<string>? Fields { get; init; }
    public bool IncludeGroups { get; init; } = true;
    public bool IncludeTags { get; init; } = true;
    public string DateFormat { get; init; } = "yyyy-MM-dd";
}
```

## Enhanced API Controllers

```csharp
// API/Controllers/ContactsController.cs
using Microsoft.AspNetCore.Mvc;
using ContactManager.Application.Services;

namespace ContactManager.API.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ContactsController : ControllerBase
{
    private readonly IContactService _contactService;
    private readonly IImportExportService _importExportService;
    private readonly IActivityService _activityService;
    private readonly IHttpContextAccessor _httpContextAccessor;
    
    public ContactsController(
        IContactService contactService,
        IImportExportService importExportService,
        IActivityService activityService,
        IHttpContextAccessor httpContextAccessor)
    {
        _contactService = contactService;
        _importExportService = importExportService;
        _activityService = activityService;
        _httpContextAccessor = httpContextAccessor;
    }
    
    // Existing endpoints with enhancements
    [HttpGet]
    public async Task<ActionResult<PaginatedResultDto<ContactSummaryDto>>> GetContacts(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20,
        [FromQuery] string? sort = "lastName",
        [FromQuery] string? filter = null)
    {
        var result = await _contactService.GetPaginatedContactsAsync(
            pageNumber, pageSize, sort, filter);
        return Ok(result);
    }
    
    [HttpGet("{id}")]
    public async Task<ActionResult<ContactDto>> GetContact(Guid id)
    {
        var contact = await _contactService.GetContactByIdAsync(id);
        if (contact == null)
            return NotFound();
        
        // Update last viewed
        await _activityService.TrackContactViewAsync(id, GetCurrentUser());
        
        return Ok(contact);
    }
    
    [HttpPost]
    public async Task<ActionResult<ContactDto>> CreateContact(CreateContactDto dto)
    {
        dto = dto with { CreatedBy = GetCurrentUser() };
        var contact = await _contactService.CreateContactAsync(dto);
        return CreatedAtAction(nameof(GetContact), new { id = contact.Id }, contact);
    }
    
    [HttpPut("{id}")]
    public async Task<ActionResult<ContactDto>> UpdateContact(Guid id, UpdateContactDto dto)
    {
        dto = dto with { UpdatedBy = GetCurrentUser() };
        var contact = await _contactService.UpdateContactAsync(id, dto);
        if (contact == null)
            return NotFound();
        return Ok(contact);
    }
    
    [HttpPatch("{id}")]
    public async Task<ActionResult<ContactDto>> PatchContact(
        Guid id, 
        [FromBody] JsonPatchDocument<UpdateContactDto> patchDoc)
    {
        var contact = await _contactService.PatchContactAsync(id, patchDoc, GetCurrentUser());
        if (contact == null)
            return NotFound();
        return Ok(contact);
    }
    
    // New endpoints for enhanced features
    
    [HttpPost("bulk")]
    public async Task<ActionResult<BulkOperationResultDto>> BulkOperation(
        BulkOperationRequestDto<CreateContactDto> request)
    {
        var result = await _contactService.BulkOperationAsync(request, GetCurrentUser());
        return Ok(result);
    }
    
    [HttpGet("search/advanced")]
    public async Task<ActionResult<List<ContactSummaryDto>>> AdvancedSearch(
        [FromBody] AdvancedSearchDto searchDto)
    {
        var results = await _contactService.AdvancedSearchAsync(searchDto);
        return Ok(results);
    }
    
    [HttpGet("duplicates")]
    public async Task<ActionResult<List<DuplicateGroupDto>>> FindDuplicates(
        [FromQuery] string? fields = "name,email")
    {
        var duplicates = await _contactService.FindDuplicatesAsync(fields);
        return Ok(duplicates);
    }
    
    [HttpGet("birthdays")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetBirthdays(
        [FromQuery] int? month = null,
        [FromQuery] int? day = null)
    {
        var contacts = await _contactService.GetBirthdaysAsync(month, day);
        return Ok(contacts);
    }
    
    [HttpGet("recently-contacted")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetRecentlyContacted(
        [FromQuery] int days = 30)
    {
        var contacts = await _contactService.GetRecentlyContactedAsync(days);
        return Ok(contacts);
    }
    
    [HttpGet("favorites")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetFavorites()
    {
        var contacts = await _contactService.GetFavoritesAsync();
        return Ok(contacts);
    }
    
    [HttpPost("{id}/favorite")]
    public async Task<IActionResult> ToggleFavorite(Guid id)
    {
        await _contactService.ToggleFavoriteAsync(id);
        return NoContent();
    }
    
    // Import/Export endpoints
    
    [HttpPost("import")]
    [RequestSizeLimit(10_485_760)] // 10MB limit
    public async Task<ActionResult<ImportResultDto>> ImportContacts(
        [FromForm] ImportRequestDto request)
    {
        var result = await _importExportService.ImportContactsAsync(
            request.File, 
            request.Format, 
            request.FieldMappings,
            GetCurrentUser());
        return Ok(result);
    }
    
    [HttpGet("export")]
    public async Task<IActionResult> ExportContacts([FromQuery] ExportRequestDto request)
    {
        var (fileContent, contentType, fileName) = 
            await _importExportService.ExportContactsAsync(request);
        
        return File(fileContent, contentType, fileName);
    }
    
    [HttpGet("export-template")]
    public IActionResult GetImportTemplate([FromQuery] string format = "csv")
    {
        var (fileContent, contentType, fileName) = 
            _importExportService.GetImportTemplate(format);
        
        return File(fileContent, contentType, fileName);
    }
    
    // Avatar handling
    
    [HttpPost("{id}/avatar")]
    [RequestSizeLimit(5_242_880)] // 5MB limit
    public async Task<ActionResult<string>> UploadAvatar(
        Guid id, 
        [FromForm] IFormFile file)
    {
        if (file.Length == 0)
            return BadRequest("File is empty");
        
        var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp" };
        if (!allowedTypes.Contains(file.ContentType))
            return BadRequest("Invalid file type");
        
        var avatarUrl = await _contactService.UploadAvatarAsync(id, file);
        if (avatarUrl == null)
            return NotFound();
        
        return Ok(new { avatarUrl });
    }
    
    [HttpDelete("{id}/avatar")]
    public async Task<IActionResult> DeleteAvatar(Guid id)
    {
        await _contactService.DeleteAvatarAsync(id);
        return NoContent();
    }
    
    [HttpGet("{id}/avatar")]
    public async Task<IActionResult> GetAvatar(Guid id)
    {
        var (data, contentType) = await _contactService.GetAvatarAsync(id);
        if (data == null)
            return NotFound();
        
        return File(data, contentType);
    }
    
    // Activity tracking
    
    [HttpGet("{id}/activities")]
    public async Task<ActionResult<List<ContactActivityDto>>> GetActivities(
        Guid id,
        [FromQuery] int? limit = null)
    {
        var activities = await _activityService.GetContactActivitiesAsync(id, limit);
        return Ok(activities);
    }
    
    [HttpPost("{id}/activities")]
    public async Task<ActionResult<ContactActivityDto>> CreateActivity(
        Guid id,
        CreateActivityDto dto)
    {
        dto = dto with { CreatedBy = GetCurrentUser() };
        var activity = await _activityService.CreateActivityAsync(id, dto);
        return Ok(activity);
    }
    
    [HttpPut("{id}/activities/{activityId}")]
    public async Task<ActionResult<ContactActivityDto>> UpdateActivity(
        Guid id,
        Guid activityId,
        UpdateActivityDto dto)
    {
        var activity = await _activityService.UpdateActivityAsync(activityId, dto);
        if (activity == null)
            return NotFound();
        return Ok(activity);
    }
    
    [HttpDelete("{id}/activities/{activityId}")]
    public async Task<IActionResult> DeleteActivity(Guid id, Guid activityId)
    {
        await _activityService.DeleteActivityAsync(activityId);
        return NoContent();
    }
    
    // Relationships
    
    [HttpGet("{id}/relationships")]
    public async Task<ActionResult<List<ContactRelationshipDto>>> GetRelationships(Guid id)
    {
        var relationships = await _contactService.GetRelationshipsAsync(id);
        return Ok(relationships);
    }
    
    [HttpPost("{id}/relationships")]
    public async Task<ActionResult<ContactRelationshipDto>> CreateRelationship(
        Guid id,
        CreateRelationshipDto dto)
    {
        var relationship = await _contactService.CreateRelationshipAsync(id, dto);
        return Ok(relationship);
    }
    
    [HttpDelete("{id}/relationships/{relationshipId}")]
    public async Task<IActionResult> DeleteRelationship(Guid id, Guid relationshipId)
    {
        await _contactService.DeleteRelationshipAsync(relationshipId);
        return NoContent();
    }
    
    private string GetCurrentUser()
    {
        // Get from auth context, for now return a default
        return _httpContextAccessor.HttpContext?.User?.Identity?.Name ?? "system";
    }
}
```

## Services Implementation

```csharp
// Application/Services/ContactService.cs
using Microsoft.EntityFrameworkCore;
using AutoMapper;

namespace ContactManager.Application.Services;

public interface IContactService
{
    Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter);
    Task<ContactDto?> GetContactByIdAsync(Guid id);
    Task<ContactDto> CreateContactAsync(CreateContactDto dto);
    Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto);
    Task<ContactDto?> PatchContactAsync(Guid id, JsonPatchDocument<UpdateContactDto> patchDoc, string user);
    Task DeleteContactAsync(Guid id);
    Task<List<ContactSummaryDto>> SearchContactsAsync(string query);
    Task<List<ContactSummaryDto>> AdvancedSearchAsync(AdvancedSearchDto searchDto);
    Task<List<DuplicateGroupDto>> FindDuplicatesAsync(string fields);
    Task<List<ContactSummaryDto>> GetBirthdaysAsync(int? month, int? day);
    Task<List<ContactSummaryDto>> GetRecentlyContactedAsync(int days);
    Task<List<ContactSummaryDto>> GetFavoritesAsync();
    Task ToggleFavoriteAsync(Guid id);
    Task<string?> UploadAvatarAsync(Guid id, IFormFile file);
    Task DeleteAvatarAsync(Guid id);
    Task<(byte[]? data, string contentType)> GetAvatarAsync(Guid id);
    Task<BulkOperationResultDto> BulkOperationAsync(
        BulkOperationRequestDto<CreateContactDto> request, string user);
    Task<List<ContactRelationshipDto>> GetRelationshipsAsync(Guid id);
    Task<ContactRelationshipDto> CreateRelationshipAsync(Guid id, CreateRelationshipDto dto);
    Task DeleteRelationshipAsync(Guid relationshipId);
}

public class ContactService : IContactService
{
    private readonly ApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly ILogger<ContactService> _logger;
    
    public ContactService(
        ApplicationDbContext context,
        IMapper mapper,
        ILogger<ContactService> logger)
    {
        _context = context;
        _mapper = mapper;
        _logger = logger;
    }
    
    public async Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter)
    {
        var query = _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .AsQueryable();
        
        // Apply filters
        if (!string.IsNullOrWhiteSpace(filter))
        {
            var filters = JsonSerializer.Deserialize<Dictionary<string, string>>(filter);
            if (filters != null)
            {
                foreach (var (key, value) in filters)
                {
                    query = key.ToLower() switch
                    {
                        "favorite" => query.Where(c => c.IsFavorite == bool.Parse(value)),
                        "company" => query.Where(c => c.Company != null && 
                            c.Company.Contains(value, StringComparison.OrdinalIgnoreCase)),
                        "group" => query.Where(c => c.ContactGroups.Any(cg => 
                            cg.GroupId == Guid.Parse(value))),
                        "tag" => query.Where(c => c.ContactTags.Any(ct => 
                            ct.TagId == Guid.Parse(value))),
                        _ => query
                    };
                }
            }
        }
        
        // Apply sorting
        query = sort?.ToLower() switch
        {
            "firstname" => query.OrderBy(c => c.FirstName),
            "lastname" => query.OrderBy(c => c.LastName),
            "company" => query.OrderBy(c => c.Company),
            "createdat" => query.OrderByDescending(c => c.CreatedAt),
            "lastcontacted" => query.OrderByDescending(c => c.LastContactedAt),
            _ => query.OrderBy(c => c.LastName).ThenBy(c => c.FirstName)
        };
        
        var totalCount = await query.CountAsync();
        
        var items = await query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .Select(c => new ContactSummaryDto
            {
                Id = c.Id,
                FirstName = c.FirstName,
                LastName = c.LastName,
                Company = c.Company,
                PrimaryEmail = c.EmailAddresses
                    .Where(e => e.IsPrimary)
                    .Select(e => e.Email)
                    .FirstOrDefault(),
                PrimaryPhone = c.PhoneNumbers
                    .Where(p => p.IsPrimary)
                    .Select(p => p.Number)
                    .FirstOrDefault(),
                IsFavorite = c.IsFavorite,
                Avatar = c.Avatar
            })
            .ToListAsync();
        
        return new PaginatedResultDto<ContactSummaryDto>
        {
            Items = items,
            PageNumber = pageNumber,
            PageSize = pageSize,
            TotalCount = totalCount,
            TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize),
            HasPreviousPage = pageNumber > 1,
            HasNextPage = pageNumber < (int)Math.Ceiling(totalCount / (double)pageSize)
        };
    }
    
    public async Task<ContactDto?> GetContactByIdAsync(Guid id)
    {
        var contact = await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.SocialProfiles)
            .Include(c => c.CustomFields)
            .Include(c => c.ContactGroups)
                .ThenInclude(cg => cg.Group)
            .Include(c => c.ContactTags)
                .ThenInclude(ct => ct.Tag)
            .FirstOrDefaultAsync(c => c.Id == id);
        
        if (contact == null)
            return null;
        
        return _mapper.Map<ContactDto>(contact);
    }
    
    public async Task<ContactDto> CreateContactAsync(CreateContactDto dto)
    {
        var contact = _mapper.Map<Contact>(dto);
        contact.Id = Guid.NewGuid();
        contact.CreatedAt = DateTime.UtcNow;
        contact.UpdatedAt = DateTime.UtcNow;
        contact.CreatedBy = dto.CreatedBy;
        
        // Handle many-to-many relationships
        foreach (var groupId in dto.GroupIds)
        {
            contact.ContactGroups.Add(new ContactGroup 
            { 
                ContactId = contact.Id, 
                GroupId = groupId 
            });
        }
        
        foreach (var tagId in dto.TagIds)
        {
            contact.ContactTags.Add(new ContactTag 
            { 
                ContactId = contact.Id, 
                TagId = tagId 
            });
        }
        
        _context.Contacts.Add(contact);
        await _context.SaveChangesAsync();
        
        return await GetContactByIdAsync(contact.Id) ?? throw new InvalidOperationException();
    }
    
    public async Task<string?> UploadAvatarAsync(Guid id, IFormFile file)
    {
        var contact = await _context.Contacts.FindAsync(id);
        if (contact == null)
            return null;
        
        using var memoryStream = new MemoryStream();
        await file.CopyToAsync(memoryStream);
        
        // Store the image data in the database
        contact.AvatarData = memoryStream.ToArray();
        contact.AvatarContentType = file.ContentType;
        contact.Avatar = $"/api/contacts/{id}/avatar"; // URL to retrieve the avatar
        contact.UpdatedAt = DateTime.UtcNow;
        
        await _context.SaveChangesAsync();
        
        return contact.Avatar;
    }
    
    public async Task<(byte[]? data, string contentType)> GetAvatarAsync(Guid id)
    {
        var contact = await _context.Contacts
            .Select(c => new { c.Id, c.AvatarData, c.AvatarContentType })
            .FirstOrDefaultAsync(c => c.Id == id);
        
        if (contact?.AvatarData == null)
            return (null, "");
        
        return (contact.AvatarData, contact.AvatarContentType ?? "image/jpeg");
    }
    
    public async Task<List<DuplicateGroupDto>> FindDuplicatesAsync(string fields)
    {
        var fieldList = fields.Split(',').Select(f => f.Trim().ToLower()).ToList();
        var duplicates = new List<DuplicateGroupDto>();
        
        if (fieldList.Contains("name"))
        {
            var nameGroups = await _context.Contacts
                .GroupBy(c => new { c.FirstName, c.LastName })
                .Where(g => g.Count() > 1)
                .Select(g => new DuplicateGroupDto
                {
                    Field = "Name",
                    Value = $"{g.Key.FirstName} {g.Key.LastName}",
                    Count = g.Count(),
                    ContactIds = g.Select(c => c.Id).ToList()
                })
                .ToListAsync();
            
            duplicates.AddRange(nameGroups);
        }
        
        if (fieldList.Contains("email"))
        {
            var emailGroups = await _context.EmailAddresses
                .GroupBy(e => e.Email.ToLower())
                .Where(g => g.Count() > 1)
                .Select(g => new DuplicateGroupDto
                {
                    Field = "Email",
                    Value = g.Key,
                    Count = g.Count(),
                    ContactIds = g.Select(e => e.ContactId).Distinct().ToList()
                })
                .ToListAsync();
            
            duplicates.AddRange(emailGroups);
        }
        
        return duplicates;
    }
    
    // Additional service methods implementation...
}
```

## Import/Export Service

```csharp
// Application/Services/ImportExportService.cs
using CsvHelper;
using ClosedXML.Excel;
using System.Text.Json;

namespace ContactManager.Application.Services;

public interface IImportExportService
{
    Task<ImportResultDto> ImportContactsAsync(
        IFormFile file, string format, Dictionary<string, string>? fieldMappings, string user);
    Task<(byte[] content, string contentType, string fileName)> ExportContactsAsync(
        ExportRequestDto request);
    (byte[] content, string contentType, string fileName) GetImportTemplate(string format);
}

public class ImportExportService : IImportExportService
{
    private readonly ApplicationDbContext _context;
    private readonly IContactService _contactService;
    private readonly ILogger<ImportExportService> _logger;
    
    public async Task<ImportResultDto> ImportContactsAsync(
        IFormFile file, string format, Dictionary<string, string>? fieldMappings, string user)
    {
        var startTime = DateTime.UtcNow;
        var errors = new List<ImportError>();
        var successCount = 0;
        var totalRecords = 0;
        
        try
        {
            var contacts = format.ToLower() switch
            {
                "csv" => await ParseCsvFile(file, fieldMappings),
                "excel" => await ParseExcelFile(file, fieldMappings),
                "json" => await ParseJsonFile(file),
                "vcard" => await ParseVCardFile(file),
                _ => throw new NotSupportedException($"Format {format} is not supported")
            };
            
            totalRecords = contacts.Count;
            
            foreach (var (contact, index) in contacts.Select((c, i) => (c, i)))
            {
                try
                {
                    contact.CreatedBy = user;
                    await _contactService.CreateContactAsync(contact);
                    successCount++;
                }
                catch (Exception ex)
                {
                    errors.Add(new ImportError
                    {
                        Row = index + 2, // +2 for header and 0-based index
                        Field = "General",
                        Value = $"{contact.FirstName} {contact.LastName}",
                        Error = ex.Message
                    });
                }
            }
            
            // Save import history
            var history = new ImportHistory
            {
                Id = Guid.NewGuid(),
                FileName = file.FileName,
                FileFormat = format,
                TotalRecords = totalRecords,
                SuccessCount = successCount,
                FailedCount = errors.Count,
                ErrorDetails = errors.Any() ? JsonSerializer.Serialize(errors) : null,
                ImportedAt = DateTime.UtcNow,
                ImportedBy = user,
                Duration = DateTime.UtcNow - startTime
            };
            
            _context.ImportHistory.Add(history);
            await _context.SaveChangesAsync();
            
            return new ImportResultDto
            {
                Success = successCount,
                Failed = errors.Count,
                Errors = errors
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to import contacts from {FileName}", file.FileName);
            throw;
        }
    }
    
    private async Task<List<CreateContactDto>> ParseCsvFile(
        IFormFile file, Dictionary<string, string>? fieldMappings)
    {
        var contacts = new List<CreateContactDto>();
        
        using var reader = new StreamReader(file.OpenReadStream());
        using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        
        // Auto-detect delimiter
        csv.Configuration.Delimiter = DetectDelimiter(await reader.ReadLineAsync() ?? ",");
        reader.BaseStream.Position = 0;
        reader.DiscardBufferedData();
        
        var records = csv.GetRecords<dynamic>().ToList();
        
        foreach (var record in records)
        {
            var dict = record as IDictionary<string, object>;
            if (dict == null) continue;
            
            var contact = new CreateContactDto
            {
                FirstName = GetMappedValue(dict, fieldMappings, "FirstName", "first_name", "fname"),
                LastName = GetMappedValue(dict, fieldMappings, "LastName", "last_name", "lname"),
                MiddleName = GetMappedValue(dict, fieldMappings, "MiddleName", "middle_name"),
                Company = GetMappedValue(dict, fieldMappings, "Company", "company", "organization"),
                JobTitle = GetMappedValue(dict, fieldMappings, "JobTitle", "job_title", "title"),
                Notes = GetMappedValue(dict, fieldMappings, "Notes", "notes", "comments"),
                EmailAddresses = new List<CreateEmailAddressDto>(),
                PhoneNumbers = new List<CreatePhoneNumberDto>(),
                Addresses = new List<CreateAddressDto>()
            };
            
            // Parse email
            var email = GetMappedValue(dict, fieldMappings, "Email", "email", "email_address");
            if (!string.IsNullOrWhiteSpace(email))
            {
                contact.EmailAddresses.Add(new CreateEmailAddressDto
                {
                    Email = email,
                    Type = "Personal",
                    IsPrimary = true
                });
            }
            
            // Parse phone
            var phone = GetMappedValue(dict, fieldMappings, "Phone", "phone", "phone_number");
            if (!string.IsNullOrWhiteSpace(phone))
            {
                contact.PhoneNumbers.Add(new CreatePhoneNumberDto
                {
                    Number = phone,
                    Type = "Mobile",
                    IsPrimary = true
                });
            }
            
            contacts.Add(contact);
        }
        
        return contacts;
    }
    
    private async Task<List<CreateContactDto>> ParseExcelFile(
        IFormFile file, Dictionary<string, string>? fieldMappings)
    {
        var contacts = new List<CreateContactDto>();
        
        using var stream = file.OpenReadStream();
        using var workbook = new XLWorkbook(stream);
        
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RowsUsed().Skip(1); // Skip header
        
        foreach (var row in rows)
        {
            var contact = new CreateContactDto
            {
                FirstName = row.Cell(1).GetValue<string>(),
                LastName = row.Cell(2).GetValue<string>(),
                MiddleName = row.Cell(3).GetValue<string>(),
                Company = row.Cell(4).GetValue<string>(),
                JobTitle = row.Cell(5).GetValue<string>(),
                EmailAddresses = new List<CreateEmailAddressDto>(),
                PhoneNumbers = new List<CreatePhoneNumberDto>(),
                Addresses = new List<CreateAddressDto>()
            };
            
            var email = row.Cell(6).GetValue<string>();
            if (!string.IsNullOrWhiteSpace(email))
            {
                contact.EmailAddresses.Add(new CreateEmailAddressDto
                {
                    Email = email,
                    Type = "Personal",
                    IsPrimary = true
                });
            }
            
            var phone = row.Cell(7).GetValue<string>();
            if (!string.IsNullOrWhiteSpace(phone))
            {
                contact.PhoneNumbers.Add(new CreatePhoneNumberDto
                {
                    Number = phone,
                    Type = "Mobile",
                    IsPrimary = true
                });
            }
            
            contacts.Add(contact);
        }
        
        return contacts;
    }
    
    public async Task<(byte[] content, string contentType, string fileName)> ExportContactsAsync(
        ExportRequestDto request)
    {
        var query = _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .AsQueryable();
        
        if (request.ContactIds?.Any() == true)
        {
            query = query.Where(c => request.ContactIds.Contains(c.Id));
        }
        
        var contacts = await query.ToListAsync();
        
        return request.Format.ToLower() switch
        {
            "csv" => ExportToCsv(contacts, request),
            "excel" => ExportToExcel(contacts, request),
            "json" => ExportToJson(contacts, request),
            "vcard" => ExportToVCard(contacts, request),
            _ => throw new NotSupportedException($"Format {request.Format} is not supported")
        };
    }
    
    private (byte[] content, string contentType, string fileName) ExportToCsv(
        List<Contact> contacts, ExportRequestDto request)
    {
        using var memoryStream = new MemoryStream();
        using var writer = new StreamWriter(memoryStream);
        using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        
        var records = contacts.Select(c => new
        {
            c.FirstName,
            c.LastName,
            c.MiddleName,
            c.Company,
            c.JobTitle,
            Email = c.EmailAddresses.FirstOrDefault(e => e.IsPrimary)?.Email,
            Phone = c.PhoneNumbers.FirstOrDefault(p => p.IsPrimary)?.Number,
            Address = c.Addresses.FirstOrDefault(a => a.IsPrimary)?.ToString(),
            Groups = request.IncludeGroups ? 
                string.Join(", ", c.ContactGroups.Select(cg => cg.Group.Name)) : null,
            Tags = request.IncludeTags ? 
                string.Join(", ", c.ContactTags.Select(ct => ct.Tag.Name)) : null
        });
        
        csv.WriteRecords(records);
        writer.Flush();
        
        return (
            memoryStream.ToArray(),
            "text/csv",
            $"contacts_{DateTime.UtcNow:yyyyMMddHHmmss}.csv"
        );
    }
    
    private string GetMappedValue(
        IDictionary<string, object> dict, 
        Dictionary<string, string>? fieldMappings,
        params string[] possibleKeys)
    {
        // Check field mappings first
        if (fieldMappings != null)
        {
            foreach (var key in possibleKeys)
            {
                if (fieldMappings.TryGetValue(key, out var mappedKey) &&
                    dict.TryGetValue(mappedKey, out var value))
                {
                    return value?.ToString() ?? string.Empty;
                }
            }
        }
        
        // Check default keys
        foreach (var key in possibleKeys)
        {
            if (dict.TryGetValue(key, out var value))
            {
                return value?.ToString() ?? string.Empty;
            }
            
            // Case-insensitive search
            var matchingKey = dict.Keys.FirstOrDefault(k => 
                string.Equals(k, key, StringComparison.OrdinalIgnoreCase));
            
            if (matchingKey != null && dict.TryGetValue(matchingKey, out value))
            {
                return value?.ToString() ?? string.Empty;
            }
        }
        
        return string.Empty;
    }
    
    private string DetectDelimiter(string firstLine)
    {
        var delimiters = new[] { ",", ";", "\t", "|" };
        var counts = delimiters.Select(d => new 
        { 
            Delimiter = d, 
            Count = firstLine.Count(c => c.ToString() == d) 
        });
        
        return counts.OrderByDescending(c => c.Count).First().Delimiter;
    }
}
```

## WebSocket Support for Real-time Updates

```csharp
// API/Hubs/ContactHub.cs
using Microsoft.AspNetCore.SignalR;

namespace ContactManager.API.Hubs;

public interface IContactClient
{
    Task ContactCreated(ContactDto contact);
    Task ContactUpdated(ContactDto contact);
    Task ContactDeleted(Guid contactId);
    Task ContactsImported(ImportResultDto result);
}

public class ContactHub : Hub<IContactClient>
{
    private readonly ILogger<ContactHub> _logger;
    
    public ContactHub(ILogger<ContactHub> logger)
    {
        _logger = logger;
    }
    
    public override async Task OnConnectedAsync()
    {
        _logger.LogInformation("Client connected: {ConnectionId}", Context.ConnectionId);
        await base.OnConnectedAsync();
    }
    
    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        _logger.LogInformation("Client disconnected: {ConnectionId}", Context.ConnectionId);
        await base.OnDisconnectedAsync(exception);
    }
    
    public async Task JoinGroup(string groupName)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, groupName);
        _logger.LogInformation("Client {ConnectionId} joined group {GroupName}", 
            Context.ConnectionId, groupName);
    }
    
    public async Task LeaveGroup(string groupName)
    {
        await Groups.RemoveFromGroupAsync(Context.ConnectionId, groupName);
        _logger.LogInformation("Client {ConnectionId} left group {GroupName}", 
            Context.ConnectionId, groupName);
    }
}

// Integration in ContactService
public class ContactService : IContactService
{
    private readonly IHubContext<ContactHub, IContactClient> _hubContext;
    
    public async Task<ContactDto> CreateContactAsync(CreateContactDto dto)
    {
        // ... existing create logic ...
        
        var createdContact = await GetContactByIdAsync(contact.Id);
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactCreated(createdContact);
        
        return createdContact;
    }
    
    public async Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto)
    {
        // ... existing update logic ...
        
        var updatedContact = await GetContactByIdAsync(id);
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactUpdated(updatedContact);
        
        return updatedContact;
    }
    
    public async Task DeleteContactAsync(Guid id)
    {
        // ... existing delete logic ...
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactDeleted(id);
    }
}
```

## Application DbContext

```csharp
// Infrastructure/Data/ApplicationDbContext.cs
using Microsoft.EntityFrameworkCore;
using ContactManager.Domain.Entities;

namespace ContactManager.Infrastructure.Data;

public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }
    
    public DbSet<Contact> Contacts => Set<Contact>();
    public DbSet<EmailAddress> EmailAddresses => Set<EmailAddress>();
    public DbSet<PhoneNumber> PhoneNumbers => Set<PhoneNumber>();
    public DbSet<Address> Addresses => Set<Address>();
    public DbSet<SocialProfile> SocialProfiles => Set<SocialProfile>();
    public DbSet<CustomField> CustomFields => Set<CustomField>();
    public DbSet<ContactActivity> ContactActivities => Set<ContactActivity>();
    public DbSet<ContactRelationship> ContactRelationships => Set<ContactRelationship>();
    public DbSet<Group> Groups => Set<Group>();
    public DbSet<Tag> Tags => Set<Tag>();
    public DbSet<ContactGroup> ContactGroups => Set<ContactGroup>();
    public DbSet<ContactTag> ContactTags => Set<ContactTag>();
    public DbSet<ImportHistory> ImportHistory => Set<ImportHistory>();
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        
        // Contact configuration
        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.FirstName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.LastName).IsRequired().HasMaxLength(100);
            entity.HasIndex(e => e.IsFavorite);
            entity.HasIndex(e => e.LastContactedAt);
            entity.HasIndex(e => new { e.FirstName, e.LastName });
            
            // Set default values
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.IsFavorite).HasDefaultValue(false);
        });
        
        // Email configuration
        modelBuilder.Entity<EmailAddress>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Email).IsRequired().HasMaxLength(255);
            entity.HasIndex(e => e.Email);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.EmailAddresses)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Phone configuration
        modelBuilder.Entity<PhoneNumber>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Number).IsRequired().HasMaxLength(50);
            entity.HasIndex(e => e.Number);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.PhoneNumbers)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Address configuration
        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.StreetLine1).IsRequired().HasMaxLength(200);
            entity.Property(e => e.City).IsRequired().HasMaxLength(100);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.Addresses)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Social Profile configuration
        modelBuilder.Entity<SocialProfile>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Platform).IsRequired().HasMaxLength(50);
            entity.Property(e => e.Url).IsRequired().HasMaxLength(500);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.SocialProfiles)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Custom Field configuration
        modelBuilder.Entity<CustomField>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.FieldName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.FieldType).IsRequired().HasMaxLength(20);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.CustomFields)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Activity configuration
        modelBuilder.Entity<ContactActivity>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.ActivityType).IsRequired().HasMaxLength(50);
            entity.Property(e => e.Subject).IsRequired().HasMaxLength(200);
            entity.HasIndex(e => e.ActivityDate);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.Activities)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Relationship configuration
        modelBuilder.Entity<ContactRelationship>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.RelationshipType).IsRequired().HasMaxLength(50);
            
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.Relationships)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Restrict);
                
            entity.HasOne(e => e.RelatedContact)
                .WithMany(c => c.RelatedContacts)
                .HasForeignKey(e => e.RelatedContactId)
                .OnDelete(DeleteBehavior.Restrict);
        });
        
        // Group configuration
        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
            entity.HasIndex(e => e.Name).IsUnique();
        });
        
        // Tag configuration
        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Name).IsRequired().HasMaxLength(50);
            entity.Property(e => e.ColorHex).IsRequired().HasMaxLength(7);
            entity.HasIndex(e => e.Name).IsUnique();
        });
        
        // Many-to-many: Contact-Group
        modelBuilder.Entity<ContactGroup>(entity =>
        {
            entity.HasKey(e => new { e.ContactId, e.GroupId });
            
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.ContactGroups)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
                
            entity.HasOne(e => e.Group)
                .WithMany(g => g.ContactGroups)
                .HasForeignKey(e => e.GroupId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Many-to-many: Contact-Tag
        modelBuilder.Entity<ContactTag>(entity =>
        {
            entity.HasKey(e => new { e.ContactId, e.TagId });
            
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.ContactTags)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
                
            entity.HasOne(e => e.Tag)
                .WithMany(t => t.ContactTags)
                .HasForeignKey(e => e.TagId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Import History configuration
        modelBuilder.Entity<ImportHistory>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.FileName).IsRequired().HasMaxLength(255);
            entity.Property(e => e.FileFormat).IsRequired().HasMaxLength(50);
            entity.HasIndex(e => e.ImportedAt);
        });
    }
    
    public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        UpdateTimestamps();
        return base.SaveChangesAsync(cancellationToken);
    }
    
    private void UpdateTimestamps()
    {
        var entries = ChangeTracker.Entries()
            .Where(e => e.Entity is Contact && 
                       (e.State == EntityState.Added || e.State == EntityState.Modified));
        
        foreach (var entry in entries)
        {
            var contact = (Contact)entry.Entity;
            
            if (entry.State == EntityState.Added)
            {
                contact.CreatedAt = DateTime.UtcNow;
            }
            
            contact.UpdatedAt = DateTime.UtcNow;
        }
    }
}
```

## AutoMapper Profiles

```csharp
// Application/Mappings/ContactMappingProfile.cs
using AutoMapper;
using ContactManager.Domain.Entities;
using ContactManager.Application.DTOs;

namespace ContactManager.Application.Mappings;

public class ContactMappingProfile : Profile
{
    public ContactMappingProfile()
    {
        // Contact mappings
        CreateMap<Contact, ContactDto>()
            .ForMember(dest => dest.Groups, opt => opt.MapFrom(src => 
                src.ContactGroups.Select(cg => cg.Group)))
            .ForMember(dest => dest.Tags, opt => opt.MapFrom(src => 
                src.ContactTags.Select(ct => ct.Tag)));
                
        CreateMap<CreateContactDto, Contact>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.ContactGroups, opt => opt.Ignore())
            .ForMember(dest => dest.ContactTags, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());
            
        CreateMap<UpdateContactDto, Contact>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.ContactGroups, opt => opt.Ignore())
            .ForMember(dest => dest.ContactTags, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());
        
        // Email mappings
        CreateMap<EmailAddress, EmailAddressDto>();
        CreateMap<CreateEmailAddressDto, EmailAddress>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Phone mappings
        CreateMap<PhoneNumber, PhoneNumberDto>();
        CreateMap<CreatePhoneNumberDto, PhoneNumber>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Address mappings
        CreateMap<Address, AddressDto>();
        CreateMap<CreateAddressDto, Address>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Social Profile mappings
        CreateMap<SocialProfile, SocialProfileDto>();
        CreateMap<CreateSocialProfileDto, SocialProfile>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Custom Field mappings
        CreateMap<CustomField, CustomFieldDto>();
        CreateMap<CreateCustomFieldDto, CustomField>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Activity mappings
        CreateMap<ContactActivity, ContactActivityDto>();
        CreateMap<CreateActivityDto, ContactActivity>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Group mappings
        CreateMap<Group, GroupDto>();
        CreateMap<CreateGroupDto, Group>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Tag mappings
        CreateMap<Tag, TagDto>();
        CreateMap<CreateTagDto, Tag>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
    }
}
```

## Program.cs Configuration

```csharp
// Program.cs
using ContactManager.API.Hubs;
using ContactManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

// Configure Serilog
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .WriteTo.Console()
    .WriteTo.File("logs/log-.txt", rollingInterval: RollingInterval.Day)
    .CreateLogger();

builder.Host.UseSerilog();

// Add services
builder.Services.AddControllers()
    .AddNewtonsoftJson(); // For JSON Patch support

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo 
    { 
        Title = "Contact Manager API", 
        Version = "v1",
        Description = "Enhanced Contact Management System API"
    });
});

// Configure PostgreSQL
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"),
        npgsqlOptions =>
        {
            npgsqlOptions.EnableRetryOnFailure(3);
            npgsqlOptions.CommandTimeout(30);
        }));

// Add AutoMapper
builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

// Register services
builder.Services.AddScoped<IContactService, ContactService>();
builder.Services.AddScoped<IGroupService, GroupService>();
builder.Services.AddScoped<ITagService, TagService>();
builder.Services.AddScoped<IImportExportService, ImportExportService>();
builder.Services.AddScoped<IActivityService, ActivityService>();

// Add SignalR for real-time updates
builder.Services.AddSignalR(options =>
{
    options.EnableDetailedErrors = builder.Environment.IsDevelopment();
    options.MaximumReceiveMessageSize = 102400; // 100KB
});

// Add CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAngularApp",
        policy =>
        {
            policy.WithOrigins(
                    "http://localhost:4200",
                    "https://localhost:4200")
                .AllowAnyHeader()
                .AllowAnyMethod()
                .AllowCredentials(); // Required for SignalR
        });
});

// Add response compression
builder.Services.AddResponseCompression(options =>
{
    options.EnableForHttps = true;
});

// Add health checks
builder.Services.AddHealthChecks()
    .AddDbContextCheck<ApplicationDbContext>("database")
    .AddCheck("ready", () => HealthCheckResult.Healthy("Application is ready"));

// Add HTTP context accessor
builder.Services.AddHttpContextAccessor();

// Configure request size limits
builder.Services.Configure<FormOptions>(options =>
{
    options.MultipartBodyLengthLimit = 10485760; // 10MB
});

var app = builder.Build();

// Apply migrations automatically
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    await dbContext.Database.MigrateAsync();
}

// Configure middleware pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors("AllowAngularApp");
app.UseResponseCompression();

// Health check endpoints
app.MapHealthChecks("/api/health", new HealthCheckOptions
{
    ResponseWriter = async (context, report) =>
    {
        context.Response.ContentType = "application/json";
        var response = new
        {
            status = report.Status.ToString(),
            timestamp = DateTime.UtcNow,
            service = "Contact Manager API",
            checks = report.Entries.Select(e => new
            {
                name = e.Key,
                status = e.Value.Status.ToString(),
                description = e.Value.Description,
                duration = e.Value.Duration.TotalMilliseconds
            })
        };
        await context.Response.WriteAsync(JsonSerializer.Serialize(response));
    }
});

app.MapHealthChecks("/api/health/ready", new HealthCheckOptions
{
    Predicate = check => check.Name == "ready",
    ResponseWriter = async (context, report) =>
    {
        context.Response.ContentType = "application/json";
        var response = new
        {
            status = report.Status.ToString(),
            timestamp = DateTime.UtcNow
        };
        await context.Response.WriteAsync(JsonSerializer.Serialize(response));
    }
});

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();
app.MapHub<ContactHub>("/hubs/contacts");

app.Run();
```
















































































I see we are using `async` but we don't forward cancellation tokens. Is this not required anymore? Also what is the most basic way to add authentication? This is a simple app to be used by a single person. 

You're absolutely right! Forwarding cancellation tokens is still a best practice in .NET 9. Let me update the implementation with proper cancellation token usage and add a simple authentication solution.Perfect! I've created a comprehensive guide addressing both of your concerns:

## 1. **Cancellation Tokens** - You're absolutely right!

Forwarding cancellation tokens is still a best practice in .NET 9. I've updated all the code to properly use them:

- **Every async method** now accepts `CancellationToken cancellationToken = default`
- **Controllers automatically receive tokens** from ASP.NET Core
- **All async operations** (database queries, file I/O) forward the token
- **Default parameter values** maintain backward compatibility

Key benefits:
- Proper request cancellation when clients disconnect
- Better resource management
- Prevents unnecessary work when requests are cancelled
- Essential for production applications

## 2. **Simple Authentication Options**

For a single-user application, I've provided three options:

### **Option A: API Key (Recommended for your use case)**
```csharp
// Just add a header to all requests
X-API-Key: your-secret-key
```
- âœ… **Simplest to implement**
- âœ… No login UI needed
- âœ… Configure once and forget
- âœ… Works with HTTP test files easily

### **Option B: Basic Authentication**
```csharp
// Standard HTTP Basic Auth
Authorization: Basic base64(username:password)
```
- âœ… Built into browsers
- âœ… Simple configuration
- âš ï¸ Credentials sent with every request

### **Option C: JWT Token**
```csharp
// Login once, use token
POST /api/auth/login â†’ Get token
Authorization: Bearer {token}
```
- âœ… Most secure and flexible
- âœ… Tokens can expire
- âš ï¸ Requires login UI

## **My Recommendation**

For your single-person use case, **go with API Key authentication**:

1. **Set it in appsettings.json**:
```json
{
  "Auth": {
    "ApiKey": "generate-a-long-random-string-here"
  }
}
```

2. **It's automatically required on all endpoints**
3. **Store the key in your Angular app's environment file**
4. **Use HTTPS in production**

The implementation I provided:
- Uses proper async/await patterns with cancellation
- Includes authentication without over-engineering
- Maintains clean, testable code
- Follows .NET 9 best practices

Would you like me to elaborate on any specific part or help you implement a particular authentication method?
























# Enhanced .NET 9 Implementation with Cancellation Tokens and Simple Authentication

## 1. Proper Cancellation Token Usage

### Updated Service Interface with Cancellation Tokens

```csharp
// Application/Services/IContactService.cs
namespace ContactManager.Application.Services;

public interface IContactService
{
    Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter, CancellationToken cancellationToken = default);
    Task<ContactDto?> GetContactByIdAsync(Guid id, CancellationToken cancellationToken = default);
    Task<ContactDto> CreateContactAsync(CreateContactDto dto, CancellationToken cancellationToken = default);
    Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default);
    Task<ContactDto?> PatchContactAsync(Guid id, JsonPatchDocument<UpdateContactDto> patchDoc, string user, CancellationToken cancellationToken = default);
    Task DeleteContactAsync(Guid id, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> SearchContactsAsync(string query, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> AdvancedSearchAsync(AdvancedSearchDto searchDto, CancellationToken cancellationToken = default);
    Task<List<DuplicateGroupDto>> FindDuplicatesAsync(string fields, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetBirthdaysAsync(int? month, int? day, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetRecentlyContactedAsync(int days, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetFavoritesAsync(CancellationToken cancellationToken = default);
    Task ToggleFavoriteAsync(Guid id, CancellationToken cancellationToken = default);
    Task<string?> UploadAvatarAsync(Guid id, IFormFile file, CancellationToken cancellationToken = default);
    Task DeleteAvatarAsync(Guid id, CancellationToken cancellationToken = default);
    Task<(byte[]? data, string contentType)> GetAvatarAsync(Guid id, CancellationToken cancellationToken = default);
    Task<BulkOperationResultDto> BulkOperationAsync(
        BulkOperationRequestDto<CreateContactDto> request, string user, CancellationToken cancellationToken = default);
}
```

### Updated Service Implementation with Cancellation Tokens

```csharp
// Application/Services/ContactService.cs
public class ContactService : IContactService
{
    private readonly ApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly ILogger<ContactService> _logger;
    private readonly IHubContext<ContactHub, IContactClient> _hubContext;
    
    public ContactService(
        ApplicationDbContext context,
        IMapper mapper,
        ILogger<ContactService> logger,
        IHubContext<ContactHub, IContactClient> hubContext)
    {
        _context = context;
        _mapper = mapper;
        _logger = logger;
        _hubContext = hubContext;
    }
    
    public async Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter, CancellationToken cancellationToken = default)
    {
        var query = _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .AsNoTracking() // Better performance for read-only queries
            .AsQueryable();
        
        // Apply filters
        if (!string.IsNullOrWhiteSpace(filter))
        {
            var filters = JsonSerializer.Deserialize<Dictionary<string, string>>(filter);
            if (filters != null)
            {
                query = ApplyFilters(query, filters);
            }
        }
        
        // Apply sorting
        query = ApplySorting(query, sort);
        
        var totalCount = await query.CountAsync(cancellationToken);
        
        var items = await query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .Select(c => new ContactSummaryDto
            {
                Id = c.Id,
                FirstName = c.FirstName,
                LastName = c.LastName,
                Company = c.Company,
                PrimaryEmail = c.EmailAddresses
                    .Where(e => e.IsPrimary)
                    .Select(e => e.Email)
                    .FirstOrDefault(),
                PrimaryPhone = c.PhoneNumbers
                    .Where(p => p.IsPrimary)
                    .Select(p => p.Number)
                    .FirstOrDefault(),
                IsFavorite = c.IsFavorite,
                Avatar = c.Avatar
            })
            .ToListAsync(cancellationToken);
        
        return new PaginatedResultDto<ContactSummaryDto>
        {
            Items = items,
            PageNumber = pageNumber,
            PageSize = pageSize,
            TotalCount = totalCount,
            TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize),
            HasPreviousPage = pageNumber > 1,
            HasNextPage = pageNumber < (int)Math.Ceiling(totalCount / (double)pageSize)
        };
    }
    
    public async Task<ContactDto?> GetContactByIdAsync(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.SocialProfiles)
            .Include(c => c.CustomFields)
            .Include(c => c.ContactGroups)
                .ThenInclude(cg => cg.Group)
            .Include(c => c.ContactTags)
                .ThenInclude(ct => ct.Tag)
            .AsNoTracking()
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken);
        
        if (contact == null)
            return null;
        
        return _mapper.Map<ContactDto>(contact);
    }
    
    public async Task<ContactDto> CreateContactAsync(CreateContactDto dto, CancellationToken cancellationToken = default)
    {
        var contact = _mapper.Map<Contact>(dto);
        contact.Id = Guid.NewGuid();
        contact.CreatedAt = DateTime.UtcNow;
        contact.UpdatedAt = DateTime.UtcNow;
        contact.CreatedBy = dto.CreatedBy;
        
        // Handle many-to-many relationships
        foreach (var groupId in dto.GroupIds)
        {
            contact.ContactGroups.Add(new ContactGroup 
            { 
                ContactId = contact.Id, 
                GroupId = groupId 
            });
        }
        
        foreach (var tagId in dto.TagIds)
        {
            contact.ContactTags.Add(new ContactTag 
            { 
                ContactId = contact.Id, 
                TagId = tagId 
            });
        }
        
        _context.Contacts.Add(contact);
        await _context.SaveChangesAsync(cancellationToken);
        
        var createdContact = await GetContactByIdAsync(contact.Id, cancellationToken) 
            ?? throw new InvalidOperationException("Failed to retrieve created contact");
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactCreated(createdContact);
        
        return createdContact;
    }
    
    public async Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.SocialProfiles)
            .Include(c => c.CustomFields)
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken);
        
        if (contact == null)
            return null;
        
        _mapper.Map(dto, contact);
        contact.UpdatedAt = DateTime.UtcNow;
        contact.UpdatedBy = dto.UpdatedBy;
        
        await _context.SaveChangesAsync(cancellationToken);
        
        var updatedContact = await GetContactByIdAsync(id, cancellationToken);
        
        if (updatedContact != null)
            await _hubContext.Clients.All.ContactUpdated(updatedContact);
        
        return updatedContact;
    }
    
    public async Task DeleteContactAsync(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts.FindAsync(new object[] { id }, cancellationToken);
        
        if (contact != null)
        {
            _context.Contacts.Remove(contact);
            await _context.SaveChangesAsync(cancellationToken);
            
            await _hubContext.Clients.All.ContactDeleted(id);
        }
    }
    
    public async Task<string?> UploadAvatarAsync(Guid id, IFormFile file, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts.FindAsync(new object[] { id }, cancellationToken);
        if (contact == null)
            return null;
        
        using var memoryStream = new MemoryStream();
        await file.CopyToAsync(memoryStream, cancellationToken);
        
        // Store the image data in the database
        contact.AvatarData = memoryStream.ToArray();
        contact.AvatarContentType = file.ContentType;
        contact.Avatar = $"/api/contacts/{id}/avatar";
        contact.UpdatedAt = DateTime.UtcNow;
        
        await _context.SaveChangesAsync(cancellationToken);
        
        return contact.Avatar;
    }
    
    // Helper methods
    private IQueryable<Contact> ApplyFilters(IQueryable<Contact> query, Dictionary<string, string> filters)
    {
        foreach (var (key, value) in filters)
        {
            query = key.ToLower() switch
            {
                "favorite" => query.Where(c => c.IsFavorite == bool.Parse(value)),
                "company" => query.Where(c => c.Company != null && 
                    c.Company.Contains(value, StringComparison.OrdinalIgnoreCase)),
                "group" => query.Where(c => c.ContactGroups.Any(cg => 
                    cg.GroupId == Guid.Parse(value))),
                "tag" => query.Where(c => c.ContactTags.Any(ct => 
                    ct.TagId == Guid.Parse(value))),
                _ => query
            };
        }
        return query;
    }
    
    private IQueryable<Contact> ApplySorting(IQueryable<Contact> query, string? sort)
    {
        return sort?.ToLower() switch
        {
            "firstname" => query.OrderBy(c => c.FirstName),
            "lastname" => query.OrderBy(c => c.LastName),
            "company" => query.OrderBy(c => c.Company),
            "createdat" => query.OrderByDescending(c => c.CreatedAt),
            "lastcontacted" => query.OrderByDescending(c => c.LastContactedAt),
            _ => query.OrderBy(c => c.LastName).ThenBy(c => c.FirstName)
        };
    }
}
```

### Updated Controller with Cancellation Tokens

```csharp
// API/Controllers/ContactsController.cs
[ApiController]
[Route("api/[controller]")]
[Authorize] // Requires authentication
public class ContactsController : ControllerBase
{
    private readonly IContactService _contactService;
    private readonly IImportExportService _importExportService;
    private readonly IActivityService _activityService;
    
    public ContactsController(
        IContactService contactService,
        IImportExportService importExportService,
        IActivityService activityService)
    {
        _contactService = contactService;
        _importExportService = importExportService;
        _activityService = activityService;
    }
    
    [HttpGet]
    public async Task<ActionResult<PaginatedResultDto<ContactSummaryDto>>> GetContacts(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20,
        [FromQuery] string? sort = "lastName",
        [FromQuery] string? filter = null,
        CancellationToken cancellationToken = default)
    {
        var result = await _contactService.GetPaginatedContactsAsync(
            pageNumber, pageSize, sort, filter, cancellationToken);
        return Ok(result);
    }
    
    [HttpGet("{id}")]
    public async Task<ActionResult<ContactDto>> GetContact(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.GetContactByIdAsync(id, cancellationToken);
        if (contact == null)
            return NotFound();
        
        // Update last viewed
        await _activityService.TrackContactViewAsync(id, GetCurrentUser(), cancellationToken);
        
        return Ok(contact);
    }
    
    [HttpPost]
    public async Task<ActionResult<ContactDto>> CreateContact(
        CreateContactDto dto, 
        CancellationToken cancellationToken = default)
    {
        dto = dto with { CreatedBy = GetCurrentUser() };
        var contact = await _contactService.CreateContactAsync(dto, cancellationToken);
        return CreatedAtAction(nameof(GetContact), new { id = contact.Id }, contact);
    }
    
    [HttpPut("{id}")]
    public async Task<ActionResult<ContactDto>> UpdateContact(
        Guid id, 
        UpdateContactDto dto,
        CancellationToken cancellationToken = default)
    {
        dto = dto with { UpdatedBy = GetCurrentUser() };
        var contact = await _contactService.UpdateContactAsync(id, dto, cancellationToken);
        if (contact == null)
            return NotFound();
        return Ok(contact);
    }
    
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteContact(Guid id, CancellationToken cancellationToken = default)
    {
        await _contactService.DeleteContactAsync(id, cancellationToken);
        return NoContent();
    }
    
    [HttpPost("{id}/avatar")]
    [RequestSizeLimit(5_242_880)] // 5MB limit
    public async Task<ActionResult<string>> UploadAvatar(
        Guid id, 
        [FromForm] IFormFile file,
        CancellationToken cancellationToken = default)
    {
        if (file.Length == 0)
            return BadRequest("File is empty");
        
        var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp" };
        if (!allowedTypes.Contains(file.ContentType))
            return BadRequest("Invalid file type");
        
        var avatarUrl = await _contactService.UploadAvatarAsync(id, file, cancellationToken);
        if (avatarUrl == null)
            return NotFound();
        
        return Ok(new { avatarUrl });
    }
    
    private string GetCurrentUser()
    {
        return User.Identity?.Name ?? "system";
    }
}
```

## 2. Simple Authentication for Single User

### Option A: API Key Authentication (Simplest)

```csharp
// Auth/ApiKeyAuthenticationHandler.cs
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Options;
using System.Security.Claims;
using System.Text.Encodings.Web;

namespace ContactManager.Auth;

public class ApiKeyAuthenticationHandler : AuthenticationHandler<ApiKeyAuthenticationOptions>
{
    private const string ApiKeyHeaderName = "X-API-Key";
    
    public ApiKeyAuthenticationHandler(
        IOptionsMonitor<ApiKeyAuthenticationOptions> options,
        ILoggerFactory logger,
        UrlEncoder encoder)
        : base(options, logger, encoder)
    {
    }
    
    protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        // Check if API key is in header
        if (!Request.Headers.TryGetValue(ApiKeyHeaderName, out var apiKeyHeader))
        {
            // Check if API key is in query string (for convenience)
            if (!Request.Query.TryGetValue("apiKey", out var apiKeyQuery))
            {
                return AuthenticateResult.Fail("API Key not found");
            }
            apiKeyHeader = apiKeyQuery;
        }
        
        var providedApiKey = apiKeyHeader.ToString();
        
        // Validate API key
        if (string.IsNullOrWhiteSpace(providedApiKey) || providedApiKey != Options.ApiKey)
        {
            return AuthenticateResult.Fail("Invalid API Key");
        }
        
        // Create claims
        var claims = new[]
        {
            new Claim(ClaimTypes.Name, "User"),
            new Claim(ClaimTypes.NameIdentifier, "single-user")
        };
        
        var identity = new ClaimsIdentity(claims, Scheme.Name);
        var principal = new ClaimsPrincipal(identity);
        var ticket = new AuthenticationTicket(principal, Scheme.Name);
        
        return AuthenticateResult.Success(ticket);
    }
}

public class ApiKeyAuthenticationOptions : AuthenticationSchemeOptions
{
    public string ApiKey { get; set; } = string.Empty;
}

// Extension method for easier registration
public static class ApiKeyAuthenticationExtensions
{
    public static AuthenticationBuilder AddApiKey(
        this AuthenticationBuilder builder,
        string apiKey)
    {
        return builder.AddScheme<ApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler>(
            "ApiKey",
            options => options.ApiKey = apiKey);
    }
}
```

### Option B: Basic Authentication (Username/Password)

```csharp
// Auth/BasicAuthenticationHandler.cs
using System.Net.Http.Headers;
using System.Text;

namespace ContactManager.Auth;

public class BasicAuthenticationHandler : AuthenticationHandler<BasicAuthenticationOptions>
{
    public BasicAuthenticationHandler(
        IOptionsMonitor<BasicAuthenticationOptions> options,
        ILoggerFactory logger,
        UrlEncoder encoder)
        : base(options, logger, encoder)
    {
    }
    
    protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        // Check for Authorization header
        if (!Request.Headers.ContainsKey("Authorization"))
        {
            return AuthenticateResult.Fail("Missing Authorization Header");
        }
        
        try
        {
            var authHeader = AuthenticationHeaderValue.Parse(Request.Headers["Authorization"]);
            
            if (authHeader.Scheme != "Basic")
            {
                return AuthenticateResult.Fail("Invalid Authentication Scheme");
            }
            
            var credentialBytes = Convert.FromBase64String(authHeader.Parameter ?? string.Empty);
            var credentials = Encoding.UTF8.GetString(credentialBytes).Split(':', 2);
            
            if (credentials.Length != 2)
            {
                return AuthenticateResult.Fail("Invalid Authorization Header");
            }
            
            var username = credentials[0];
            var password = credentials[1];
            
            // Validate credentials
            if (username != Options.Username || password != Options.Password)
            {
                return AuthenticateResult.Fail("Invalid Username or Password");
            }
            
            var claims = new[]
            {
                new Claim(ClaimTypes.Name, username),
                new Claim(ClaimTypes.NameIdentifier, username)
            };
            
            var identity = new ClaimsIdentity(claims, Scheme.Name);
            var principal = new ClaimsPrincipal(identity);
            var ticket = new AuthenticationTicket(principal, Scheme.Name);
            
            return AuthenticateResult.Success(ticket);
        }
        catch
        {
            return AuthenticateResult.Fail("Invalid Authorization Header");
        }
    }
    
    protected override Task HandleChallengeAsync(AuthenticationProperties properties)
    {
        Response.Headers["WWW-Authenticate"] = $"Basic realm=\"Contact Manager\"";
        return base.HandleChallengeAsync(properties);
    }
}

public class BasicAuthenticationOptions : AuthenticationSchemeOptions
{
    public string Username { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
}
```

### Option C: Simple JWT Token (Stateless)

```csharp
// Auth/SimpleJwtService.cs
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace ContactManager.Auth;

public interface ISimpleJwtService
{
    string GenerateToken(string username);
    ClaimsPrincipal? ValidateToken(string token);
}

public class SimpleJwtService : ISimpleJwtService
{
    private readonly IConfiguration _configuration;
    private readonly string _secretKey;
    private readonly string _issuer;
    private readonly string _audience;
    
    public SimpleJwtService(IConfiguration configuration)
    {
        _configuration = configuration;
        _secretKey = configuration["Jwt:SecretKey"] ?? throw new InvalidOperationException("JWT SecretKey not configured");
        _issuer = configuration["Jwt:Issuer"] ?? "ContactManager";
        _audience = configuration["Jwt:Audience"] ?? "ContactManagerUsers";
    }
    
    public string GenerateToken(string username)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_secretKey);
        
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[]
            {
                new Claim(ClaimTypes.Name, username),
                new Claim(ClaimTypes.NameIdentifier, username),
                new Claim("created", DateTime.UtcNow.ToString("o"))
            }),
            Expires = DateTime.UtcNow.AddDays(30), // Long-lived for single user
            Issuer = _issuer,
            Audience = _audience,
            SigningCredentials = new SigningCredentials(
                new SymmetricSecurityKey(key),
                SecurityAlgorithms.HmacSha256Signature)
        };
        
        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }
    
    public ClaimsPrincipal? ValidateToken(string token)
    {
        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);
            
            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = _issuer,
                ValidateAudience = true,
                ValidAudience = _audience,
                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero
            };
            
            var principal = tokenHandler.ValidateToken(token, validationParameters, out _);
            return principal;
        }
        catch
        {
            return null;
        }
    }
}

// Simple login controller
[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly IConfiguration _configuration;
    private readonly ISimpleJwtService _jwtService;
    
    public AuthController(IConfiguration configuration, ISimpleJwtService jwtService)
    {
        _configuration = configuration;
        _jwtService = jwtService;
    }
    
    [HttpPost("login")]
    public IActionResult Login([FromBody] LoginDto dto)
    {
        var configuredUsername = _configuration["Auth:Username"] ?? "admin";
        var configuredPassword = _configuration["Auth:Password"] ?? "password";
        
        if (dto.Username != configuredUsername || dto.Password != configuredPassword)
        {
            return Unauthorized(new { message = "Invalid credentials" });
        }
        
        var token = _jwtService.GenerateToken(dto.Username);
        
        return Ok(new
        {
            token,
            expiresIn = 2592000, // 30 days in seconds
            username = dto.Username
        });
    }
}

public record LoginDto(string Username, string Password);
```

## 3. Program.cs Configuration with Authentication

```csharp
// Program.cs
var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();

// Choose ONE authentication method:

// Option A: API Key Authentication (Simplest)
builder.Services.AddAuthentication("ApiKey")
    .AddApiKey(builder.Configuration["Auth:ApiKey"] ?? "your-secret-api-key-here");

// Option B: Basic Authentication
builder.Services.AddAuthentication("Basic")
    .AddScheme<BasicAuthenticationOptions, BasicAuthenticationHandler>("Basic", options =>
    {
        options.Username = builder.Configuration["Auth:Username"] ?? "admin";
        options.Password = builder.Configuration["Auth:Password"] ?? "password";
    });

// Option C: JWT Authentication
builder.Services.AddSingleton<ISimpleJwtService, SimpleJwtService>();
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        var key = Encoding.ASCII.GetBytes(
            builder.Configuration["Jwt:SecretKey"] ?? "your-256-bit-secret-key-here-minimum-32-characters");
        
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ValidateIssuer = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"] ?? "ContactManager",
            ValidateAudience = true,
            ValidAudience = builder.Configuration["Jwt:Audience"] ?? "ContactManagerUsers",
            ValidateLifetime = true,
            ClockSkew = TimeSpan.Zero
        };
        
        // Support token from query string for SignalR
        options.Events = new JwtBearerEvents
        {
            OnMessageReceived = context =>
            {
                var accessToken = context.Request.Query["access_token"];
                var path = context.HttpContext.Request.Path;
                
                if (!string.IsNullOrEmpty(accessToken) &&
                    path.StartsWithSegments("/hubs"))
                {
                    context.Token = accessToken;
                }
                
                return Task.CompletedTask;
            }
        };
    });

builder.Services.AddAuthorization();

// Configure CORS to include auth headers
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAngularApp",
        policy =>
        {
            policy.WithOrigins(
                    "http://localhost:4200",
                    "https://localhost:4200")
                .AllowAnyMethod()
                .AllowAnyHeader() // Allows Authorization header
                .AllowCredentials()
                .WithExposedHeaders("Content-Disposition"); // For file downloads
        });
});

// Rest of services...
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

// Middleware pipeline
app.UseHttpsRedirection();
app.UseCors("AllowAngularApp");

app.UseAuthentication(); // Must come before UseAuthorization
app.UseAuthorization();

// Optional: Allow anonymous access to health endpoints
app.MapHealthChecks("/api/health").AllowAnonymous();
app.MapHealthChecks("/api/health/ready").AllowAnonymous();

// Optional: Allow anonymous access to auth endpoint if using JWT
if (builder.Configuration["Auth:Method"] == "JWT")
{
    app.MapControllers()
        .RequireAuthorization() // Require auth by default
        .WithMetadata(new AllowAnonymousAttribute()); // Except where specified
}
else
{
    app.MapControllers().RequireAuthorization();
}

app.MapHub<ContactHub>("/hubs/contacts").RequireAuthorization();

app.Run();
```

## 4. Updated appsettings.json

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Database=ContactManager;Username=postgres;Password=yourpassword"
  },
  "Auth": {
    "Method": "ApiKey", // Options: "ApiKey", "Basic", "JWT"
    "ApiKey": "your-secret-api-key-change-this-in-production",
    "Username": "admin",
    "Password": "your-secure-password-here"
  },
  "Jwt": {
    "SecretKey": "your-256-bit-secret-key-here-minimum-32-characters-long",
    "Issuer": "ContactManager",
    "Audience": "ContactManagerUsers"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
```

## 5. Angular Integration Examples

### API Key Authentication in Angular

```typescript
// Angular service with API Key
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiKey = 'your-secret-api-key-change-this-in-production';
  private baseUrl = 'https://localhost:7034/api';
  
  private getHeaders(): HttpHeaders {
    return new HttpHeaders({
      'X-API-Key': this.apiKey,
      'Content-Type': 'application/json'
    });
  }
  
  getContacts() {
    return this.http.get(`${this.baseUrl}/contacts`, {
      headers: this.getHeaders()
    });
  }
}
```

### Basic Authentication in Angular

```typescript
// Angular service with Basic Auth
@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private username = 'admin';
  private password = 'password';
  private baseUrl = 'https://localhost:7034/api';
  
  private getHeaders(): HttpHeaders {
    const credentials = btoa(`${this.username}:${this.password}`);
    return new HttpHeaders({
      'Authorization': `Basic ${credentials}`,
      'Content-Type': 'application/json'
    });
  }
  
  getContacts() {
    return this.http.get(`${this.baseUrl}/contacts`, {
      headers: this.getHeaders()
    });
  }
}
```

### JWT Authentication in Angular

```typescript
// Angular service with JWT
@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private token = signal<string | null>(null);
  private baseUrl = 'https://localhost:7034/api';
  
  constructor(private http: HttpClient) {
    // Load token from localStorage on init
    const savedToken = localStorage.getItem('auth_token');
    if (savedToken) {
      this.token.set(savedToken);
    }
  }
  
  async login(username: string, password: string): Promise<boolean> {
    try {
      const response = await firstValueFrom(
        this.http.post<any>(`${this.baseUrl}/auth/login`, { username, password })
      );
      
      this.token.set(response.token);
      localStorage.setItem('auth_token', response.token);
      return true;
    } catch {
      return false;
    }
  }
  
  logout() {
    this.token.set(null);
    localStorage.removeItem('auth_token');
  }
  
  getAuthHeaders(): HttpHeaders {
    const token = this.token();
    return new HttpHeaders({
      'Authorization': token ? `Bearer ${token}` : '',
      'Content-Type': 'application/json'
    });
  }
}

// HTTP Interceptor for JWT
@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}
  
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = this.authService.token();
    
    if (token) {
      req = req.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
    }
    
    return next.handle(req);
  }
}
```

## 6. Updated HTTP Test File with Authentication

```http
# MyOpenTelemetryApi.http
@host = https://localhost:7034
@contentType = application/json

# For API Key auth
@apiKey = your-secret-api-key-change-this-in-production

# For Basic auth
@username = admin
@password = password

# For JWT auth - first login to get token
@token = {{login.response.body.token}}

################################################
# AUTH ENDPOINTS (if using JWT)
################################################

### Login (JWT only)
# @name login
POST {{host}}/api/auth/login
Content-Type: {{contentType}}

{
  "username": "{{username}}",
  "password": "{{password}}"
}

###

################################################
# HEALTH ENDPOINTS (No auth required)
################################################

### Health Check
GET {{host}}/api/health
Accept: {{contentType}}

###

################################################
# CONTACT ENDPOINTS (Auth required)
################################################

### Get Contacts with API Key
GET {{host}}/api/contacts
X-API-Key: {{apiKey}}
Accept: {{contentType}}

###

### Get Contacts with Basic Auth
GET {{host}}/api/contacts
Authorization: Basic {{$base64 username:password}}
Accept: {{contentType}}

###

### Get Contacts with JWT
GET {{host}}/api/contacts
Authorization: Bearer {{token}}
Accept: {{contentType}}

###

### Create Contact with API Key
POST {{host}}/api/contacts
X-API-Key: {{apiKey}}
Content-Type: {{contentType}}

{
  "firstName": "John",
  "lastName": "Doe",
  "emailAddresses": [
    {
      "email": "john@example.com",
      "type": "Personal",
      "isPrimary": true
    }
  ]
}

###
```

## Summary

### Cancellation Token Best Practices:
1. **Always forward cancellation tokens** through the entire call chain
2. **Use default parameter values** to maintain backward compatibility
3. **Pass tokens to all async operations** (database queries, HTTP calls, file I/O)
4. **Controllers automatically receive tokens** from ASP.NET Core

### Authentication Recommendations:

For a **single-user application**, I recommend:

1. **API Key (Simplest)**: 
   - âœ… No login UI needed
   - âœ… Easy to implement
   - âœ… Works with all clients
   - âš ï¸ Key must be kept secret
   - ðŸ“± Store key in environment variables

2. **Basic Auth (Simple but Standard)**:
   - âœ… Built into browsers
   - âœ… No token management
   - âš ï¸ Credentials sent with every request
   - ðŸ“± Use HTTPS always

3. **JWT (Most Flexible)**:
   - âœ… Stateless
   - âœ… Can expire and refresh
   - âœ… Industry standard
   - âš ï¸ Requires login UI
   - ðŸ“± Good for web apps

For your use case (single person), **API Key** is probably the best choice - simple, secure enough with HTTPS, and no login UI needed.


================================================================================
FILE: docs\llm.md
SIZE: 46.33 KB
MODIFIED: 10/06/2025 17:03:43
================================================================================

that's right the windows machine doesn't have docker but virginia the debian machine has docker err I mean podman same difference 
let us review this

kushal@virginia:~$
kushal@virginia:~$ podman ps -a
CONTAINER ID  IMAGE                                    COMMAND     CREATED     STATUS               PORTS                             NAMES
57c23e1715b2  docker.io/library/postgres:16-alpine     postgres    2 days ago  Up 2 days (healthy)  0.0.0.0:5432->5432/tcp            myotel-postgres
4c80486da197  localhost/myopentelemetryapi_api:latest              2 days ago  Up 2 days (healthy)  0.0.0.0:5174->8080/tcp, 8081/tcp  myotel-api
kushal@virginia:~$ cd ~/src/dotnet/MyOpenTelemetryApi/; time podman-compose down; git status; git remote show origin; git fetch; git status; git pull; git status; time podman-compose -f podman-compose.yml up --build -d
myotel-api
myotel-postgres
myotel-api
myotel-postgres
99aaed22f3e4cd58036f33263f4e3d48b261a168127bbb5b307aa11ca4582c3c
myopentelemetryapi_myotel-network

real    0m1.789s
user    0m0.833s
sys     0m0.413s
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
* remote origin
  Fetch URL: https://github.com/collabskus/MyOpenTelemetryApi
  Push  URL: https://github.com/collabskus/MyOpenTelemetryApi
  HEAD branch: main
  Remote branches:
    main                                                                                           tracked
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.16 stale (use 'git remote prune' to remove)
  Local branch configured for 'git pull':
    main merges with remote main
  Local ref configured for 'git push':
    main pushes to main (local out of date)
remote: Enumerating objects: 376, done.
remote: Counting objects: 100% (14/14), done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 376 (delta 7), reused 10 (delta 6), pack-reused 362 (from 2)
Receiving objects: 100% (376/376), 903.71 KiB | 4.11 MiB/s, done.
Resolving deltas: 100% (231/231), completed with 3 local objects.
From https://github.com/collabskus/MyOpenTelemetryApi
   4f11177..bd0ead8  main       -> origin/main
On branch main
Your branch is behind 'origin/main' by 95 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)

nothing to commit, working tree clean
Updating 4f11177..bd0ead8
Fast-forward
 .github/workflows/ci.yml                                                                     |    64 +-
 Directory.Build.props                                                                        |    16 +
 Directory.Build.targets                                                                      |    58 +
 Directory.Packages.props                                                                     |    59 +
 Dockerfile                                                                                   |    42 +-
 Dockerfile.migrations                                                                        |    14 +-
 docker-compose.yml                                                                           |    76 +-
 docs/Windows PowerShell.txt                                                                  |   288 +
 docs/firewall.png                                                                            |   Bin 0 -> 29348 bytes
 docs/llm.md                                                                                  |   125 +
 docs/log-sample.txt                                                                          |  8925 +++++++++++++++++++++++++
 docs/scratch.md                                                                              |  9362 ++++++++++++++++++++++++++
 my_project_export.txt                                                                        | 38181 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj                                     |    55 +-
 src/MyOpenTelemetryApi.Api/Program.cs                                                        |     9 +-
 src/MyOpenTelemetryApi.Api/Properties/launchSettings.json                                    |    40 +-
 src/MyOpenTelemetryApi.Application/MyOpenTelemetryApi.Application.csproj                     |    18 +-
 src/MyOpenTelemetryApi.Application/Services/ContactService.cs                                |   138 +-
 src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj                               |     6 +-
 src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj               |    14 +-
 tests/MyOpenTelemetryApi.Api.Tests/MyOpenTelemetryApi.Api.Tests.csproj                       |    19 +-
 tests/MyOpenTelemetryApi.Application.Tests/MyOpenTelemetryApi.Application.Tests.csproj       |    24 +-
 tests/MyOpenTelemetryApi.Infrastructure.Tests/MyOpenTelemetryApi.Infrastructure.Tests.csproj |    21 +-
 23 files changed, 56875 insertions(+), 679 deletions(-)
 create mode 100644 Directory.Build.props
 create mode 100644 Directory.Build.targets
 create mode 100644 Directory.Packages.props
 create mode 100644 docs/Windows PowerShell.txt
 create mode 100644 docs/firewall.png
 create mode 100644 docs/llm.md
 create mode 100644 docs/log-sample.txt
 create mode 100644 docs/scratch.md
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
[1/2] STEP 1/11: FROM mcr.microsoft.com/dotnet/sdk:10.0 AS build
[1/2] STEP 2/11: WORKDIR /src
--> Using cache c734d7b1e551535267151f5976d85d6bc25ec891c718d754863db1fcc85c2ab2
--> c734d7b1e551
[1/2] STEP 3/11: COPY ["Directory.Build.props", "./"]
--> 806e7c5a736f
[1/2] STEP 4/11: COPY ["Directory.Packages.props", "./"]
--> 4419c188d9f6
[1/2] STEP 5/11: COPY ["src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj", "MyOpenTelemetryApi.Api/"]
--> 84b6c5c88fbc
[1/2] STEP 6/11: COPY ["src/MyOpenTelemetryApi.Application/MyOpenTelemetryApi.Application.csproj", "MyOpenTelemetryApi.Application/"]
--> 018a97599a17
[1/2] STEP 7/11: COPY ["src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj", "MyOpenTelemetryApi.Domain/"]
--> 3104bf6746ef
[1/2] STEP 8/11: COPY ["src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj", "MyOpenTelemetryApi.Infrastructure/"]
--> 938de8affc26
[1/2] STEP 9/11: RUN dotnet restore "MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj"
  Determining projects to restore...
  Restored /src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj (in 310 ms).
  Restored /src/MyOpenTelemetryApi.Application/MyOpenTelemetryApi.Application.csproj (in 3.46 sec).
  Restored /src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj (in 5.49 sec).
  Restored /src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj (in 5.49 sec).
--> 4549e50d527f
[1/2] STEP 10/11: COPY src/ .
--> ab70374905a5
[1/2] STEP 11/11: RUN dotnet publish "MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj" -c Release -o /app/publish
  Determining projects to restore...
  All projects are up-to-date for restore.
/usr/share/dotnet/sdk/10.0.100-rc.1.25451.107/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(345,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj]
/usr/share/dotnet/sdk/10.0.100-rc.1.25451.107/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(345,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj]
/usr/share/dotnet/sdk/10.0.100-rc.1.25451.107/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(345,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj]
  MyOpenTelemetryApi.Domain -> /src/MyOpenTelemetryApi.Domain/bin/Release/net10.0/MyOpenTelemetryApi.Domain.dll
  MyOpenTelemetryApi.Application -> /src/MyOpenTelemetryApi.Application/bin/Release/net10.0/MyOpenTelemetryApi.Application.dll
  MyOpenTelemetryApi.Infrastructure -> /src/MyOpenTelemetryApi.Infrastructure/bin/Release/net10.0/MyOpenTelemetryApi.Infrastructure.dll
  MyOpenTelemetryApi.Api -> /src/MyOpenTelemetryApi.Api/bin/Release/net10.0/MyOpenTelemetryApi.Api.dll
  MyOpenTelemetryApi.Api -> /app/publish/
--> 516bffb0cd22
[2/2] STEP 1/9: FROM mcr.microsoft.com/dotnet/aspnet:10.0
[2/2] STEP 2/9: WORKDIR /app
--> Using cache 601ef07a6b33606b1ec38699803b23bcb77b1ff822df320047fb42112e09bf27
--> 601ef07a6b33
[2/2] STEP 3/9: RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
Get:1 http://archive.ubuntu.com/ubuntu noble InRelease [256 kB]
Get:2 http://security.ubuntu.com/ubuntu noble-security InRelease [126 kB]
Get:3 http://archive.ubuntu.com/ubuntu noble-updates InRelease [126 kB]
Get:4 http://security.ubuntu.com/ubuntu noble-security/main amd64 Packages [1519 kB]
Get:5 http://archive.ubuntu.com/ubuntu noble-backports InRelease [126 kB]
Get:6 http://archive.ubuntu.com/ubuntu noble/main amd64 Packages [1808 kB]
Get:7 http://security.ubuntu.com/ubuntu noble-security/universe amd64 Packages [1138 kB]
Get:8 http://security.ubuntu.com/ubuntu noble-security/restricted amd64 Packages [2478 kB]
Get:9 http://archive.ubuntu.com/ubuntu noble/universe amd64 Packages [19.3 MB]
Get:10 http://security.ubuntu.com/ubuntu noble-security/multiverse amd64 Packages [34.6 kB]
Get:11 http://archive.ubuntu.com/ubuntu noble/restricted amd64 Packages [117 kB]
Get:12 http://archive.ubuntu.com/ubuntu noble/multiverse amd64 Packages [331 kB]
Get:13 http://archive.ubuntu.com/ubuntu noble-updates/restricted amd64 Packages [2612 kB]
Get:14 http://archive.ubuntu.com/ubuntu noble-updates/universe amd64 Packages [1924 kB]
Get:15 http://archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 Packages [38.9 kB]
Get:16 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 Packages [1882 kB]
Get:17 http://archive.ubuntu.com/ubuntu noble-backports/universe amd64 Packages [33.9 kB]
Get:18 http://archive.ubuntu.com/ubuntu noble-backports/main amd64 Packages [49.4 kB]
Fetched 33.9 MB in 4s (7979 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  krb5-locales libbrotli1 libcurl4t64 libgssapi-krb5-2 libk5crypto3
  libkeyutils1 libkrb5-3 libkrb5support0 libldap-common libldap2 libnghttp2-14
  libpsl5t64 librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh-4
  publicsuffix
Suggested packages:
  krb5-doc krb5-user libsasl2-modules-gssapi-mit
  | libsasl2-modules-gssapi-heimdal libsasl2-modules-ldap libsasl2-modules-otp
  libsasl2-modules-sql
The following NEW packages will be installed:
  curl krb5-locales libbrotli1 libcurl4t64 libgssapi-krb5-2 libk5crypto3
  libkeyutils1 libkrb5-3 libkrb5support0 libldap-common libldap2 libnghttp2-14
  libpsl5t64 librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh-4
  publicsuffix
0 upgraded, 19 newly installed, 0 to remove and 3 not upgraded.
Need to get 2405 kB of archives.
After this operation, 6886 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 krb5-locales all 1.20.1-6ubuntu2.6 [14.8 kB]
Get:2 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libkrb5support0 amd64 1.20.1-6ubuntu2.6 [34.4 kB]
Get:3 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libk5crypto3 amd64 1.20.1-6ubuntu2.6 [82.0 kB]
Get:4 http://archive.ubuntu.com/ubuntu noble/main amd64 libkeyutils1 amd64 1.6.3-3build1 [9490 B]
Get:5 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libkrb5-3 amd64 1.20.1-6ubuntu2.6 [348 kB]
Get:6 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libgssapi-krb5-2 amd64 1.20.1-6ubuntu2.6 [143 kB]
Get:7 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libnghttp2-14 amd64 1.59.0-1ubuntu0.2 [74.3 kB]
Get:8 http://archive.ubuntu.com/ubuntu noble/main amd64 libpsl5t64 amd64 0.21.2-1.1build1 [57.1 kB]
Get:9 http://archive.ubuntu.com/ubuntu noble/main amd64 publicsuffix all 20231001.0357-0.1 [129 kB]
Get:10 http://archive.ubuntu.com/ubuntu noble/main amd64 libbrotli1 amd64 1.1.0-2build2 [331 kB]
Get:11 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libsasl2-modules-db amd64 2.1.28+dfsg1-5ubuntu3.1 [20.4 kB]
Get:12 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libsasl2-2 amd64 2.1.28+dfsg1-5ubuntu3.1 [53.2 kB]
Get:13 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libldap2 amd64 2.6.7+dfsg-1~exp1ubuntu8.2 [196 kB]
Get:14 http://archive.ubuntu.com/ubuntu noble/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-2build7 [56.3 kB]
Get:15 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libssh-4 amd64 0.10.6-2ubuntu0.1 [188 kB]
Get:16 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libcurl4t64 amd64 8.5.0-2ubuntu10.6 [341 kB]
Get:17 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 curl amd64 8.5.0-2ubuntu10.6 [226 kB]
Get:18 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libldap-common all 2.6.7+dfsg-1~exp1ubuntu8.2 [31.7 kB]
Get:19 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libsasl2-modules amd64 2.1.28+dfsg1-5ubuntu3.1 [69.9 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 2405 kB in 2s (1347 kB/s)
Selecting previously unselected package krb5-locales.
(Reading database ... 6136 files and directories currently installed.)
Preparing to unpack .../00-krb5-locales_1.20.1-6ubuntu2.6_all.deb ...
Unpacking krb5-locales (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libkrb5support0:amd64.
Preparing to unpack .../01-libkrb5support0_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libkrb5support0:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libk5crypto3:amd64.
Preparing to unpack .../02-libk5crypto3_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libk5crypto3:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libkeyutils1:amd64.
Preparing to unpack .../03-libkeyutils1_1.6.3-3build1_amd64.deb ...
Unpacking libkeyutils1:amd64 (1.6.3-3build1) ...
Selecting previously unselected package libkrb5-3:amd64.
Preparing to unpack .../04-libkrb5-3_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libkrb5-3:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libgssapi-krb5-2:amd64.
Preparing to unpack .../05-libgssapi-krb5-2_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libgssapi-krb5-2:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../06-libnghttp2-14_1.59.0-1ubuntu0.2_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.59.0-1ubuntu0.2) ...
Selecting previously unselected package libpsl5t64:amd64.
Preparing to unpack .../07-libpsl5t64_0.21.2-1.1build1_amd64.deb ...
Unpacking libpsl5t64:amd64 (0.21.2-1.1build1) ...
Selecting previously unselected package publicsuffix.
Preparing to unpack .../08-publicsuffix_20231001.0357-0.1_all.deb ...
Unpacking publicsuffix (20231001.0357-0.1) ...
Selecting previously unselected package libbrotli1:amd64.
Preparing to unpack .../09-libbrotli1_1.1.0-2build2_amd64.deb ...
Unpacking libbrotli1:amd64 (1.1.0-2build2) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../10-libsasl2-modules-db_2.1.28+dfsg1-5ubuntu3.1_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../11-libsasl2-2_2.1.28+dfsg1-5ubuntu3.1_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Selecting previously unselected package libldap2:amd64.
Preparing to unpack .../12-libldap2_2.6.7+dfsg-1~exp1ubuntu8.2_amd64.deb ...
Unpacking libldap2:amd64 (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../13-librtmp1_2.4+20151223.gitfa8646d.1-2build7_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2build7) ...
Selecting previously unselected package libssh-4:amd64.
Preparing to unpack .../14-libssh-4_0.10.6-2ubuntu0.1_amd64.deb ...
Unpacking libssh-4:amd64 (0.10.6-2ubuntu0.1) ...
Selecting previously unselected package libcurl4t64:amd64.
Preparing to unpack .../15-libcurl4t64_8.5.0-2ubuntu10.6_amd64.deb ...
Unpacking libcurl4t64:amd64 (8.5.0-2ubuntu10.6) ...
Selecting previously unselected package curl.
Preparing to unpack .../16-curl_8.5.0-2ubuntu10.6_amd64.deb ...
Unpacking curl (8.5.0-2ubuntu10.6) ...
Selecting previously unselected package libldap-common.
Preparing to unpack .../17-libldap-common_2.6.7+dfsg-1~exp1ubuntu8.2_all.deb ...
Unpacking libldap-common (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Selecting previously unselected package libsasl2-modules:amd64.
Preparing to unpack .../18-libsasl2-modules_2.1.28+dfsg1-5ubuntu3.1_amd64.deb ...
Unpacking libsasl2-modules:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up libkeyutils1:amd64 (1.6.3-3build1) ...
Setting up libbrotli1:amd64 (1.1.0-2build2) ...
Setting up libsasl2-modules:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up libpsl5t64:amd64 (0.21.2-1.1build1) ...
Setting up libnghttp2-14:amd64 (1.59.0-1ubuntu0.2) ...
Setting up krb5-locales (1.20.1-6ubuntu2.6) ...
Setting up libldap-common (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Setting up libkrb5support0:amd64 (1.20.1-6ubuntu2.6) ...
Setting up libsasl2-modules-db:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2build7) ...
Setting up libk5crypto3:amd64 (1.20.1-6ubuntu2.6) ...
Setting up libsasl2-2:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up libkrb5-3:amd64 (1.20.1-6ubuntu2.6) ...
Setting up publicsuffix (20231001.0357-0.1) ...
Setting up libldap2:amd64 (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Setting up libgssapi-krb5-2:amd64 (1.20.1-6ubuntu2.6) ...
Setting up libssh-4:amd64 (0.10.6-2ubuntu0.1) ...
Setting up libcurl4t64:amd64 (8.5.0-2ubuntu10.6) ...
Setting up curl (8.5.0-2ubuntu10.6) ...
Processing triggers for libc-bin (2.39-0ubuntu8.6) ...
--> ccacbb7cedbc
[2/2] STEP 4/9: COPY --from=build /app/publish .
--> 39b8c44daaa7
[2/2] STEP 5/9: RUN mkdir -p /app/logs && chmod 777 /app/logs
--> 89cb17dbc805
[2/2] STEP 6/9: USER app
--> 921d2bb37a55
[2/2] STEP 7/9: EXPOSE 8080
--> c904b479d829
[2/2] STEP 8/9: EXPOSE 8081
--> e06d16c5fe49
[2/2] STEP 9/9: ENTRYPOINT ["dotnet", "MyOpenTelemetryApi.Api.dll"]
[2/2] COMMIT myopentelemetryapi_api
--> b598ff7cf1fc
Successfully tagged localhost/myopentelemetryapi_api:latest
b598ff7cf1fc688ca546dc72cb1f2f8d007145f0cca4c0bf8964c49393d7b979
6b9b5d3a556b349b7683558a0107c3a1c226143d46630cc645ef69348f560021
5a67e9ce01cdce780cc2bfda92230a2b6242df0316cd36bf8e81d425c9ac34da
myotel-postgres
b3d68f9bb4f3e9b59d39238565fbbd2e8abf1039afc2d0724a596783d205a3e7
myotel-api

real    1m6.525s
user    1m10.982s
sys     0m15.256s
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$ podman ps -a
CONTAINER ID  IMAGE                                    COMMAND     CREATED        STATUS                   PORTS                             NAMES
5a67e9ce01cd  docker.io/library/postgres:16-alpine     postgres    7 seconds ago  Up 7 seconds (healthy)   0.0.0.0:5432->5432/tcp            myotel-postgres
b3d68f9bb4f3  localhost/myopentelemetryapi_api:latest              6 seconds ago  Up 6 seconds (starting)  0.0.0.0:5174->8080/tcp, 8081/tcp  myotel-api
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$ podman ps -a
CONTAINER ID  IMAGE                                    COMMAND     CREATED             STATUS                       PORTS                             NAMES
5a67e9ce01cd  docker.io/library/postgres:16-alpine     postgres    About a minute ago  Up About a minute (healthy)  0.0.0.0:5432->5432/tcp            myotel-postgres
b3d68f9bb4f3  localhost/myopentelemetryapi_api:latest              About a minute ago  Up About a minute (healthy)  0.0.0.0:5174->8080/tcp, 8081/tcp  myotel-api
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$








Great! Your Virginia Debian server successfully pulled 95 commits and rebuilt/redeployed both containers. Let me break down what happened:

## Deployment Summary

**Git Update:**
- Was 95 commits behind (`4f11177..bd0ead8`)
- Fast-forwarded successfully
- Pulled 376 objects (903.71 KiB)

**Major Changes Pulled:**
- New centralized package management (`Directory.Build.props`, `Directory.Packages.props`, `Directory.Build.targets`)
- Updated CI/CD workflows
- Enhanced Dockerfile with health checks and proper user permissions
- Massive documentation additions (38K+ lines in `my_project_export.txt`)
- Various project file updates across all layers

**Container Status:**
Both containers are now **healthy** and running:
- `myotel-postgres` (5a67e9ce01cd) - PostgreSQL 16 on port 5432
- `myotel-api` (b3d68f9bb4f3) - Your API on port 5174

**Build Time:**
- Total deployment: ~1 minute 7 seconds
- Clean shutdown: ~1.8 seconds
- Build and startup: remainder

## What's Different Now

The deployment includes your recent work on:
1. Centralized package version management
2. Updated health check configurations
3. Improved logging directory permissions (`/app/logs` with 777 permissions)
4. Running as non-root `app` user for security

Everything looks clean - no errors, both containers healthy. Ready to test the API at `http://192.168.0.76:5174`! ðŸš€

Want me to help you verify the deployment or test any specific endpoints?



Good idea. 
kushal@texas:~$ cat ~/mybashscripts/insert-contacts.sh; time for ((i=1; i<=10; i++)); do time bash ~/mybashscripts/insert-contacts.sh; date; sleep 1; done
#!/bin/bash

# API Configuration
API_BASE="http://192.168.0.76:5174/api"

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to generate timestamp
get_timestamp() {
    date +"%Y-%m-%d-%H-%M-%S"
}

# Function to make API calls with error handling
api_post() {
    local endpoint=$1
    local data=$2
    local response=$(curl -s -w "\n%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        -d "$data" \
        "${API_BASE}${endpoint}")

    local body=$(echo "$response" | head -n -1)
    local status=$(echo "$response" | tail -n 1)

    if [ "$status" -ge 200 ] && [ "$status" -lt 300 ]; then
        echo "$body"
        return 0
    else
        echo "Error: HTTP $status - $body" >&2
        return 1
    fi
}

# Function to extract ID from JSON response
extract_id() {
    local json=$1
    echo "$json" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"\([^"]*\)"/\1/'
}

# Function to create a tag
create_tag() {
    local ts=$1
    local name=$2
    local color=$3

    echo -e "${YELLOW}Creating tag: $name-$ts${NC}" >&2

    local data=$(cat <<EOF
{
  "name": "$name-$ts",
  "colorHex": "$color"
}
EOF
)

    local result=$(api_post "/Tags" "$data")
    if [ $? -eq 0 ]; then
        local tag_id=$(extract_id "$result")
        echo -e "${GREEN}âœ“ Tag created: $tag_id${NC}" >&2
        echo "$tag_id"
    else
        echo -e "${RED}âœ— Failed to create tag${NC}" >&2
        echo ""
        return 1
    fi
}

# Function to create a group
create_group() {
    local ts=$1
    local name=$2
    local desc=$3

    echo -e "${YELLOW}Creating group: $name-$ts${NC}" >&2

    local data=$(cat <<EOF
{
  "name": "$name-$ts",
  "description": "$desc-$ts"
}
EOF
)

    local result=$(api_post "/Groups" "$data")
    if [ $? -eq 0 ]; then
        local group_id=$(extract_id "$result")
        echo -e "${GREEN}âœ“ Group created: $group_id${NC}" >&2
        echo "$group_id"
    else
        echo -e "${RED}âœ— Failed to create group${NC}" >&2
        echo ""
        return 1
    fi
}

# Function to create a contact
create_contact() {
    local ts=$1
    local firstname=$2
    local lastname=$3
    local company=$4
    local group_ids=$5
    local tag_ids=$6

    echo -e "${YELLOW}Creating contact: $firstname-$ts $lastname-$ts${NC}" >&2

    local data=$(cat <<EOF
{
  "firstName": "$firstname-$ts",
  "lastName": "$lastname-$ts",
  "middleName": "Middle-$ts",
  "nickname": "Nick-$ts",
  "company": "$company-$ts",
  "jobTitle": "Developer-$ts",
  "dateOfBirth": "1990-01-15T00:00:00Z",
  "notes": "Test contact created at $ts",
  "emailAddresses": [
    {
      "email": "${firstname,,}.${lastname,,}-$ts@gmail.com",
      "type": "Personal",
      "isPrimary": true
    },
    {
      "email": "${firstname,,}.${lastname,,}-$ts@work.com",
      "type": "Work",
      "isPrimary": false
    }
  ],
  "phoneNumbers": [
    {
      "number": "+1-555-0100-$ts",
      "type": "Mobile",
      "isPrimary": true
    },
    {
      "number": "+1-555-0200-$ts",
      "type": "Work",
      "isPrimary": false
    }
  ],
  "addresses": [
    {
      "streetLine1": "123 Main St-$ts",
      "streetLine2": "Apt 4B",
      "city": "Newport News",
      "stateProvince": "VA",
      "postalCode": "23601",
      "country": "USA",
      "type": "Home",
      "isPrimary": true
    },
    {
      "streetLine1": "456 Business Blvd-$ts",
      "streetLine2": "Suite 100",
      "city": "Norfolk",
      "stateProvince": "VA",
      "postalCode": "23510",
      "country": "USA",
      "type": "Work",
      "isPrimary": false
    }
  ],
  "groupIds": [$group_ids],
  "tagIds": [$tag_ids]
}
EOF
)

    local result=$(api_post "/Contacts" "$data")
    if [ $? -eq 0 ]; then
        local contact_id=$(extract_id "$result")
        echo -e "${GREEN}âœ“ Contact created: $contact_id${NC}" >&2
        echo "$contact_id"
    else
        echo -e "${RED}âœ— Failed to create contact${NC}" >&2
        echo ""
        return 1
    fi
}

# Main execution
echo -e "${GREEN}=== Starting API Data Generation ===${NC}"
echo ""

# Generate single timestamp for this run
TIMESTAMP=$(get_timestamp)
echo -e "Using timestamp: ${YELLOW}$TIMESTAMP${NC}"
echo ""

# Create Tags
echo -e "${GREEN}--- Creating Tags ---${NC}"
TAG1=$(create_tag "$TIMESTAMP" "Important" "#FF0000")
TAG2=$(create_tag "$TIMESTAMP" "VIP" "#FFD700")
TAG3=$(create_tag "$TIMESTAMP" "Follow-Up" "#00FF00")
echo ""

# Check if tags were created
if [ -z "$TAG1" ] || [ -z "$TAG2" ] || [ -z "$TAG3" ]; then
    echo -e "${RED}Failed to create tags. Exiting.${NC}"
    exit 1
fi

# Create Groups
echo -e "${GREEN}--- Creating Groups ---${NC}"
GROUP1=$(create_group "$TIMESTAMP" "Family" "Family members")
GROUP2=$(create_group "$TIMESTAMP" "Colleagues" "Work colleagues")
GROUP3=$(create_group "$TIMESTAMP" "Friends" "Close friends")
echo ""

# Check if groups were created
if [ -z "$GROUP1" ] || [ -z "$GROUP2" ] || [ -z "$GROUP3" ]; then
    echo -e "${RED}Failed to create groups. Exiting.${NC}"
    exit 1
fi

# Prepare IDs for contacts
TAG_IDS="\"$TAG1\",\"$TAG2\""
GROUP_IDS="\"$GROUP1\",\"$GROUP2\""

# Create Contacts
echo -e "${GREEN}--- Creating Contacts ---${NC}"
CONTACT1=$(create_contact "$TIMESTAMP" "Adam" "West" "Wayne Enterprises" "$GROUP_IDS" "$TAG_IDS")
echo ""

CONTACT2=$(create_contact "$TIMESTAMP" "Bruce" "Banner" "Stark Industries" "\"$GROUP2\"" "\"$TAG1\",\"$TAG3\"")
echo ""

CONTACT3=$(create_contact "$TIMESTAMP" "Diana" "Prince" "Themyscira Inc" "\"$GROUP1\",\"$GROUP3\"" "\"$TAG2\"")
echo ""

CONTACT4=$(create_contact "$TIMESTAMP" "Peter" "Parker" "Daily Bugle" "\"$GROUP3\"" "\"$TAG3\"")
echo ""

CONTACT5=$(create_contact "$TIMESTAMP" "Clark" "Kent" "Daily Planet" "$GROUP_IDS" "\"$TAG1\",\"$TAG2\",\"$TAG3\"")
echo ""

echo -e "${GREEN}=== Data Generation Complete ===${NC}"
echo ""
echo -e "${YELLOW}Summary:${NC}"
echo "Timestamp used: $TIMESTAMP"
echo "Tags created: 3"
echo "Groups created: 3"
echo "Contacts created: 5"
echo ""
echo -e "${GREEN}All data has been inserted successfully!${NC}"

=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-29

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-29
âœ“ Tag created: 935c4224-793f-45ec-a1d4-242193383fcb
Creating tag: VIP-2025-10-06-16-31-29
âœ“ Tag created: c188c6ed-9224-47b9-9fc9-eb1134776006
Creating tag: Follow-Up-2025-10-06-16-31-29
âœ“ Tag created: ad8f15dd-78fe-446a-900a-48532e2a1ac6

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-29
âœ“ Group created: 9d00e5a2-9db9-4668-9a7f-21aba2b6507a
Creating group: Colleagues-2025-10-06-16-31-29
âœ“ Group created: 15354523-ebe4-4dc9-b04d-0c77396aa245
Creating group: Friends-2025-10-06-16-31-29
âœ“ Group created: 81146300-976f-4a4e-a68c-db3ec732680f

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-29 West-2025-10-06-16-31-29
âœ“ Contact created: 6089f707-37ea-4d28-a700-d34918da4660

Creating contact: Bruce-2025-10-06-16-31-29 Banner-2025-10-06-16-31-29
âœ“ Contact created: 3412fff6-7baa-46a6-83fa-fb5bddc781f7

Creating contact: Diana-2025-10-06-16-31-29 Prince-2025-10-06-16-31-29
âœ“ Contact created: 082ded46-9c91-4486-84f3-f8a1a3aab420

Creating contact: Peter-2025-10-06-16-31-29 Parker-2025-10-06-16-31-29
âœ“ Contact created: 3b6ba5e3-ecf6-4aac-8de3-cb691ffacf53

Creating contact: Clark-2025-10-06-16-31-29 Kent-2025-10-06-16-31-29
âœ“ Contact created: 9d171076-0e59-4d94-9847-0919bd1cf70b

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-29
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.801s
user    0m0.231s
sys     0m0.111s
Mon Oct  6 04:31:29 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-30

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-30
âœ“ Tag created: f310e07b-3cee-467c-b671-0760c81a335c
Creating tag: VIP-2025-10-06-16-31-30
âœ“ Tag created: 2a886c31-6f3c-4375-a3aa-1fc9266a7fa5
Creating tag: Follow-Up-2025-10-06-16-31-30
âœ“ Tag created: 3e5484fc-bae7-465c-8b4e-62b0d4d01708

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-30
âœ“ Group created: 0ceda88b-f426-46e2-8756-ffced4204402
Creating group: Colleagues-2025-10-06-16-31-30
âœ“ Group created: 624de489-4d0d-4308-b2c3-449d535dcf7f
Creating group: Friends-2025-10-06-16-31-30
âœ“ Group created: ade31416-3522-4bee-877a-fad1f27b4419

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-30 West-2025-10-06-16-31-30
âœ“ Contact created: 4e9c6411-4218-4afc-a778-d75d2f43f19d

Creating contact: Bruce-2025-10-06-16-31-30 Banner-2025-10-06-16-31-30
âœ“ Contact created: 5df1cfeb-7ecb-4b1d-90ed-1a51341239f0

Creating contact: Diana-2025-10-06-16-31-30 Prince-2025-10-06-16-31-30
âœ“ Contact created: 71cafa08-af60-4989-b63a-1949668606a6

Creating contact: Peter-2025-10-06-16-31-30 Parker-2025-10-06-16-31-30
âœ“ Contact created: 1eda4c94-d061-435c-93a9-adb29a7130b4

Creating contact: Clark-2025-10-06-16-31-30 Kent-2025-10-06-16-31-30
âœ“ Contact created: eb8dfec9-9dd0-4bdd-b39f-bef43d67e1de

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-30
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.760s
user    0m0.240s
sys     0m0.094s
Mon Oct  6 04:31:31 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-32

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-32
âœ“ Tag created: 40c8ae99-660d-4ede-b4f9-c593259fe918
Creating tag: VIP-2025-10-06-16-31-32
âœ“ Tag created: d2b184b1-9bee-432e-992b-feca1e6ca4f0
Creating tag: Follow-Up-2025-10-06-16-31-32
âœ“ Tag created: 0b72ea55-eb0b-4f84-a024-27fb7e96162f

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-32
âœ“ Group created: f53dfc23-4e6b-4b76-a2b5-d8f327c67cdb
Creating group: Colleagues-2025-10-06-16-31-32
âœ“ Group created: b17ee173-92c6-4bf9-8b5f-be6f288785d5
Creating group: Friends-2025-10-06-16-31-32
âœ“ Group created: 5612ef3e-7c36-48bd-b4e6-6c3a19c8b674

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-32 West-2025-10-06-16-31-32
âœ“ Contact created: a9f43e35-cd36-4435-9dfa-19cecd9fb149

Creating contact: Bruce-2025-10-06-16-31-32 Banner-2025-10-06-16-31-32
âœ“ Contact created: 4ae76363-ad3a-46ea-8ffe-57db5e66c789

Creating contact: Diana-2025-10-06-16-31-32 Prince-2025-10-06-16-31-32
âœ“ Contact created: 4c6c38e5-65af-4f0c-93e3-f2d7dc0581cb

Creating contact: Peter-2025-10-06-16-31-32 Parker-2025-10-06-16-31-32
âœ“ Contact created: 4c37a494-9df8-40d6-a13e-6693074816d2

Creating contact: Clark-2025-10-06-16-31-32 Kent-2025-10-06-16-31-32
âœ“ Contact created: 5505fc1a-d9f5-4cc7-8b4d-fdebc10c50f1

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-32
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.760s
user    0m0.235s
sys     0m0.106s
Mon Oct  6 04:31:33 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-34

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-34
âœ“ Tag created: 32531ee6-8d12-4926-b2db-ce75cdd3f934
Creating tag: VIP-2025-10-06-16-31-34
âœ“ Tag created: 8b38f0b5-1fa8-470e-97d4-f18071b9197c
Creating tag: Follow-Up-2025-10-06-16-31-34
âœ“ Tag created: 05a3ea2f-65a1-48c1-b4fc-b0d1bc3a863a

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-34
âœ“ Group created: 14c5598e-2e4c-413e-8d70-ae7d6cd4a51e
Creating group: Colleagues-2025-10-06-16-31-34
âœ“ Group created: 66ebc2fb-440c-4c34-b37f-419e1f8a0207
Creating group: Friends-2025-10-06-16-31-34
âœ“ Group created: bb5ab330-8147-4c15-8324-09edacf39403

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-34 West-2025-10-06-16-31-34
âœ“ Contact created: 9a88f24d-4b03-49b7-928d-db247b84a271

Creating contact: Bruce-2025-10-06-16-31-34 Banner-2025-10-06-16-31-34
âœ“ Contact created: c6e83ed0-11b6-4c66-b975-c817c16016d4

Creating contact: Diana-2025-10-06-16-31-34 Prince-2025-10-06-16-31-34
âœ“ Contact created: 3e8b6766-98f6-4ac7-bb51-625e77684dd7

Creating contact: Peter-2025-10-06-16-31-34 Parker-2025-10-06-16-31-34
âœ“ Contact created: 1a6dc3e4-dbf6-4fcf-8d5c-57b31e58d202

Creating contact: Clark-2025-10-06-16-31-34 Kent-2025-10-06-16-31-34
âœ“ Contact created: b1f135c1-6de9-4844-8fe1-bd27558d5418

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-34
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.762s
user    0m0.242s
sys     0m0.100s
Mon Oct  6 04:31:35 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-36

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-36
âœ“ Tag created: ffe5bfaf-e3e7-4fdf-b2e4-7c88a989ef9e
Creating tag: VIP-2025-10-06-16-31-36
âœ“ Tag created: 33f1e69a-4866-4c1f-b37c-50e488497fca
Creating tag: Follow-Up-2025-10-06-16-31-36
âœ“ Tag created: b8aa2930-c45f-40f5-9735-d0633c9fdd7a

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-36
âœ“ Group created: a7da3e72-7993-4b67-b53c-d09fa7ba90a1
Creating group: Colleagues-2025-10-06-16-31-36
âœ“ Group created: 8b87eb37-7afe-42de-859c-9efc76fae559
Creating group: Friends-2025-10-06-16-31-36
âœ“ Group created: 7aed1609-6da7-41b4-b93e-c9c0dbc4d0bd

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-36 West-2025-10-06-16-31-36
âœ“ Contact created: 8288b144-4ced-4c2c-9a18-7cf2a7d2a8b8

Creating contact: Bruce-2025-10-06-16-31-36 Banner-2025-10-06-16-31-36
âœ“ Contact created: b03b31d8-e25a-436d-8dcc-97603c431cbd

Creating contact: Diana-2025-10-06-16-31-36 Prince-2025-10-06-16-31-36
âœ“ Contact created: 8c0ca299-c100-494e-b15f-e16794496f9d

Creating contact: Peter-2025-10-06-16-31-36 Parker-2025-10-06-16-31-36
âœ“ Contact created: 53b6cf80-c537-4ee5-b20a-47b697ca10b5

Creating contact: Clark-2025-10-06-16-31-36 Kent-2025-10-06-16-31-36
âœ“ Contact created: 9bbc20a5-b96f-4d35-b9d5-8831c34f017b

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-36
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.765s
user    0m0.218s
sys     0m0.121s
Mon Oct  6 04:31:36 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-37

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-37
âœ“ Tag created: 36a4d4fa-2c2a-4ccd-9573-79ea4e0f8fc0
Creating tag: VIP-2025-10-06-16-31-37
âœ“ Tag created: 5d34645d-865e-4b13-82e0-29d171e3ec05
Creating tag: Follow-Up-2025-10-06-16-31-37
âœ“ Tag created: 652af711-0bfd-47da-a1f5-83463d80d446

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-37
âœ“ Group created: 05b229f4-298f-4a6c-88a8-a1565717872e
Creating group: Colleagues-2025-10-06-16-31-37
âœ“ Group created: 07b86123-62e3-47f3-92ea-889203f37222
Creating group: Friends-2025-10-06-16-31-37
âœ“ Group created: 8401749b-e1f7-4766-8972-36f39b864907

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-37 West-2025-10-06-16-31-37
âœ“ Contact created: 84bce9f9-540e-434f-881f-fa1fe251a1c3

Creating contact: Bruce-2025-10-06-16-31-37 Banner-2025-10-06-16-31-37
âœ“ Contact created: cb27b5f0-12af-4620-a7c5-c112d68943ec

Creating contact: Diana-2025-10-06-16-31-37 Prince-2025-10-06-16-31-37
âœ“ Contact created: 7e4dcead-139f-4d0c-ac76-ee255b279f21

Creating contact: Peter-2025-10-06-16-31-37 Parker-2025-10-06-16-31-37
âœ“ Contact created: c9dd57cf-2a7a-4fbe-b4f6-78e2b33b51e9

Creating contact: Clark-2025-10-06-16-31-37 Kent-2025-10-06-16-31-37
âœ“ Contact created: 999f4118-56aa-479a-b66f-992215103a1c

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-37
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.763s
user    0m0.231s
sys     0m0.105s
Mon Oct  6 04:31:38 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-39

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-39
âœ“ Tag created: 6c36f51c-5032-4857-a50d-1875c2535966
Creating tag: VIP-2025-10-06-16-31-39
âœ“ Tag created: 21d96683-2bbd-486f-b541-af9a62870f34
Creating tag: Follow-Up-2025-10-06-16-31-39
âœ“ Tag created: b46a7b32-34c7-453e-8ff2-c56373e3d3e6

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-39
âœ“ Group created: 778b3461-598c-4228-9b28-c57d1be3b598
Creating group: Colleagues-2025-10-06-16-31-39
âœ“ Group created: 9a86c8bd-892b-443a-869b-9e0f835ec802
Creating group: Friends-2025-10-06-16-31-39
âœ“ Group created: 8637739c-cce1-44a6-ac3f-93dbaaf38432

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-39 West-2025-10-06-16-31-39
âœ“ Contact created: 7450c130-2594-43ff-9b80-fa340bd0d9bf

Creating contact: Bruce-2025-10-06-16-31-39 Banner-2025-10-06-16-31-39
âœ“ Contact created: b52b2c44-bdf7-454c-a833-47fe96802eea

Creating contact: Diana-2025-10-06-16-31-39 Prince-2025-10-06-16-31-39
âœ“ Contact created: 3325f579-7fd2-46d1-85ee-e4a5b182dcba

Creating contact: Peter-2025-10-06-16-31-39 Parker-2025-10-06-16-31-39
âœ“ Contact created: 6d22d03d-eb45-4763-b001-7965286866c7

Creating contact: Clark-2025-10-06-16-31-39 Kent-2025-10-06-16-31-39
âœ“ Contact created: 6a7f02a5-c29c-4a5b-a99b-9a4d9b88fd81

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-39
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.755s
user    0m0.246s
sys     0m0.080s
Mon Oct  6 04:31:40 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-41

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-41
âœ“ Tag created: 2e00303e-ace8-402a-8c88-4dcb3bbae855
Creating tag: VIP-2025-10-06-16-31-41
âœ“ Tag created: 1699e5f7-19ba-4370-8979-1b389bfe5e0f
Creating tag: Follow-Up-2025-10-06-16-31-41
âœ“ Tag created: ab73a68c-25ae-4d3d-9cf8-32d83d25089c

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-41
âœ“ Group created: 5b89ebba-2f06-4543-8612-9eb314c92032
Creating group: Colleagues-2025-10-06-16-31-41
âœ“ Group created: 3016a7fd-b8e4-47c2-a640-91f31bbc07db
Creating group: Friends-2025-10-06-16-31-41
âœ“ Group created: 916486f6-f93c-4028-bb06-337b40929c59

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-41 West-2025-10-06-16-31-41
âœ“ Contact created: 5be7a7bf-e264-42c6-982b-99a2c15cd21f

Creating contact: Bruce-2025-10-06-16-31-41 Banner-2025-10-06-16-31-41
âœ“ Contact created: 9b945aaf-f58d-4725-8304-ec2583a69bb5

Creating contact: Diana-2025-10-06-16-31-41 Prince-2025-10-06-16-31-41
âœ“ Contact created: abaf8cc9-14b4-4214-99a1-e6c3ee088df6

Creating contact: Peter-2025-10-06-16-31-41 Parker-2025-10-06-16-31-41
âœ“ Contact created: 7da8c234-4973-44f9-9b25-328290c004c8

Creating contact: Clark-2025-10-06-16-31-41 Kent-2025-10-06-16-31-41
âœ“ Contact created: 91b4ac48-c5fa-4cab-a317-23a6cb7dd124

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-41
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.763s
user    0m0.220s
sys     0m0.124s
Mon Oct  6 04:31:42 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-43

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-43
âœ“ Tag created: 89a54706-900b-4938-a674-69bddc4d387b
Creating tag: VIP-2025-10-06-16-31-43
âœ“ Tag created: b53c6ba2-d40a-4f88-ad11-6021c1284977
Creating tag: Follow-Up-2025-10-06-16-31-43
âœ“ Tag created: bfdbb14d-028d-454c-981e-4e5438f795ba

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-43
âœ“ Group created: 49428f9b-78ae-4d84-96f3-d3d93cb5d350
Creating group: Colleagues-2025-10-06-16-31-43
âœ“ Group created: 09cffec8-be05-49fe-8eec-e1b764b178ff
Creating group: Friends-2025-10-06-16-31-43
âœ“ Group created: 62dcd58f-3f4f-458c-b0c9-cb75bb6947ff

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-43 West-2025-10-06-16-31-43
âœ“ Contact created: c1f7b27a-964c-4d0d-a64c-f28a7a9a2d09

Creating contact: Bruce-2025-10-06-16-31-43 Banner-2025-10-06-16-31-43
âœ“ Contact created: 0b105855-d4f0-48b2-b216-0af45f862e4a

Creating contact: Diana-2025-10-06-16-31-43 Prince-2025-10-06-16-31-43
âœ“ Contact created: d21bc4d1-389d-4b72-b13e-8cb77336e03f

Creating contact: Peter-2025-10-06-16-31-43 Parker-2025-10-06-16-31-43
âœ“ Contact created: a826017b-c9a6-4394-b544-4da0966eedb3

Creating contact: Clark-2025-10-06-16-31-43 Kent-2025-10-06-16-31-43
âœ“ Contact created: 1c259d65-1d22-4f73-a098-060ff6c0d630

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-43
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.779s
user    0m0.250s
sys     0m0.089s
Mon Oct  6 04:31:44 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-45

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-45
âœ“ Tag created: 9b56a9d9-4917-4811-8e93-12857ec0b594
Creating tag: VIP-2025-10-06-16-31-45
âœ“ Tag created: cd909093-0c38-4be2-92b2-39f2c49ae247
Creating tag: Follow-Up-2025-10-06-16-31-45
âœ“ Tag created: d1fea501-8e3a-4a99-8e0d-24ec679a624f

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-45
âœ“ Group created: efe87f92-0965-46af-a38c-2c90a2c04371
Creating group: Colleagues-2025-10-06-16-31-45
âœ“ Group created: 759e686f-17d0-4f6a-bd0d-e0224831d68f
Creating group: Friends-2025-10-06-16-31-45
âœ“ Group created: 45efbd55-17c5-4e5c-bdd3-420240e47781

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-45 West-2025-10-06-16-31-45
âœ“ Contact created: 6494fd36-7690-48fa-909c-2713802e9ca3

Creating contact: Bruce-2025-10-06-16-31-45 Banner-2025-10-06-16-31-45
âœ“ Contact created: dc62d273-b76e-4e88-bbea-caa2afa084d3

Creating contact: Diana-2025-10-06-16-31-45 Prince-2025-10-06-16-31-45
âœ“ Contact created: 1399d9c7-ddee-4206-b1dd-fd2ffa12189e

Creating contact: Peter-2025-10-06-16-31-45 Parker-2025-10-06-16-31-45
âœ“ Contact created: 2c9624dd-61b5-43e4-a3e3-21703388a0b8

Creating contact: Clark-2025-10-06-16-31-45 Kent-2025-10-06-16-31-45
âœ“ Contact created: ce3a69b3-7dc1-48c8-a60b-dfe167609a8d

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-45
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.786s
user    0m0.216s
sys     0m0.114s
Mon Oct  6 04:31:45 PM EDT 2025

real    0m17.723s
user    0m2.351s
sys     0m1.055s
kushal@texas:~$



Perfect! Your API is performing excellently on the freshly deployed Virginia server. Let's analyze these results:

## Performance Metrics

**Sustained Load Test (10 iterations):**
- **Average time per batch**: ~760-800ms
- **Consistency**: Extremely stable (755ms - 801ms range)
- **Operations per batch**: 11 API calls (3 tags + 3 groups + 5 contacts)
- **Total throughput**: ~14 operations/second sustained

**What This Proves:**
1. **Database warm-up is working** - No performance degradation over time
2. **Connection pooling is healthy** - Consistent response times
3. **Transaction handling is solid** - All creates succeeding with proper relationships
4. **Container stability** - Running smoothly after the fresh deployment

## Data Created

In just 17.7 seconds, you successfully created:
- **30 tags** (10 batches Ã— 3 tags)
- **30 groups** (10 batches Ã— 3 groups)
- **50 contacts** (10 batches Ã— 5 contacts with full details)
- **Each contact** includes 2 email addresses, 2 phone numbers, 2 physical addresses, plus group/tag associations

That's **110 database entities** with complex relationships, all created in under 18 seconds!

## What's Notable

1. **Sub-second batch processing** - Your API is handling complex nested object creation incredibly efficiently
2. **No timeouts or errors** - 100% success rate across all 110 operations
3. **Network latency is minimal** - Texas â†’ Virginia at ~760ms for 11 sequential API calls shows good network performance
4. **EF Core is performing well** - The relationship tracking and cascade saves are working properly

The freshly deployed containers from the 95-commit update are running like a champ! The centralized package management and updated configurations are clearly working well.









================================================================================
FILE: docs\log-sample.txt
SIZE: 27.34 KB
MODIFIED: 10/08/2025 14:22:44
================================================================================

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\kushal> git --version
git version 2.51.0.windows.1
PS C:\Users\kushal> winget
Windows Package Manager v1.11.510
Copyright (c) Microsoft Corporation. All rights reserved.

The winget command line utility enables installing applications and other packages from the command line.

usage: winget  [<command>] [<options>]

The following commands are available:
  install    Installs the given package
  show       Shows information about a package
  source     Manage sources of packages
  search     Find and show basic info of packages
  list       Display installed packages
  upgrade    Shows and performs available upgrades
  uninstall  Uninstalls the given package
  hash       Helper to hash installer files
  validate   Validates a manifest file
  settings   Open settings or set administrator settings
  features   Shows the status of experimental features
  export     Exports a list of the installed packages
  import     Installs all the packages in a file
  pin        Manage package pins
  configure  Configures the system into a desired state
  download   Downloads the installer from a given package
  repair     Repairs the selected package
  dscv3      DSC v3 resource commands

For more details on a specific command, pass it the help argument. [-?]

The following options are available:
  -v,--version                Display the version of the tool
  --info                      Display general info of the tool
  -?,--help                   Shows help about the selected command
  --wait                      Prompts the user to press any key before exiting
  --logs,--open-logs          Open the default logs location
  --verbose,--verbose-logs    Enables verbose logging for winget
  --nowarn,--ignore-warnings  Suppresses warning outputs
  --disable-interactivity     Disable interactive prompts
  --proxy                     Set a proxy to use for this execution
  --no-proxy                  Disable the use of proxy for this execution

More help can be found at: https://aka.ms/winget-command-help
PS C:\Users\kushal> winget search git
The `msstore` source requires that you view the following agreements before using.
Terms of Transaction: https://aka.ms/microsoft-store-terms-of-transaction
The source requires the current machine's 2-letter geographic region to be sent to the backend service to function properly (ex. "US").

Do you agree to all the source agreements terms?
[Y] Yes  [N] No: y
Name                                  Id                              Version      Match    Source
---------------------------------------------------------------------------------------------------
My Git                                9NLVK2SL2SSP                    Unknown               msstore
GitFiend                              9NMNKLTSZNKC                    Unknown               msstore
GitLooker                             9PK6TGX9T87P                    Unknown               msstore
Git                                   Git.Git                         2.51.0.2              winget
Git                                   Microsoft.Git                   2.51.0.0.3            winget
RepoZ                                 AndreasWascher.RepoZ            5.5          Tag: git winget
Araxis Merge                          Araxis.Merge                    2025.1       Tag: git winget
Sourcetree                            Atlassian.Sourcetree            3.4.26       Tag: git winget
GitKraken                             Axosoft.GitKraken               11.4.0       Tag: git winget
Commitly                              Commitly.Commitly               1.1.2        Tag: git winget
ä¸­æ–‡Git                               DuckStudio.ChineseGit           3.3          Tag: git winget
Fork - a fast and friendly git client Fork.Fork                       2.12.2       Tag: git winget
GLab                                  GLab.GLab                       1.73.0       Tag: git winget
MinGit                                Git.MinGit                      2.51.0.2     Tag: git winget
BusyBox-based MinGit                  Git.MinGit.BusyBox              2.50.1       Tag: git winget
GitButler                             GitButler.GitButler             0.16.8       Tag: git winget
Git Extensions                        GitExtensionsTeam.GitExtensions 5.2.1.18061  Tag: git winget
GitHub Desktop                        GitHub.GitHubDesktop            3.5.3        Tag: git winget
GitHub Desktop Beta                   GitHub.GitHubDesktop.Beta       3.4.17-beta3 Tag: git winget
Git LFS                               GitHub.GitLFS                   3.7.0        Tag: git winget
GitHub CLI                            GitHub.cli                      2.81.0       Tag: git winget
git-sizer                             GitHub.git-sizer                1.5.0        Tag: git winget
smimesign                             GitHub.smimesign                0.2.0-rc1    Tag: git winget
GitTools GitVersion                   GitTools.GitVersion             6.4.0        Tag: git winget
Gitleaks                              Gitleaks.Gitleaks               8.28.0       Tag: git winget
jreleaser                             JReleaser.jreleaser             1.20.0       Tag: git winget
Oh My Posh                            JanDeDobbeleer.OhMyPosh         27.1.2       Tag: git winget
lazygit                               JesseDuffield.lazygit           0.55.1       Tag: git winget
JetBrains Space                       JetBrains.Space                 2023.1.7     Tag: git winget
Gittyup                               Murmele.Gittyup                 1.4.0        Tag: git winget
GitBlade                              Pirinel.GitBlade                00.00.8.9    Tag: git winget
RelaGit                               Rela.RelaGit                    0.16.9       Tag: git winget
Tower                                 SaaSGroup.Tower                 9.3.532      Tag: git winget
PullWatch                             ShipDigital.PullWatch           1.7.13       Tag: git winget
gitui                                 StephanDilly.gitui              0.27.0       Tag: git winget
Sublime Merge                         SublimeHQ.SublimeMerge          2112         Tag: git winget
Sublime Merge (Dev)                   SublimeHQ.SublimeMerge.Dev      2057         Tag: git winget
Talisman                              Thoughtworks.Talisman           1.37.0       Tag: git winget
GitFiend                              TobySuggate.GitFiend            0.45.3       Tag: git winget
TortoiseGit                           TortoiseGit.TortoiseGit         2.17.0.2     Tag: git winget
TortoiseSVN                           TortoiseSVN.TortoiseSVN         1.14.9.29743 Tag: git winget
Agent Git                             Xidicone.AgentGit               1.88         Tag: git winget
Gource                                acaudwell.Gource                0.53         Tag: git winget
GitQL                                 amrdeveloper.gitql              0.37.0       Tag: git winget
soft-serve                            charmbracelet.soft-serve        0.10.0       Tag: git winget
delta                                 dandavison.delta                0.18.2       Tag: git winget
dev-sidecar                           docmirror.dev-sidecar           2.0.0        Tag: git winget
Lefthook                              evilmartians.lefthook           1.13.6       Tag: git winget
git-cola                              git-cola.git-cola               4.15.0       Tag: git winget
gittuf                                gittuf.gittuf                   0.12.0       Tag: git winget
git-credential-azure                  hickford.git-credential-azure   0.3.1        Tag: git winget
git-credential-oauth                  hickford.git-credential-oauth   0.16.0       Tag: git winget
jj                                    jj-vcs.jj                       0.34.0       Tag: git winget
BlastMerge                            ktsu.BlastMerge                 1.0.19       Tag: git winget
jj                                    martinvonz.jj                   0.30.0       Tag: git winget
onefetch                              o2sh.onefetch                   2.25.0       Tag: git winget
git-cliff                             orhun.git-cliff                 2.10.1       Tag: git winget
git-age                               prskr.git-age                   0.2.4        Tag: git winget
git-absorb                            tummychow.git-absorb            0.8.0        Tag: git winget
ghq                                   x-motemen.ghq                   1.8.0        Tag: git winget
GitNote                               zhaopengme.gitnote              3.1.0        Tag: git winget
Fundels                               CartamundiDigital.Fundels       3.2.8                 winget
FastGithub                            CoolPlayLin.FastGithub          2.1.4                 winget
MaxTo                                 DigitalCreations.MaxTo          2.2.1                 winget
DD-TV                                 DigitalDevices.DD-TV            1.15.0.0              winget
Soulframe                             DigitalExtremes.Soulframe       1.0.0                 winget
Warframe                              DigitalExtremes.Warframe        1.0.0                 winget
doctl                                 DigitalOcean.Doctl              1.145.0               winget
Tropy                                 DigitalScholar.Tropy            1.16.2                winget
Zotero                                DigitalScholar.Zotero           7.0.24                winget
Papers                                DigitalScience.Papers           4.37.2395             winget
Duplicate Cleaner Free 4              DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.2                 winget
Duplicate Cleaner Pro 4               DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.4                 winget
Duplicate Cleaner Pro 5               DigitalVolcanoSoftware.Duplicaâ€¦ 5.25.0.0              winget
Hash Tool                             DigitalVolcanoSoftware.HashTool 1.2.1                 winget
TaskCanvas                            DigitalVolcanoSoftware.TaskCanâ€¦ 1.4                   winget
TextCrawler Free                      DigitalVolcanoSoftware.TextCraâ€¦ 3.1.2                 winget
TextCrawler Pro                       DigitalVolcanoSoftware.TextCraâ€¦ 3.1.3                 winget
DQViewer                              DigiteqAutomotive.DQViewer      4.3                   winget
GitHub æ ‡ç­¾ç®¡ç†å™¨                     DuckStudio.GitHubLabelsManager  1.13                  winget
GitHubView                            DuckStudio.GitHubView           1.0.5                 winget
GitHubView (Nightly)                  DuckStudio.GitHubView.Nightly   2025.09.08.â€¦          winget
Git Credential Manager (User)         Git.GCM                         2.6.1                 winget
Git for Windows SDK                   Git.SDK                         1.0.8                 winget
GitAhead                              GitAhead.GitAhead               2.7.1                 winget
Atom                                  GitHub.Atom                     1.60.0                winget
Atom Beta                             GitHub.Atom.Beta                1.61.0-beta0          winget
classroom-assistant                   GitHub.ClassroomAssistant       2.0.4                 winget
hub                                   GitHub.hub                      2.14.2                winget
GitKraken CLI                         GitKraken.cli                   3.1.40                winget
tea                                   Gitea.tea                       0.9.2                 winget
Gitify                                Gitify.Gitify                   6.9.1                 winget
GitLab Runner                         Gitlab.Runner                   18.4.0                winget
AnimeBack                             LeGitHubDeTai.AnimeBack         8.0.9                 winget
Lingdys 4                             LingitAS.Lingdys4               4.5.149.0             winget
Logitech Camera Settings              Logitech.CameraSettings         2.12.20.0             winget
Logitech Gamepad F710 Connection Utiâ€¦ Logitech.F710ConnectUtility     2.15.264              winget
Logitech G HUB                        Logitech.GHUB                   2025.7.7683â€¦          winget
Logitech Gaming Software              Logitech.LGS                    9.04.49               winget
Logi Bolt                             Logitech.LogiBolt               1.2.6024.0            winget
Logi Tune                             Logitech.LogiTune               3.11.89.0             winget
MyHarmony                             Logitech.MyHarmony              1.0.308               winget
Logitech Onboard Memory Manager       Logitech.OnboardMemoryManager   2.5.358               winget
Logitech Options                      Logitech.Options                10.26.12              winget
Logi Options+                         Logitech.OptionsPlus            1.96.781095           winget
Logitech Presentation                 Logitech.Presentation           2.10.34               winget
Logitech SetPoint                     Logitech.SetPoint               6.90.66               winget
Logitech Solar App                    Logitech.Solar                  1.20.28               winget
Logitech Sync                         Logitech.Sync                   3.8.254.0             winget
Logitech Unifying Software            Logitech.UnifyingSoftware       2.52.33               winget
GitHub extension for Command Palette  Microsoft.CmdPalGitHubExtension 0.103.178.0           winget
GVFS                                  Microsoft.VFSforGit             1.0.25169.1           winget
Reduce Audio Latency                  MiniantGit.REAL                 0.2.0                 winget
ISY Linker                            NorconsultDigital.ISYLinker     11.6.0.0              winget
Igitt                                 Nstr.Igitt                      v0.1.13               winget
GitHubReleaseNotes                    StefHeyenrath.GitHubReleaseNotâ€¦ 1.0.10.1              winget
SmartGit                              Syntevo.SmartGit                24.1.3                winget
Snagit 2020                           TechSmith.Snagit.2020           20.1.8.16558          winget
Snagit 2021                           TechSmith.Snagit.2021           21.4.7                winget
Snagit 2022                           TechSmith.Snagit.2022           22.1.7                winget
Snagit 2023                           TechSmith.Snagit.2023           23.2.6                winget
Snagit 2024                           TechSmith.Snagit.2024           24.3.4                winget
Snagit 2025                           TechSmith.Snagit.2025           25.3.1                winget
Fusion Digital Power Designer         TexasInstruments.FusionDigitalâ€¦ 7.10.1                winget
Kitfox                                WesternDigital.Kitfox           1.1.1.1               winget
WD Security                           WesternDigital.Security         2.1.4.358             winget
WimyGit                               Wimysoft.WimyGit                1.2.0                 winget
gitsqlite                             danielsiegl.gitsqlite           0.8.0                 winget
poke-cli                              digitalghost-dev.poke-cli       1.5.2                 winget
Thermal                               gitthermal.thermal              0.0.4                 winget
gitg                                  gnome.gitg                      41                    winget
Upgit                                 pluveto.Upgit                   0.2.18                winget
Dragit                                sireliah.dragit                 0.7.1                 winget
SourceGit                             sourcegit-scm.SourceGit         2025.35               winget
git-grab                              wezm.git-grab                   3.0.0                 winget
regit                                 woaitsAryan.regit               0.4.2                 winget
WSJT-X: Digital Modes for Weak Signaâ€¦ JoeTaylor.WSJT-X                2.7.0                 winget
IPVTest                               Vipre.IPVTest                   1.0.0.0      Commandâ€¦ winget
Adobe DNG Converter                   Adobe.DNGConverter              17.5.1       Tag: diâ€¦ winget
ç™¾åº¦è¯­éŸ³è¾“å…¥                          Baidu.BaiduSpeechInput          2.0.0.33     Tag: loâ€¦ winget
CloudShow Launcher                    BinaryFortress.CloudShow        6.5.0.0      Tag: diâ€¦ winget
Dragonframe 2025                      DZEDSystems.Dragonframe         2025.05.4    Tag: diâ€¦ winget
NVC VHDL Simulator                    NickGasson.NVC                  1.18.0       Tag: diâ€¦ winget
Logisim-evolution                     logisim-evolution.logisim-evolâ€¦ 3.9.0        Tag: diâ€¦ winget
Bit4id - Firma4ng-InfoCamere          Bit4id.Firma4ng.InfoCamere      1.6.14       Tag: diâ€¦ winget
DigiDoc4 Client                       RIA.DigiDoc4                    4.8.2        Tag: diâ€¦ winget
eID software                          RIA.eIDsoftware                 25.8.18.8398 Tag: diâ€¦ winget
WSL Manager                           Bostrot.WSLManager              1.8.17       Tag: giâ€¦ winget
DRA                                   CosimoMatteini.DRA              0.9.0        Tag: giâ€¦ winget
Lepton                                CosmoX.Lepton                   1.10.0       Tag: giâ€¦ winget
AppInstaller File Builder(Preview)    Microsoft.AppInstallerFileBuilâ€¦ 1.2020.221.0 Tag: giâ€¦ winget
Cacher                                PenguinLabs.Cacher              2.43.2       Tag: giâ€¦ winget
Eget                                  ZacharyYedidia.Eget             1.3.4        Tag: giâ€¦ winget
MarkRight                             dvcrn.markright                 0.1.11       Tag: giâ€¦ winget
grp                                   feraxhp.grp                     0.7.4        Tag: giâ€¦ winget
act                                   nektos.act                      0.2.81       Tag: giâ€¦ winget
REAPER                                Cockos.REAPER                   7.48         Tag: diâ€¦ winget
LMMS                                  LMMS.LMMS                       1.2.2        Tag: diâ€¦ winget
Renoise                               Renoise.Renoise                 3.4.4        Tag: diâ€¦ winget
YYè°ƒéŸ³å°                              YY.YYAudio                      1.23.4.0     Tag: diâ€¦ winget
DAWG                                  dawg.dawg                       0.2.3        Tag: diâ€¦ winget
Corsair iCUE5 Software                Corsair.iCUE.5                  5.34.66      Tag: coâ€¦ winget
Dolt                                  DoltHub.Dolt                    1.59.18      Tag: giâ€¦ winget
Gridea                                EryouHao.Gridea                 0.9.3        Tag: giâ€¦ winget
Flux                                  FluxCD.Flux                     2.7.0        Tag: giâ€¦ winget
Cobalt SSG                            cobalt-org.cobalt               0.20.0       Tag: giâ€¦ winget
Ferium                                GorillaDevs.Ferium              4.7.1        Tag: giâ€¦ winget
VEC DigiLib                           LAVANJV.vecdigilib              1.0.0        Tag: diâ€¦ winget
HeadsetControl-GUI                    LeoKlaus.HeadsetControl-GUI     0.19.5       Tag: Loâ€¦ winget
OpenHantek6022                        OpenHantek.OpenHantek6022       3.4.0        Tag: diâ€¦ winget
ChanSort                              PredatH0r.ChanSort              2025-03-08   Tag: diâ€¦ winget
RescueTime                            RescueTime.DesktopApp           3.2.11.5     Tag: diâ€¦ winget
SatDump                               SatDump.SatDump                 1.2.2        Tag: diâ€¦ winget
ArtHub                                Tencent.ArtHub                  1.18.0       Tag: diâ€¦ winget
WK Radar                              WK.WKRadar                      7.16.0       Tag: Baâ€¦ winget
FileQL                                amrdeveloper.fileql             0.10.0       Tag: giâ€¦ winget
direnv                                direnv.direnv                   2.37.1       Tag: giâ€¦ winget
score                                 ossia.score                     3.7.1        Tag: diâ€¦ winget
actionlint                            rhysd.actionlint                1.7.7        Tag: giâ€¦ winget
PS3 Media Server                      shagrath.PS3MediaServer         1.90.1       Tag: diâ€¦ winget
SoX_ng                                sox_ng.sox_ng                   14.6.0.4     Tag: diâ€¦ winget
xploview                              xploview.xploview               3.3.31       Tag: diâ€¦ winget
PS C:\Users\kushal> winget list Git.Git
Name Id      Version Available Source
-------------------------------------
Git  Git.Git 2.51.0  2.51.0.2  winget
PS C:\Users\kushal> winget show Git.Git
Found Git [Git.Git]
Version: 2.51.0.2
Publisher: The Git Development Community
Publisher Url: https://gitforwindows.org/
Publisher Support Url: https://github.com/git-for-windows/git/issues
Moniker: git
Description:
  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
  Git for Windows focuses on offering a lightweight, native set of tools that bring the full feature set of the Git SCM to Windows while providing appropriate user interfaces for experienced Git users and novices alike.
Homepage: https://gitforwindows.org/
License: GPL-2.0
License Url: https://github.com/git-for-windows/build-extra/blob/HEAD/LICENSE.txt
Copyright: Copyright (C) 1989, 1991 Free Software Foundation, Inc.
Release Notes:
  Changes since Git for Windows v2.51.0 (August 19th 2025)
  New Features
  - Comes with PCRE2 v10.46.
  - Comes with cURL v8.16.0. This addresses a bug where fetches/pushes could fail with failed to read data from server: SEC_E_CONTEXT_EXPIRED (0x80090317) under certain circumstances. Also included: a back-port of a fix for a bug where connection failures were mistakenly reported as time-outs.
  - Comes with Tig v2.6.0.
  - Comes with MinTTY v3.8.1.
  - Comes with OpenSSL v3.5.3.
  Bug Fixes
  - The auto-updater now shows Git for Windows icon in the notification also on Windows/ARM64.
  - git clone/git fetch now deals more gracefully with directory / file conflicts when the files backend is used for ref storage, by failing only the ones that are involved in the conflict while allowing others. This is a regression in Git v2.51.0 that was reported in Git for Windows and independently also to the Git mailing list. This was fixed by merging Git's topic branch kn/refs-files-case-insensitive.
  - Support for pathspecs in diff --no-index was somewhat buggy, which has been fixed.
  - git sparse-checkout subcommand learned a new clean action to prune otherwise unused working-tree files that are outside the areas of interest. An earlier version of this had been integrated into MicrosoftGit already. This was fixed by merging Git's topic branch ds/sparse-checkout-clean.
  - git rebase -i failed to clean-up the commit log message when the command commits the final one in a chain of "fixup" commands, which has been corrected. Backported from Git's topic branch pw/rebase-i-cleanup-fix.
  - git subtree did not work correctly when splitting squashed subtrees, which has been improved. Backported from Git's topic branch cs/subtree-squash-split-fix.
  - Some among git add -p and friends ignored color.diff and/or color.ui configuration variables, which is an old regression, which has been corrected. This was fixed by merging Git's topic branch jk/add-i-color.
  - A corner-case bug in git log -L... has been corrected. This was fixed by merging Git's topic branch sg/line-log-boundary-fixes.
  - A broken or malicious git fetch can say that it has the same object for many many times, and the upload-pack serving it can exhaust memory storing them redundantly, which has been corrected. This was fixed by merging Git's topic branch ps/upload-pack-oom-protection.
  - Fixes multiple crashes around midx write-out codepaths. This was fixed by merging Git's topic branch ds/midx-write-fixes.
  - git repack --path-walk lost objects in some corner cases, which has been corrected. This was fixed by merging Git's topic branch ds/path-walk-repack-fix.
  - Under a race against another process that is repacking the repository, especially a partially cloned one, git fetch may mistakenly think some objects we do have are missing, which has been corrected. Thiswas fixed by merging Git's topic branch jk/fetch-check-graph-objects-fix.
  - Various options to git diff that makes comparison ignore certain aspects of the differences (like "space changes are ignored", "differences in lines that match these regular expressions are ignored") did not work well with --name-only and friends. This was fixed by merging Git's topic branch ly/diff-name-only-with-diff-from-content.
  - git diff --no-index run inside a subdirectory under control of a Git repository operated at the top of the working tree and stripped the prefix from the output, and oddballs like "-" (stdin) did not work correctly because of it. Correct the set-up by undoing what the set-up sequence did to the current working directory and prefix. This was fixed by merging Git's topic branch jc/diff-no-index-in-subdir.
  - Various bugs about rename handling in "ort" merge strategy have been fixed. This was fixed by merging Git's topic branch en/ort-rename-fixes.
  - git push had a code path that led to BUG() but it should have reported a regular failure, as it is a response to a usual but invalid end-user action to attempt pushing an object that does not exist. This was fixed by merging Git's topic branch dl/push-missing-object-error.
  - git refs migrate to migrate the reflog entries from a refs backend to another had a handful of bugs squashed. This was fixed by merging Git's topic branch ps/reflog-migrate-fixes.
  - During interactive rebase, using drop on a merge commit lead to an error, which was incorrect. This was fixed by merging Git's topic branch js/rebase-i-allow-drop-on-a-merge.
Release Notes Url: https://github.com/git-for-windows/git/releases/tag/v2.51.0.windows.2
Documentation:
  Wiki: https://github.com/git-for-windows/git/wiki
Tags:
  git
  vcs
Installer:
  Installer Type: inno
  Installer Url: https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  Installer SHA256: 5cf583441ccd8d98d3492936235b6ee30c6847d1b3f49365d6a025b3432094ad
  Release Date: 2025-09-29
  Offline Distribution Supported: true
PS C:\Users\kushal> winget install Git.Git
Found an existing package already installed. Trying to upgrade the installed package...
Found Git [Git.Git] Version 2.51.0.2
This application is licensed to you by its owner.
Microsoft is not responsible for, nor does it grant any licenses to, third-party packages.
Downloading https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  62.8 MB / 62.8 MB
Successfully verified installer hash
Starting package install...
The installer will request to run as administrator. Expect a prompt.
Successfully installed
PS C:\Users\kushal> git --version
git version 2.51.0.windows.2
PS C:\Users\kushal>


================================================================================
FILE: docs\scratch.md
SIZE: 459.92 KB
MODIFIED: 10/06/2025 12:44:27
================================================================================

? IMeterFactory is working!
LogRecord.Timestamp:               2025-10-06T16:33:34.4041174Z
LogRecord.CategoryName:            Program
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Checking for pending database migrations...
LogRecord.Body:                    Checking for pending database migrations...
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Checking for pending database migrations...

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.8501030Z
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (43ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 43
    parameters:
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.8987310Z
LogRecord.CategoryName:            Program
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Database is up to date - no migrations needed.
LogRecord.Body:                    Database is up to date - no migrations needed.
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Database is up to date - no migrations needed.

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.9026633Z
LogRecord.CategoryName:            MyOpenTelemetryApi.Api
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Starting MyOpenTelemetryApi version 1.0.0
LogRecord.Body:                    Starting {ServiceName} version {ServiceVersion}
LogRecord.Attributes (Key:Value):
    ServiceName: MyOpenTelemetryApi
    ServiceVersion: 1.0.0
    OriginalFormat (a.k.a Body): Starting {ServiceName} version {ServiceVersion}

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.9052545Z
LogRecord.CategoryName:            Microsoft.Extensions.Hosting.Internal.Host
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        Hosting starting
LogRecord.Body:                    Hosting starting
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Hosting starting
LogRecord.EventId:                 1
LogRecord.EventName:               Starting

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.9273056Z
LogRecord.CategoryName:            Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        User profile is available. Using 'C:\Users\kushal\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
LogRecord.Body:                    User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.
LogRecord.Attributes (Key:Value):
    FullName: C:\Users\kushal\AppData\Local\ASP.NET\DataProtection-Keys
    OriginalFormat (a.k.a Body): User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.
LogRecord.EventId:                 63
LogRecord.EventName:               UsingProfileAsKeyRepositoryWithDPAPI

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.0927627Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Now listening on: https://0.0.0.0:7034
LogRecord.Body:                    Now listening on: {address}
LogRecord.Attributes (Key:Value):
    address: https://0.0.0.0:7034
    OriginalFormat (a.k.a Body): Now listening on: {address}
LogRecord.EventId:                 14
LogRecord.EventName:               ListeningOnAddress

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.0944490Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Now listening on: http://0.0.0.0:5174
LogRecord.Body:                    Now listening on: {address}
LogRecord.Attributes (Key:Value):
    address: http://0.0.0.0:5174
    OriginalFormat (a.k.a Body): Now listening on: {address}
LogRecord.EventId:                 14
LogRecord.EventName:               ListeningOnAddress

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2265181Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Application started. Press Ctrl+C to shut down.
LogRecord.Body:                    Application started. Press Ctrl+C to shut down.
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Application started. Press Ctrl+C to shut down.

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2277895Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Hosting environment: Development
LogRecord.Body:                    Hosting environment: {EnvName}
LogRecord.Attributes (Key:Value):
    EnvName: Development
    OriginalFormat (a.k.a Body): Hosting environment: {EnvName}

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2290801Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Content root path: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\src\MyOpenTelemetryApi.Api
LogRecord.Body:                    Content root path: {ContentRoot}
LogRecord.Attributes (Key:Value):
    ContentRoot: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\src\MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Content root path: {ContentRoot}

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2302167Z
LogRecord.CategoryName:            Microsoft.Extensions.Hosting.Internal.Host
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        Hosting started
LogRecord.Body:                    Hosting started
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Hosting started
LogRecord.EventId:                 2
LogRecord.EventName:               Started

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Resource associated with Metrics:
        service.name: MyOpenTelemetryApi
        service.version: 1.0.0
        service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
        telemetry.sdk.name: opentelemetry
        telemetry.sdk.language: dotnet
        telemetry.sdk.version: 1.13.0

Metric Name: process.memory.usage, Description: The amount of physical memory in use., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9639090Z, 2025-10-06T16:33:45.9803578Z]
Value: 144506880

Metric Name: process.memory.virtual, Description: The amount of committed virtual memory., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9649870Z, 2025-10-06T16:33:45.9804149Z]
Value: 2481056284672

Metric Name: process.cpu.time, Description: Total CPU seconds broken down by different states., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:33:45.9804481Z] process.cpu.state: user
Value: 2
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:33:45.9804481Z] process.cpu.state: system
Value: 0.328125

Metric Name: process.cpu.count, Description: The number of processors (CPU cores) available to the current process., Unit: {processors}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652277Z, 2025-10-06T16:33:45.9804485Z]
Value: 12

Metric Name: process.thread.count, Description: Process threads count., Unit: {thread}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652369Z, 2025-10-06T16:33:45.9804487Z]
Value: 36

Metric Name: dotnet.gc.collections, Description: The number of garbage collections that have occurred since the process has started., Unit: {collection}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:33:45.9804535Z] gc.heap.generation: gen2
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:33:45.9804535Z] gc.heap.generation: gen1
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:33:45.9804535Z] gc.heap.generation: gen0
Value: 2

Metric Name: dotnet.process.memory.working_set, Description: The number of bytes of physical memory mapped to the process context., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665548Z, 2025-10-06T16:33:45.9804541Z]
Value: 144031744

Metric Name: dotnet.gc.heap.total_allocated, Description: The approximate number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665597Z, 2025-10-06T16:33:45.9804549Z]
Value: 25792880

Metric Name: dotnet.gc.last_collection.memory.committed_size, Description: The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665650Z, 2025-10-06T16:33:45.9804550Z]
Value: 13565952

Metric Name: dotnet.gc.last_collection.heap.size, Description: The managed GC heap size (including fragmentation), as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: gen1
Value: 1042568
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: gen2
Value: 3800856
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: loh
Value: 3270784
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: poh
Value: 58240

Metric Name: dotnet.gc.last_collection.heap.fragmentation.size, Description: The heap fragmentation, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: gen1
Value: 602336
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: gen2
Value: 176104
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: loh
Value: 736
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: poh
Value: 0

Metric Name: dotnet.gc.pause.time, Description: The total amount of time paused in GC since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701062Z, 2025-10-06T16:33:45.9804561Z]
Value: 0.014596

Metric Name: dotnet.jit.compiled_il.size, Description: Count of bytes of intermediate language that have been compiled since the process has started., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701174Z, 2025-10-06T16:33:45.9804564Z]
Value: 916699

Metric Name: dotnet.jit.compiled_methods, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: {method}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701251Z, 2025-10-06T16:33:45.9804567Z]
Value: 12367

Metric Name: dotnet.jit.compilation.time, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701358Z, 2025-10-06T16:33:45.9804569Z]
Value: 1.993818

Metric Name: dotnet.monitor.lock_contentions, Description: The number of times there was contention when trying to acquire a monitor lock since the process has started., Unit: {contention}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701429Z, 2025-10-06T16:33:45.9804571Z]
Value: 0

Metric Name: dotnet.thread_pool.thread.count, Description: The number of thread pool threads that currently exist., Unit: {thread}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701527Z, 2025-10-06T16:33:45.9804573Z]
Value: 3

Metric Name: dotnet.thread_pool.work_item.count, Description: The number of work items that the thread pool has completed since the process has started., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701694Z, 2025-10-06T16:33:45.9804576Z]
Value: 55

Metric Name: dotnet.thread_pool.queue.length, Description: The number of work items that are currently queued to be processed by the thread pool., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701765Z, 2025-10-06T16:33:45.9804577Z]
Value: 0

Metric Name: dotnet.timer.count, Description: The number of timer instances that are currently active. An active timer is registered to tick at some point in the future and has not yet been canceled., Unit: {timer}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701834Z, 2025-10-06T16:33:45.9804579Z]
Value: 2

Metric Name: dotnet.assembly.count, Description: The number of .NET assemblies that are currently loaded., Unit: {assembly}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701915Z, 2025-10-06T16:33:45.9804581Z]
Value: 166

Metric Name: dotnet.process.cpu.count, Description: The number of processors available to the process., Unit: {cpu}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702055Z, 2025-10-06T16:33:45.9804585Z]
Value: 12

Metric Name: dotnet.process.cpu.time, Description: CPU time used by the process., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:33:45.9804587Z] cpu.mode: user
Value: 2
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:33:45.9804587Z] cpu.mode: system
Value: 0.328125




telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.6839161Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:09.6990249Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:09.7146467Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.7164605Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4c449f62eb5bc2bb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Clark-2025-10-06-12-34-08 Kent-2025-10-06-12-34-08
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Clark-2025-10-06-12-34-08
    LastName: Kent-2025-10-06-12-34-08
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4c449f62eb5bc2bb
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4224077fb37c326a
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.7568904Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  d5d024d06d8514c7
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d5d024d06d8514c7
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             d5d024d06d8514c7
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.7195725Z
Activity.Duration:           00:00:00.0393317
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.7962021Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  6069410fb8208d07
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 6069410fb8208d07
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             6069410fb8208d07
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.7604552Z
Activity.Duration:           00:00:00.0378957
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.8331042Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  dc16ab0ee4c15ea7
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: dc16ab0ee4c15ea7
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             dc16ab0ee4c15ea7
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.7999103Z
Activity.Duration:           00:00:00.0349990
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.8648049Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  78572cc5edb3e614
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78572cc5edb3e614
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             78572cc5edb3e614
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.8363253Z
Activity.Duration:           00:00:00.0306323
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9043119Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  23278b4467e8bdae
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 23278b4467e8bdae
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             23278b4467e8bdae
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.8684880Z
Activity.Duration:           00:00:00.0376292
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9450353Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  e37a7682b78d74e0
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e37a7682b78d74e0
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             e37a7682b78d74e0
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.9087772Z
Activity.Duration:           00:00:00.0387664
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9813362Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4c449f62eb5bc2bb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: a8d9b516-9cac-41a7-bc83-1aa2881914cb
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: a8d9b516-9cac-41a7-bc83-1aa2881914cb
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4c449f62eb5bc2bb
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4224077fb37c326a
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             4c449f62eb5bc2bb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4224077fb37c326a
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:09.7164456Z
Activity.Duration:           00:00:00.2667298
Activity.Tags:
    contact.id: a8d9b516-9cac-41a7-bc83-1aa2881914cb
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9839919Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 267.5585ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 267.5585
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9858624Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9877138Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 274.0214ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 274.0214
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9894274Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             4224077fb37c326a
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:09.6802572Z
Activity.Duration:           00:00:00.3383858
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1653
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:10.0199249Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 339.6959ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 339.6959
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.0656115Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Tags - application/json 70
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 70
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.0680831Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.0699798Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.0903279Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateTag", controller = "Tags"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto) on controller MyOpenTelemetryApi.Api.Controllers.TagsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateTag", controller = "Tags"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.TagsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.1049868Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1449385Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  651b1f1e76cdb1a8
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@ToLower='?'], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @ToLower='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 651b1f1e76cdb1a8
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 78f5eaaa0913ba39
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            db5fdbb9c07c46f1dc21fbc3c232fb80
Activity.SpanId:             651b1f1e76cdb1a8
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       78f5eaaa0913ba39
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.1077746Z
Activity.Duration:           00:00:00.0396427
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1852883Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  35c802f372ae001a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (35ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 35
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 35c802f372ae001a
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 78f5eaaa0913ba39
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            db5fdbb9c07c46f1dc21fbc3c232fb80
Activity.SpanId:             35c802f372ae001a
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       78f5eaaa0913ba39
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.1498660Z
Activity.Duration:           00:00:00.0373750
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1883871Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 81.7142ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 81.7142
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1901675Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.TagDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.TagDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1921255Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) in 87.8872ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 87.8872
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1935876Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            db5fdbb9c07c46f1dc21fbc3c232fb80
Activity.SpanId:             78f5eaaa0913ba39
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.0655369Z
Activity.Duration:           00:00:00.1615848
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Tags
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 70
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2282421Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Tags - 201 - application/json;+charset=utf-8 162.7393ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 162.7393
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2643889Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Tags - application/json 64
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 64
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2665379Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2678249Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.2819281Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateTag", controller = "Tags"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto) on controller MyOpenTelemetryApi.Api.Controllers.TagsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateTag", controller = "Tags"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.TagsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.2955928Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3327119Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  d5187f7ff3e1f1e5
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (35ms) [Parameters=[@ToLower='?'], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 35
    parameters: @ToLower='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d5187f7ff3e1f1e5
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 421b614235180513
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            6fcbad8045a39b9b8037f618cd8b5b61
Activity.SpanId:             d5187f7ff3e1f1e5
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       421b614235180513
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.2980283Z
Activity.Duration:           00:00:00.0368509
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3693399Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  a4c36bf1a13ae21d
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: a4c36bf1a13ae21d
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 421b614235180513
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            6fcbad8045a39b9b8037f618cd8b5b61
Activity.SpanId:             a4c36bf1a13ae21d
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       421b614235180513
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.3363180Z
Activity.Duration:           00:00:00.0350569
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3728210Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 75.5427ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 75.5427
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3757415Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.TagDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.TagDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3785724Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) in 83.3405ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 83.3405
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3803452Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            6fcbad8045a39b9b8037f618cd8b5b61
Activity.SpanId:             421b614235180513
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.2643275Z
Activity.Duration:           00:00:00.1463028
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Tags
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 64
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4129746Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Tags - 201 - application/json;+charset=utf-8 148.6663ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 148.6663
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4486610Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Tags - application/json 70
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 70
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4519730Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4572056Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.4825831Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateTag", controller = "Tags"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto) on controller MyOpenTelemetryApi.Api.Controllers.TagsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateTag", controller = "Tags"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.TagsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.5046610Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.5373121Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  1d6c0e899c0421c8
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (30ms) [Parameters=[@ToLower='?'], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 30
    parameters: @ToLower='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 1d6c0e899c0421c8
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: aadf37f55e526020
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f885f029c326eabaa10897aa1f4c7006
Activity.SpanId:             1d6c0e899c0421c8
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       aadf37f55e526020
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.5074837Z
Activity.Duration:           00:00:00.0353425
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.5899896Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  4a3882155c03e349
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (41ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 41
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4a3882155c03e349
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: aadf37f55e526020
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f885f029c326eabaa10897aa1f4c7006
Activity.SpanId:             4a3882155c03e349
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       aadf37f55e526020
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.5489362Z
Activity.Duration:           00:00:00.0505869
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6037120Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 97.0085ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 97.0085
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6056763Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.TagDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.TagDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6090419Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) in 104.7309ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 104.7309
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6108843Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            f885f029c326eabaa10897aa1f4c7006
Activity.SpanId:             aadf37f55e526020
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.4486013Z
Activity.Duration:           00:00:00.1878070
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Tags
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 70
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6375856Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Tags - 201 - application/json;+charset=utf-8 189.0047ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 189.0047
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6723295Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Groups - application/json 97
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 97
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6744792Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6758280Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.6925858Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateGroup", controller = "Groups"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto) on controller MyOpenTelemetryApi.Api.Controllers.GroupsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateGroup", controller = "Groups"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.GroupsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.7070046Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7454536Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  b55ca84adffb4a6f
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: b55ca84adffb4a6f
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 7db78b5accf72123
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            2b176c81879325abbe3af256b491661f
Activity.SpanId:             b55ca84adffb4a6f
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       7db78b5accf72123
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.7091241Z
Activity.Duration:           00:00:00.0384760
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7487326Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 40.3082ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 40.3082
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7504633Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.GroupDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.GroupDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7525521Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) in 45.8987ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 45.8987
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7542401Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            2b176c81879325abbe3af256b491661f
Activity.SpanId:             7db78b5accf72123
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.6722869Z
Activity.Duration:           00:00:00.1080068
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Groups
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 97
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7814581Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Groups - 201 - application/json;+charset=utf-8 109.1910ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 109.191
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8155177Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Groups - application/json 102
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 102
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8176742Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8192043Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.8343339Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateGroup", controller = "Groups"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto) on controller MyOpenTelemetryApi.Api.Controllers.GroupsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateGroup", controller = "Groups"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.GroupsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.8482438Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8823072Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  53a05d87ddbdf87e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (31ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 31
    parameters: @p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 53a05d87ddbdf87e
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: f0f02a5242946b80
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            43a3232968aafe4ccfaeb429e272aa0c
Activity.SpanId:             53a05d87ddbdf87e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       f0f02a5242946b80
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.8516455Z
Activity.Duration:           00:00:00.0323961
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8852256Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 34.4916ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 34.4916
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8868816Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.GroupDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.GroupDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8885982Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) in 40.739ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 40.739
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8901127Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            43a3232968aafe4ccfaeb429e272aa0c
Activity.SpanId:             f0f02a5242946b80
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.8154690Z
Activity.Duration:           00:00:00.1005605
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Groups
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 102
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9180500Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Groups - 201 - application/json;+charset=utf-8 102.6177ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 102.6177
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9534752Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Groups - application/json 97
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 97
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9557754Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9573495Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.9724222Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateGroup", controller = "Groups"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto) on controller MyOpenTelemetryApi.Api.Controllers.GroupsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateGroup", controller = "Groups"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.GroupsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.9879636Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0207489Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  8162065aebafca72
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (30ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 30
    parameters: @p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 8162065aebafca72
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 42d42f2dcbf83858
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            cf4ae675c8a05f00941ce07ae8288f00
Activity.SpanId:             8162065aebafca72
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       42d42f2dcbf83858
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.9910252Z
Activity.Duration:           00:00:00.0316057
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0236045Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 33.4892ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 33.4892
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0250815Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.GroupDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.GroupDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0265898Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) in 39.0038ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 39.0038
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0286293Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            cf4ae675c8a05f00941ce07ae8288f00
Activity.SpanId:             42d42f2dcbf83858
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.9534327Z
Activity.Duration:           00:00:00.1013390
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Groups
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 97
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0557765Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Groups - 201 - application/json;+charset=utf-8 102.4080ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 102.408
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0923944Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1616
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1616
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0943072Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0957326Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:12.1118001Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:12.1274531Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.1292034Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  ac1e7498e755424e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Adam-2025-10-06-12-34-13 West-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Adam-2025-10-06-12-34-13
    LastName: West-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: ac1e7498e755424e
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: d18439f119443ea2
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.1689511Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  28c76bda558fea92
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 28c76bda558fea92
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             28c76bda558fea92
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.1321278Z
Activity.Duration:           00:00:00.0388728
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.2102378Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  46f290aea63d4175
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (38ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 38
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 46f290aea63d4175
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             46f290aea63d4175
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.1723526Z
Activity.Duration:           00:00:00.0401542
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.2488247Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  08f09ffc92a66dda
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (35ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 35
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 08f09ffc92a66dda
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             08f09ffc92a66dda
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.2138965Z
Activity.Duration:           00:00:00.0365970
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.2850306Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  42bfe443d825aa5a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42bfe443d825aa5a
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             42bfe443d825aa5a
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.2517213Z
Activity.Duration:           00:00:00.0352749
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3257097Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  f326f62830dc3abb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?', @p49='?' (DbType = Boolean), @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?', @p56='?' (DbType = Guid), @p57='?' (DbType = Guid), @p58='?' (DbType = Boolean), @p59='?', @p60='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p56, @p57, @p58, @p59, @p60);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?', @p49='?' (DbType = Boolean), @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?', @p56='?' (DbType = Guid), @p57='?' (DbType = Guid), @p58='?' (DbType = Boolean), @p59='?', @p60='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p56, @p57, @p58, @p59, @p60);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f326f62830dc3abb
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             f326f62830dc3abb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.2894166Z
Activity.Duration:           00:00:00.0392422
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p56, @p57, @p58, @p59, @p60);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3652088Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  ac1e7498e755424e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: bd591cae-7d7d-4bde-b0af-463ca6bd353f
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: bd591cae-7d7d-4bde-b0af-463ca6bd353f
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: ac1e7498e755424e
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: d18439f119443ea2
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             ac1e7498e755424e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       d18439f119443ea2
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:12.1291869Z
Activity.Duration:           00:00:00.2379897
Activity.Tags:
    contact.id: bd591cae-7d7d-4bde-b0af-463ca6bd353f
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3680806Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 238.8976ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 238.8976
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3698411Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3717797Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 244.9098ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 244.9098
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3732578Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             d18439f119443ea2
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:12.0923252Z
Activity.Duration:           00:00:00.3070819
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1616
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4005170Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 308.2161ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 308.2161
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4363632Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1585
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1585
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4383667Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4396433Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:12.4542298Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:12.4695954Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4709852Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  df5139b3a7775643
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Bruce-2025-10-06-12-34-13 Banner-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Bruce-2025-10-06-12-34-13
    LastName: Banner-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: df5139b3a7775643
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 15785f98f0829884
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.5041625Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  8a0b9006059f34ac
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (31ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 31
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 8a0b9006059f34ac
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             8a0b9006059f34ac
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.4734433Z
Activity.Duration:           00:00:00.0328639
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.5409383Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  99bb9043ddb2611f
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 99bb9043ddb2611f
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             99bb9043ddb2611f
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.5078330Z
Activity.Duration:           00:00:00.0349085
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.5721584Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  600efc56f5652414
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 600efc56f5652414
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             600efc56f5652414
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.5441396Z
Activity.Duration:           00:00:00.0299753
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6137830Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  1f393dddee813e7b
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?', @p41='?' (DbType = Boolean), @p42='?', @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?' (DbType = Boolean), @p51='?', @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p36, @p37);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p38, @p39, @p40, @p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?', @p41='?' (DbType = Boolean), @p42='?', @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?' (DbType = Boolean), @p51='?', @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p36, @p37);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p38, @p39, @p40, @p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 1f393dddee813e7b
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             1f393dddee813e7b
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.5762331Z
Activity.Duration:           00:00:00.0406158
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p36, @p37);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p38, @p39, @p40, @p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6501057Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  df5139b3a7775643
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: e70b8ada-7a2e-4096-9d8a-441d2f85c13c
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: e70b8ada-7a2e-4096-9d8a-441d2f85c13c
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: df5139b3a7775643
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 15785f98f0829884
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             df5139b3a7775643
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       15785f98f0829884
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:12.4709701Z
Activity.Duration:           00:00:00.1808524
Activity.Tags:
    contact.id: e70b8ada-7a2e-4096-9d8a-441d2f85c13c
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6527404Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 181.7754ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 181.7754
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6545264Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6561681Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 187.065ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 187.065
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6576886Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             15785f98f0829884
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:12.4363078Z
Activity.Duration:           00:00:00.2453667
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1585
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6829426Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 246.6557ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 246.6557
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7207933Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1583
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1583
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7229348Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7242246Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:12.7378456Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:12.7514988Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7528734Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  3a087ae501957987
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Diana-2025-10-06-12-34-13 Prince-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Diana-2025-10-06-12-34-13
    LastName: Prince-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3a087ae501957987
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: fb2c9b866e53db2c
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7889456Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fa348c97c5ef024e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (34ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 34
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fa348c97c5ef024e
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             fa348c97c5ef024e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.7552885Z
Activity.Duration:           00:00:00.0353741
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.8289569Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  7347b3251c9622eb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7347b3251c9622eb
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             7347b3251c9622eb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.7919541Z
Activity.Duration:           00:00:00.0387444
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.8690899Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  e157ec374aaa33b7
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e157ec374aaa33b7
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             e157ec374aaa33b7
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.8321904Z
Activity.Duration:           00:00:00.0389019
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9066457Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  5b15e3a1688fdc66
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?', @p42='?' (DbType = Boolean), @p43='?', @p44='?' (DbType = Guid), @p45='?' (DbType = Guid), @p46='?', @p47='?' (DbType = Boolean), @p48='?', @p49='?' (DbType = Guid), @p50='?' (DbType = Guid), @p51='?' (DbType = Boolean), @p52='?', @p53='?', @p54='?' (DbType = Guid), @p55='?' (DbType = Guid), @p56='?' (DbType = Boolean), @p57='?', @p58='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p39, @p40, @p41, @p42, @p43);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p44, @p45, @p46, @p47, @p48);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p49, @p50, @p51, @p52, @p53);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p54, @p55, @p56, @p57, @p58);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?', @p42='?' (DbType = Boolean), @p43='?', @p44='?' (DbType = Guid), @p45='?' (DbType = Guid), @p46='?', @p47='?' (DbType = Boolean), @p48='?', @p49='?' (DbType = Guid), @p50='?' (DbType = Guid), @p51='?' (DbType = Boolean), @p52='?', @p53='?', @p54='?' (DbType = Guid), @p55='?' (DbType = Guid), @p56='?' (DbType = Boolean), @p57='?', @p58='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p39, @p40, @p41, @p42, @p43);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p44, @p45, @p46, @p47, @p48);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p49, @p50, @p51, @p52, @p53);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p54, @p55, @p56, @p57, @p58);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 5b15e3a1688fdc66
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             5b15e3a1688fdc66
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.8733254Z
Activity.Duration:           00:00:00.0359468
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p39, @p40, @p41, @p42, @p43);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p44, @p45, @p46, @p47, @p48);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p49, @p50, @p51, @p52, @p53);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p54, @p55, @p56, @p57, @p58);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9453506Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  3a087ae501957987
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: f400e560-e40d-43a3-b569-669eacc307cc
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: f400e560-e40d-43a3-b569-669eacc307cc
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3a087ae501957987
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: fb2c9b866e53db2c
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             3a087ae501957987
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       fb2c9b866e53db2c
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:12.7528571Z
Activity.Duration:           00:00:00.1943567
Activity.Tags:
    contact.id: f400e560-e40d-43a3-b569-669eacc307cc
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9480489Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 195.2059ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 195.2059
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9496618Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9513503Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 200.3283ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 200.3283
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9527508Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             fb2c9b866e53db2c
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:12.7207456Z
Activity.Duration:           00:00:00.2547932
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1583
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9765093Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 255.7897ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 255.7897
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0161188Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1541
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1541
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0180394Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0192969Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:13.0339667Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:13.0479244Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0496621Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  acb44f05ccb2ccd6
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Peter-2025-10-06-12-34-13 Parker-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Peter-2025-10-06-12-34-13
    LastName: Parker-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: acb44f05ccb2ccd6
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 56a06c87af489d15
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0843945Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  d913c226c035d42e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (32ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 32
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d913c226c035d42e
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: acb44f05ccb2ccd6
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             d913c226c035d42e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       acb44f05ccb2ccd6
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.0526400Z
Activity.Duration:           00:00:00.0335270
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.1251951Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  a84a456e04e1ae6c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (38ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 38
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: a84a456e04e1ae6c
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: acb44f05ccb2ccd6
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             a84a456e04e1ae6c
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       acb44f05ccb2ccd6
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.0874217Z
Activity.Duration:           00:00:00.0396717
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.1635453Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  30669c4d2935150f
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (34ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?', @p39='?' (DbType = Boolean), @p40='?', @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?' (DbType = Boolean), @p49='?', @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p36, @p37, @p38, @p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 34
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?', @p39='?' (DbType = Boolean), @p40='?', @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?' (DbType = Boolean), @p49='?', @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p36, @p37, @p38, @p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 30669c4d2935150f
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: acb44f05ccb2ccd6
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             30669c4d2935150f
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       acb44f05ccb2ccd6
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.1290953Z
Activity.Duration:           00:00:00.0368611
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p36, @p37, @p38, @p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2013864Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  acb44f05ccb2ccd6
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: 8de7114d-e2ba-4033-b9c7-6879e4bc0c63
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: 8de7114d-e2ba-4033-b9c7-6879e4bc0c63
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: acb44f05ccb2ccd6
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 56a06c87af489d15
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             acb44f05ccb2ccd6
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       56a06c87af489d15
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:13.0496435Z
Activity.Duration:           00:00:00.1534487
Activity.Tags:
    contact.id: 8de7114d-e2ba-4033-b9c7-6879e4bc0c63
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2038471Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 154.209ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 154.209
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2057378Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2075792Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 160.2127ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 160.2127
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2092288Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             56a06c87af489d15
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:13.0160775Z
Activity.Duration:           00:00:00.2204168
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1541
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2376012Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 221.5412ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 221.5412
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2814723Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1653
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1653
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2836832Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2851123Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:13.3004509Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:13.3153234Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.3170458Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  e6e5c42e55f62f92
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Clark-2025-10-06-12-34-13 Kent-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Clark-2025-10-06-12-34-13
    LastName: Kent-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e6e5c42e55f62f92
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 3997fdcfca3fe3fa
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.3484504Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  d519751380d4acd8
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (29ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 29
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d519751380d4acd8
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             d519751380d4acd8
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.3195894Z
Activity.Duration:           00:00:00.0310990
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.3804700Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3d341d9c52257206
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3d341d9c52257206
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             3d341d9c52257206
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.3521244Z
Activity.Duration:           00:00:00.0304816
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.4172697Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  0caed7080ed2d074
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 0caed7080ed2d074
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             0caed7080ed2d074
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.3839982Z
Activity.Duration:           00:00:00.0352570
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.4491414Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  ce4e72741262e6fb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: ce4e72741262e6fb
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             ce4e72741262e6fb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.4206694Z
Activity.Duration:           00:00:00.0305565
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.4885095Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  20f1a6e5d457ca36
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 20f1a6e5d457ca36
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             20f1a6e5d457ca36
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.4527746Z
Activity.Duration:           00:00:00.0377558
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5292147Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  582d834bff9af7bb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 582d834bff9af7bb
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             582d834bff9af7bb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.4931254Z
Activity.Duration:           00:00:00.0386299
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5654131Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  e6e5c42e55f62f92
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: f08fb20e-bdaa-4c1c-9f62-6639e3e35813
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: f08fb20e-bdaa-4c1c-9f62-6639e3e35813
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e6e5c42e55f62f92
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 3997fdcfca3fe3fa
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             e6e5c42e55f62f92
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3997fdcfca3fe3fa
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:13.3170322Z
Activity.Duration:           00:00:00.2498006
Activity.Tags:
    contact.id: f08fb20e-bdaa-4c1c-9f62-6639e3e35813
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5675247Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 250.5039ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 250.5039
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5688811Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5703443Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 255.5099ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 255.5099
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5715806Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             3997fdcfca3fe3fa
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:13.2814308Z
Activity.Duration:           00:00:00.3123653
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1653
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5947536Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 313.3415ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 313.3415
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Resource associated with Metrics:
        service.name: MyOpenTelemetryApi
        service.version: 1.0.0
        service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
        telemetry.sdk.name: opentelemetry
        telemetry.sdk.language: dotnet
        telemetry.sdk.version: 1.13.0

Metric Name: process.memory.usage, Description: The amount of physical memory in use., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9639090Z, 2025-10-06T16:34:16.0554457Z]
Value: 218050560

Metric Name: process.memory.virtual, Description: The amount of committed virtual memory., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9649870Z, 2025-10-06T16:34:16.0554461Z]
Value: 2481115238400

Metric Name: process.cpu.time, Description: Total CPU seconds broken down by different states., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:16.0554465Z] process.cpu.state: user
Value: 6.484375
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:16.0554465Z] process.cpu.state: system
Value: 0.859375

Metric Name: process.cpu.count, Description: The number of processors (CPU cores) available to the current process., Unit: {processors}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652277Z, 2025-10-06T16:34:16.0554467Z]
Value: 12

Metric Name: process.thread.count, Description: Process threads count., Unit: {thread}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652369Z, 2025-10-06T16:34:16.0554468Z]
Value: 41

Metric Name: kestrel.active_connections, Description: Number of connections that are currently active on the server., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9652531Z, 2025-10-06T16:34:16.0554473Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.connection.duration, Description: The duration of connections on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9657932Z, 2025-10-06T16:34:16.0554480Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 5.3863993 Count: 22 Min: 0.1107307 Max: 0.711793
(-Infinity,0.01]:0
(0.01,0.02]:0
(0.02,0.05]:0
(0.05,0.1]:0
(0.1,0.2]:10
(0.2,0.5]:10
(0.5,1]:2
(1,2]:0
(2,5]:0
(5,10]:0
(10,30]:0
(30,60]:0
(60,120]:0
(120,300]:0
(300,+Infinity]:0


Metric Name: kestrel.queued_connections, Description: Number of connections that are currently queued and are waiting to start., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658179Z, 2025-10-06T16:34:16.0554487Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.queued_requests, Description: Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658271Z, 2025-10-06T16:34:16.0554490Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.tls_handshake.duration, Description: The duration of TLS handshakes on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658578Z, 2025-10-06T16:34:16.0554500Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 0.14036469999999998 Count: 22 Min: 0.0055879 Max: 0.0095863
(-Infinity,0.005]:0
(0.005,0.01]:22
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:0
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: kestrel.active_tls_handshakes, Description: Number of TLS handshakes that are currently in progress on the server., Unit: {handshake}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658712Z, 2025-10-06T16:34:16.0554503Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: http.server.active_requests, Description: Number of active HTTP server requests., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665295Z, 2025-10-06T16:34:16.0554509Z] http.request.method: POST url.scheme: https
Value: 0

Metric Name: http.server.request.duration, Description: Duration of HTTP server requests., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:16.0554523Z] http.request.method: POST http.response.status_code: 201 http.route: api/Tags network.protocol.version: 2 url.scheme: https
Value: Sum: 1.5320976999999998 Count: 6 Min: 0.1486663 Max: 0.6729304
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:5
(0.25,0.5]:0
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:16.0554523Z] http.request.method: POST http.response.status_code: 201 http.route: api/Groups network.protocol.version: 2 url.scheme: https
Value: Sum: 0.6624161 Count: 6 Min: 0.102408 Max: 0.1323369
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:6
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:16.0554523Z] http.request.method: POST http.response.status_code: 201 http.route: api/Contacts network.protocol.version: 2 url.scheme: https
Value: Sum: 2.9588364 Count: 10 Min: 0.2215412 Max: 0.5106006
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:3
(0.25,0.5]:6
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: dotnet.gc.collections, Description: The number of garbage collections that have occurred since the process has started., Unit: {collection}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:16.0554525Z] gc.heap.generation: gen2
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:16.0554525Z] gc.heap.generation: gen1
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:16.0554525Z] gc.heap.generation: gen0
Value: 2

Metric Name: dotnet.process.memory.working_set, Description: The number of bytes of physical memory mapped to the process context., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665548Z, 2025-10-06T16:34:16.0554527Z]
Value: 218079232

Metric Name: dotnet.gc.heap.total_allocated, Description: The approximate number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665597Z, 2025-10-06T16:34:16.0554528Z]
Value: 50581512

Metric Name: dotnet.gc.last_collection.memory.committed_size, Description: The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665650Z, 2025-10-06T16:34:16.0554529Z]
Value: 13565952

Metric Name: dotnet.gc.last_collection.heap.size, Description: The managed GC heap size (including fragmentation), as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: gen1
Value: 1042568
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: gen2
Value: 3800856
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: loh
Value: 3270784
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: poh
Value: 58240

Metric Name: dotnet.gc.last_collection.heap.fragmentation.size, Description: The heap fragmentation, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: gen1
Value: 602336
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: gen2
Value: 176104
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: loh
Value: 736
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: poh
Value: 0

Metric Name: dotnet.gc.pause.time, Description: The total amount of time paused in GC since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701062Z, 2025-10-06T16:34:16.0554534Z]
Value: 0.014596

Metric Name: dotnet.jit.compiled_il.size, Description: Count of bytes of intermediate language that have been compiled since the process has started., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701174Z, 2025-10-06T16:34:16.0554538Z]
Value: 2332434

Metric Name: dotnet.jit.compiled_methods, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: {method}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701251Z, 2025-10-06T16:34:16.0554539Z]
Value: 29983

Metric Name: dotnet.jit.compilation.time, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701358Z, 2025-10-06T16:34:16.0554540Z]
Value: 6.7026968

Metric Name: dotnet.monitor.lock_contentions, Description: The number of times there was contention when trying to acquire a monitor lock since the process has started., Unit: {contention}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701429Z, 2025-10-06T16:34:16.0554543Z]
Value: 3

Metric Name: dotnet.thread_pool.thread.count, Description: The number of thread pool threads that currently exist., Unit: {thread}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701527Z, 2025-10-06T16:34:16.0554544Z]
Value: 6

Metric Name: dotnet.thread_pool.work_item.count, Description: The number of work items that the thread pool has completed since the process has started., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701694Z, 2025-10-06T16:34:16.0554546Z]
Value: 1197

Metric Name: dotnet.thread_pool.queue.length, Description: The number of work items that are currently queued to be processed by the thread pool., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701765Z, 2025-10-06T16:34:16.0554547Z]
Value: 0

Metric Name: dotnet.timer.count, Description: The number of timer instances that are currently active. An active timer is registered to tick at some point in the future and has not yet been canceled., Unit: {timer}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701834Z, 2025-10-06T16:34:16.0554548Z]
Value: 2

Metric Name: dotnet.assembly.count, Description: The number of .NET assemblies that are currently loaded., Unit: {assembly}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701915Z, 2025-10-06T16:34:16.0554549Z]
Value: 171

Metric Name: dotnet.exceptions, Description: The number of exceptions that have been thrown in managed code., Unit: {exception}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701984Z, 2025-10-06T16:34:16.0554553Z] error.type: NotSupportedException
Value: 132

Metric Name: dotnet.process.cpu.count, Description: The number of processors available to the process., Unit: {cpu}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702055Z, 2025-10-06T16:34:16.0554555Z]
Value: 12

Metric Name: dotnet.process.cpu.time, Description: CPU time used by the process., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:16.0554557Z] cpu.mode: user
Value: 6.484375
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:16.0554557Z] cpu.mode: system
Value: 0.859375

Metric Name: aspnetcore.routing.match_attempts, Description: Number of requests that were attempted to be matched to an endpoint., Unit: {match_attempt}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Routing
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:16.0554560Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Tags
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:16.0554560Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Groups
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:16.0554560Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Contacts
Value: 10

Metric Name: contacts.created, Description: Number of contacts created, Unit: contacts, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: MyOpenTelemetryApi.Contacts
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Wayne Enterprises-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Stark Industries-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Themyscira Inc-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Bugle-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Planet-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Wayne Enterprises-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Stark Industries-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Themyscira Inc-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Bugle-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Planet-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
Resource associated with Metrics:
        service.name: MyOpenTelemetryApi
        service.version: 1.0.0
        service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
        telemetry.sdk.name: opentelemetry
        telemetry.sdk.language: dotnet
        telemetry.sdk.version: 1.13.0

Metric Name: process.memory.usage, Description: The amount of physical memory in use., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9639090Z, 2025-10-06T16:34:25.9604053Z]
Value: 208486400

Metric Name: process.memory.virtual, Description: The amount of committed virtual memory., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9649870Z, 2025-10-06T16:34:25.9604058Z]
Value: 2481115238400

Metric Name: process.cpu.time, Description: Total CPU seconds broken down by different states., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:25.9604061Z] process.cpu.state: user
Value: 6.5
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:25.9604061Z] process.cpu.state: system
Value: 0.875

Metric Name: process.cpu.count, Description: The number of processors (CPU cores) available to the current process., Unit: {processors}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652277Z, 2025-10-06T16:34:25.9604063Z]
Value: 12

Metric Name: process.thread.count, Description: Process threads count., Unit: {thread}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652369Z, 2025-10-06T16:34:25.9604065Z]
Value: 41

Metric Name: kestrel.active_connections, Description: Number of connections that are currently active on the server., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9652531Z, 2025-10-06T16:34:25.9604088Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.connection.duration, Description: The duration of connections on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9657932Z, 2025-10-06T16:34:25.9604094Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 5.3863993 Count: 22 Min: 0.1107307 Max: 0.711793
(-Infinity,0.01]:0
(0.01,0.02]:0
(0.02,0.05]:0
(0.05,0.1]:0
(0.1,0.2]:10
(0.2,0.5]:10
(0.5,1]:2
(1,2]:0
(2,5]:0
(5,10]:0
(10,30]:0
(30,60]:0
(60,120]:0
(120,300]:0
(300,+Infinity]:0


Metric Name: kestrel.queued_connections, Description: Number of connections that are currently queued and are waiting to start., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658179Z, 2025-10-06T16:34:25.9604101Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.queued_requests, Description: Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658271Z, 2025-10-06T16:34:25.9604106Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.tls_handshake.duration, Description: The duration of TLS handshakes on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658578Z, 2025-10-06T16:34:25.9604115Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 0.14036469999999998 Count: 22 Min: 0.0055879 Max: 0.0095863
(-Infinity,0.005]:0
(0.005,0.01]:22
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:0
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: kestrel.active_tls_handshakes, Description: Number of TLS handshakes that are currently in progress on the server., Unit: {handshake}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658712Z, 2025-10-06T16:34:25.9604119Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: http.server.active_requests, Description: Number of active HTTP server requests., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665295Z, 2025-10-06T16:34:25.9604124Z] http.request.method: POST url.scheme: https
Value: 0

Metric Name: http.server.request.duration, Description: Duration of HTTP server requests., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:25.9604135Z] http.request.method: POST http.response.status_code: 201 http.route: api/Tags network.protocol.version: 2 url.scheme: https
Value: Sum: 1.5320976999999998 Count: 6 Min: 0.1486663 Max: 0.6729304
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:5
(0.25,0.5]:0
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:25.9604135Z] http.request.method: POST http.response.status_code: 201 http.route: api/Groups network.protocol.version: 2 url.scheme: https
Value: Sum: 0.6624161 Count: 6 Min: 0.102408 Max: 0.1323369
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:6
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:25.9604135Z] http.request.method: POST http.response.status_code: 201 http.route: api/Contacts network.protocol.version: 2 url.scheme: https
Value: Sum: 2.9588364 Count: 10 Min: 0.2215412 Max: 0.5106006
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:3
(0.25,0.5]:6
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: dotnet.gc.collections, Description: The number of garbage collections that have occurred since the process has started., Unit: {collection}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:25.9604136Z] gc.heap.generation: gen2
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:25.9604136Z] gc.heap.generation: gen1
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:25.9604136Z] gc.heap.generation: gen0
Value: 2

Metric Name: dotnet.process.memory.working_set, Description: The number of bytes of physical memory mapped to the process context., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665548Z, 2025-10-06T16:34:25.9604138Z]
Value: 208629760

Metric Name: dotnet.gc.heap.total_allocated, Description: The approximate number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665597Z, 2025-10-06T16:34:25.9604139Z]
Value: 50907872

Metric Name: dotnet.gc.last_collection.memory.committed_size, Description: The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665650Z, 2025-10-06T16:34:25.9604140Z]
Value: 13565952

Metric Name: dotnet.gc.last_collection.heap.size, Description: The managed GC heap size (including fragmentation), as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: gen1
Value: 1042568
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: gen2
Value: 3800856
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: loh
Value: 3270784
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: poh
Value: 58240

Metric Name: dotnet.gc.last_collection.heap.fragmentation.size, Description: The heap fragmentation, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: gen1
Value: 602336
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: gen2
Value: 176104
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: loh
Value: 736
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: poh
Value: 0

Metric Name: dotnet.gc.pause.time, Description: The total amount of time paused in GC since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701062Z, 2025-10-06T16:34:25.9604145Z]
Value: 0.014596

Metric Name: dotnet.jit.compiled_il.size, Description: Count of bytes of intermediate language that have been compiled since the process has started., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701174Z, 2025-10-06T16:34:25.9604146Z]
Value: 2336179

Metric Name: dotnet.jit.compiled_methods, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: {method}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701251Z, 2025-10-06T16:34:25.9604148Z]
Value: 30034

Metric Name: dotnet.jit.compilation.time, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701358Z, 2025-10-06T16:34:25.9604149Z]
Value: 6.7128693

Metric Name: dotnet.monitor.lock_contentions, Description: The number of times there was contention when trying to acquire a monitor lock since the process has started., Unit: {contention}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701429Z, 2025-10-06T16:34:25.9604152Z]
Value: 3

Metric Name: dotnet.thread_pool.thread.count, Description: The number of thread pool threads that currently exist., Unit: {thread}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701527Z, 2025-10-06T16:34:25.9604153Z]
Value: 6

Metric Name: dotnet.thread_pool.work_item.count, Description: The number of work items that the thread pool has completed since the process has started., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701694Z, 2025-10-06T16:34:25.9604155Z]
Value: 1224

Metric Name: dotnet.thread_pool.queue.length, Description: The number of work items that are currently queued to be processed by the thread pool., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701765Z, 2025-10-06T16:34:25.9604156Z]
Value: 0

Metric Name: dotnet.timer.count, Description: The number of timer instances that are currently active. An active timer is registered to tick at some point in the future and has not yet been canceled., Unit: {timer}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701834Z, 2025-10-06T16:34:25.9604157Z]
Value: 2

Metric Name: dotnet.assembly.count, Description: The number of .NET assemblies that are currently loaded., Unit: {assembly}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701915Z, 2025-10-06T16:34:25.9604161Z]
Value: 171

Metric Name: dotnet.exceptions, Description: The number of exceptions that have been thrown in managed code., Unit: {exception}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701984Z, 2025-10-06T16:34:25.9604164Z] error.type: NotSupportedException
Value: 132

Metric Name: dotnet.process.cpu.count, Description: The number of processors available to the process., Unit: {cpu}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702055Z, 2025-10-06T16:34:25.9604165Z]
Value: 12

Metric Name: dotnet.process.cpu.time, Description: CPU time used by the process., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:25.9604166Z] cpu.mode: user
Value: 6.5
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:25.9604166Z] cpu.mode: system
Value: 0.875

Metric Name: aspnetcore.routing.match_attempts, Description: Number of requests that were attempted to be matched to an endpoint., Unit: {match_attempt}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Routing
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:25.9604169Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Tags
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:25.9604169Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Groups
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:25.9604169Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Contacts
Value: 10

Metric Name: contacts.created, Description: Number of contacts created, Unit: contacts, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: MyOpenTelemetryApi.Contacts
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Wayne Enterprises-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Stark Industries-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Themyscira Inc-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Bugle-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Planet-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Wayne Enterprises-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Stark Industries-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Themyscira Inc-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Bugle-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Planet-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1



================================================================================
FILE: docs\Windows PowerShell.txt
SIZE: 47.53 KB
MODIFIED: 10/08/2025 14:22:44
================================================================================

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\kushal> git --version
git version 2.51.0.windows.1
PS C:\Users\kushal> winget
Windows Package Manager v1.11.510
Copyright (c) Microsoft Corporation. All rights reserved.

The winget command line utility enables installing applications and other packages from the command line.

usage: winget  [<command>] [<options>]

The following commands are available:
  install    Installs the given package
  show       Shows information about a package
  source     Manage sources of packages
  search     Find and show basic info of packages
  list       Display installed packages
  upgrade    Shows and performs available upgrades
  uninstall  Uninstalls the given package
  hash       Helper to hash installer files
  validate   Validates a manifest file
  settings   Open settings or set administrator settings
  features   Shows the status of experimental features
  export     Exports a list of the installed packages
  import     Installs all the packages in a file
  pin        Manage package pins
  configure  Configures the system into a desired state
  download   Downloads the installer from a given package
  repair     Repairs the selected package
  dscv3      DSC v3 resource commands

For more details on a specific command, pass it the help argument. [-?]

The following options are available:
  -v,--version                Display the version of the tool
  --info                      Display general info of the tool
  -?,--help                   Shows help about the selected command
  --wait                      Prompts the user to press any key before exiting
  --logs,--open-logs          Open the default logs location
  --verbose,--verbose-logs    Enables verbose logging for winget
  --nowarn,--ignore-warnings  Suppresses warning outputs
  --disable-interactivity     Disable interactive prompts
  --proxy                     Set a proxy to use for this execution
  --no-proxy                  Disable the use of proxy for this execution

More help can be found at: https://aka.ms/winget-command-help
PS C:\Users\kushal> winget search git
The `msstore` source requires that you view the following agreements before using.
Terms of Transaction: https://aka.ms/microsoft-store-terms-of-transaction
The source requires the current machine's 2-letter geographic region to be sent to the backend service to function properly (ex. "US").

Do you agree to all the source agreements terms?
[Y] Yes  [N] No: y
Name                                  Id                              Version      Match    Source
---------------------------------------------------------------------------------------------------
My Git                                9NLVK2SL2SSP                    Unknown               msstore
GitFiend                              9NMNKLTSZNKC                    Unknown               msstore
GitLooker                             9PK6TGX9T87P                    Unknown               msstore
Git                                   Git.Git                         2.51.0.2              winget
Git                                   Microsoft.Git                   2.51.0.0.3            winget
RepoZ                                 AndreasWascher.RepoZ            5.5          Tag: git winget
Araxis Merge                          Araxis.Merge                    2025.1       Tag: git winget
Sourcetree                            Atlassian.Sourcetree            3.4.26       Tag: git winget
GitKraken                             Axosoft.GitKraken               11.4.0       Tag: git winget
Commitly                              Commitly.Commitly               1.1.2        Tag: git winget
ä¸­æ–‡Git                               DuckStudio.ChineseGit           3.3          Tag: git winget
Fork - a fast and friendly git client Fork.Fork                       2.12.2       Tag: git winget
GLab                                  GLab.GLab                       1.73.0       Tag: git winget
MinGit                                Git.MinGit                      2.51.0.2     Tag: git winget
BusyBox-based MinGit                  Git.MinGit.BusyBox              2.50.1       Tag: git winget
GitButler                             GitButler.GitButler             0.16.8       Tag: git winget
Git Extensions                        GitExtensionsTeam.GitExtensions 5.2.1.18061  Tag: git winget
GitHub Desktop                        GitHub.GitHubDesktop            3.5.3        Tag: git winget
GitHub Desktop Beta                   GitHub.GitHubDesktop.Beta       3.4.17-beta3 Tag: git winget
Git LFS                               GitHub.GitLFS                   3.7.0        Tag: git winget
GitHub CLI                            GitHub.cli                      2.81.0       Tag: git winget
git-sizer                             GitHub.git-sizer                1.5.0        Tag: git winget
smimesign                             GitHub.smimesign                0.2.0-rc1    Tag: git winget
GitTools GitVersion                   GitTools.GitVersion             6.4.0        Tag: git winget
Gitleaks                              Gitleaks.Gitleaks               8.28.0       Tag: git winget
jreleaser                             JReleaser.jreleaser             1.20.0       Tag: git winget
Oh My Posh                            JanDeDobbeleer.OhMyPosh         27.1.2       Tag: git winget
lazygit                               JesseDuffield.lazygit           0.55.1       Tag: git winget
JetBrains Space                       JetBrains.Space                 2023.1.7     Tag: git winget
Gittyup                               Murmele.Gittyup                 1.4.0        Tag: git winget
GitBlade                              Pirinel.GitBlade                00.00.8.9    Tag: git winget
RelaGit                               Rela.RelaGit                    0.16.9       Tag: git winget
Tower                                 SaaSGroup.Tower                 9.3.532      Tag: git winget
PullWatch                             ShipDigital.PullWatch           1.7.13       Tag: git winget
gitui                                 StephanDilly.gitui              0.27.0       Tag: git winget
Sublime Merge                         SublimeHQ.SublimeMerge          2112         Tag: git winget
Sublime Merge (Dev)                   SublimeHQ.SublimeMerge.Dev      2057         Tag: git winget
Talisman                              Thoughtworks.Talisman           1.37.0       Tag: git winget
GitFiend                              TobySuggate.GitFiend            0.45.3       Tag: git winget
TortoiseGit                           TortoiseGit.TortoiseGit         2.17.0.2     Tag: git winget
TortoiseSVN                           TortoiseSVN.TortoiseSVN         1.14.9.29743 Tag: git winget
Agent Git                             Xidicone.AgentGit               1.88         Tag: git winget
Gource                                acaudwell.Gource                0.53         Tag: git winget
GitQL                                 amrdeveloper.gitql              0.37.0       Tag: git winget
soft-serve                            charmbracelet.soft-serve        0.10.0       Tag: git winget
delta                                 dandavison.delta                0.18.2       Tag: git winget
dev-sidecar                           docmirror.dev-sidecar           2.0.0        Tag: git winget
Lefthook                              evilmartians.lefthook           1.13.6       Tag: git winget
git-cola                              git-cola.git-cola               4.15.0       Tag: git winget
gittuf                                gittuf.gittuf                   0.12.0       Tag: git winget
git-credential-azure                  hickford.git-credential-azure   0.3.1        Tag: git winget
git-credential-oauth                  hickford.git-credential-oauth   0.16.0       Tag: git winget
jj                                    jj-vcs.jj                       0.34.0       Tag: git winget
BlastMerge                            ktsu.BlastMerge                 1.0.19       Tag: git winget
jj                                    martinvonz.jj                   0.30.0       Tag: git winget
onefetch                              o2sh.onefetch                   2.25.0       Tag: git winget
git-cliff                             orhun.git-cliff                 2.10.1       Tag: git winget
git-age                               prskr.git-age                   0.2.4        Tag: git winget
git-absorb                            tummychow.git-absorb            0.8.0        Tag: git winget
ghq                                   x-motemen.ghq                   1.8.0        Tag: git winget
GitNote                               zhaopengme.gitnote              3.1.0        Tag: git winget
Fundels                               CartamundiDigital.Fundels       3.2.8                 winget
FastGithub                            CoolPlayLin.FastGithub          2.1.4                 winget
MaxTo                                 DigitalCreations.MaxTo          2.2.1                 winget
DD-TV                                 DigitalDevices.DD-TV            1.15.0.0              winget
Soulframe                             DigitalExtremes.Soulframe       1.0.0                 winget
Warframe                              DigitalExtremes.Warframe        1.0.0                 winget
doctl                                 DigitalOcean.Doctl              1.145.0               winget
Tropy                                 DigitalScholar.Tropy            1.16.2                winget
Zotero                                DigitalScholar.Zotero           7.0.24                winget
Papers                                DigitalScience.Papers           4.37.2395             winget
Duplicate Cleaner Free 4              DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.2                 winget
Duplicate Cleaner Pro 4               DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.4                 winget
Duplicate Cleaner Pro 5               DigitalVolcanoSoftware.Duplicaâ€¦ 5.25.0.0              winget
Hash Tool                             DigitalVolcanoSoftware.HashTool 1.2.1                 winget
TaskCanvas                            DigitalVolcanoSoftware.TaskCanâ€¦ 1.4                   winget
TextCrawler Free                      DigitalVolcanoSoftware.TextCraâ€¦ 3.1.2                 winget
TextCrawler Pro                       DigitalVolcanoSoftware.TextCraâ€¦ 3.1.3                 winget
DQViewer                              DigiteqAutomotive.DQViewer      4.3                   winget
GitHub æ ‡ç­¾ç®¡ç†å™¨                     DuckStudio.GitHubLabelsManager  1.13                  winget
GitHubView                            DuckStudio.GitHubView           1.0.5                 winget
GitHubView (Nightly)                  DuckStudio.GitHubView.Nightly   2025.09.08.â€¦          winget
Git Credential Manager (User)         Git.GCM                         2.6.1                 winget
Git for Windows SDK                   Git.SDK                         1.0.8                 winget
GitAhead                              GitAhead.GitAhead               2.7.1                 winget
Atom                                  GitHub.Atom                     1.60.0                winget
Atom Beta                             GitHub.Atom.Beta                1.61.0-beta0          winget
classroom-assistant                   GitHub.ClassroomAssistant       2.0.4                 winget
hub                                   GitHub.hub                      2.14.2                winget
GitKraken CLI                         GitKraken.cli                   3.1.40                winget
tea                                   Gitea.tea                       0.9.2                 winget
Gitify                                Gitify.Gitify                   6.9.1                 winget
GitLab Runner                         Gitlab.Runner                   18.4.0                winget
AnimeBack                             LeGitHubDeTai.AnimeBack         8.0.9                 winget
Lingdys 4                             LingitAS.Lingdys4               4.5.149.0             winget
Logitech Camera Settings              Logitech.CameraSettings         2.12.20.0             winget
Logitech Gamepad F710 Connection Utiâ€¦ Logitech.F710ConnectUtility     2.15.264              winget
Logitech G HUB                        Logitech.GHUB                   2025.7.7683â€¦          winget
Logitech Gaming Software              Logitech.LGS                    9.04.49               winget
Logi Bolt                             Logitech.LogiBolt               1.2.6024.0            winget
Logi Tune                             Logitech.LogiTune               3.11.89.0             winget
MyHarmony                             Logitech.MyHarmony              1.0.308               winget
Logitech Onboard Memory Manager       Logitech.OnboardMemoryManager   2.5.358               winget
Logitech Options                      Logitech.Options                10.26.12              winget
Logi Options+                         Logitech.OptionsPlus            1.96.781095           winget
Logitech Presentation                 Logitech.Presentation           2.10.34               winget
Logitech SetPoint                     Logitech.SetPoint               6.90.66               winget
Logitech Solar App                    Logitech.Solar                  1.20.28               winget
Logitech Sync                         Logitech.Sync                   3.8.254.0             winget
Logitech Unifying Software            Logitech.UnifyingSoftware       2.52.33               winget
GitHub extension for Command Palette  Microsoft.CmdPalGitHubExtension 0.103.178.0           winget
GVFS                                  Microsoft.VFSforGit             1.0.25169.1           winget
Reduce Audio Latency                  MiniantGit.REAL                 0.2.0                 winget
ISY Linker                            NorconsultDigital.ISYLinker     11.6.0.0              winget
Igitt                                 Nstr.Igitt                      v0.1.13               winget
GitHubReleaseNotes                    StefHeyenrath.GitHubReleaseNotâ€¦ 1.0.10.1              winget
SmartGit                              Syntevo.SmartGit                24.1.3                winget
Snagit 2020                           TechSmith.Snagit.2020           20.1.8.16558          winget
Snagit 2021                           TechSmith.Snagit.2021           21.4.7                winget
Snagit 2022                           TechSmith.Snagit.2022           22.1.7                winget
Snagit 2023                           TechSmith.Snagit.2023           23.2.6                winget
Snagit 2024                           TechSmith.Snagit.2024           24.3.4                winget
Snagit 2025                           TechSmith.Snagit.2025           25.3.1                winget
Fusion Digital Power Designer         TexasInstruments.FusionDigitalâ€¦ 7.10.1                winget
Kitfox                                WesternDigital.Kitfox           1.1.1.1               winget
WD Security                           WesternDigital.Security         2.1.4.358             winget
WimyGit                               Wimysoft.WimyGit                1.2.0                 winget
gitsqlite                             danielsiegl.gitsqlite           0.8.0                 winget
poke-cli                              digitalghost-dev.poke-cli       1.5.2                 winget
Thermal                               gitthermal.thermal              0.0.4                 winget
gitg                                  gnome.gitg                      41                    winget
Upgit                                 pluveto.Upgit                   0.2.18                winget
Dragit                                sireliah.dragit                 0.7.1                 winget
SourceGit                             sourcegit-scm.SourceGit         2025.35               winget
git-grab                              wezm.git-grab                   3.0.0                 winget
regit                                 woaitsAryan.regit               0.4.2                 winget
WSJT-X: Digital Modes for Weak Signaâ€¦ JoeTaylor.WSJT-X                2.7.0                 winget
IPVTest                               Vipre.IPVTest                   1.0.0.0      Commandâ€¦ winget
Adobe DNG Converter                   Adobe.DNGConverter              17.5.1       Tag: diâ€¦ winget
ç™¾åº¦è¯­éŸ³è¾“å…¥                          Baidu.BaiduSpeechInput          2.0.0.33     Tag: loâ€¦ winget
CloudShow Launcher                    BinaryFortress.CloudShow        6.5.0.0      Tag: diâ€¦ winget
Dragonframe 2025                      DZEDSystems.Dragonframe         2025.05.4    Tag: diâ€¦ winget
NVC VHDL Simulator                    NickGasson.NVC                  1.18.0       Tag: diâ€¦ winget
Logisim-evolution                     logisim-evolution.logisim-evolâ€¦ 3.9.0        Tag: diâ€¦ winget
Bit4id - Firma4ng-InfoCamere          Bit4id.Firma4ng.InfoCamere      1.6.14       Tag: diâ€¦ winget
DigiDoc4 Client                       RIA.DigiDoc4                    4.8.2        Tag: diâ€¦ winget
eID software                          RIA.eIDsoftware                 25.8.18.8398 Tag: diâ€¦ winget
WSL Manager                           Bostrot.WSLManager              1.8.17       Tag: giâ€¦ winget
DRA                                   CosimoMatteini.DRA              0.9.0        Tag: giâ€¦ winget
Lepton                                CosmoX.Lepton                   1.10.0       Tag: giâ€¦ winget
AppInstaller File Builder(Preview)    Microsoft.AppInstallerFileBuilâ€¦ 1.2020.221.0 Tag: giâ€¦ winget
Cacher                                PenguinLabs.Cacher              2.43.2       Tag: giâ€¦ winget
Eget                                  ZacharyYedidia.Eget             1.3.4        Tag: giâ€¦ winget
MarkRight                             dvcrn.markright                 0.1.11       Tag: giâ€¦ winget
grp                                   feraxhp.grp                     0.7.4        Tag: giâ€¦ winget
act                                   nektos.act                      0.2.81       Tag: giâ€¦ winget
REAPER                                Cockos.REAPER                   7.48         Tag: diâ€¦ winget
LMMS                                  LMMS.LMMS                       1.2.2        Tag: diâ€¦ winget
Renoise                               Renoise.Renoise                 3.4.4        Tag: diâ€¦ winget
YYè°ƒéŸ³å°                              YY.YYAudio                      1.23.4.0     Tag: diâ€¦ winget
DAWG                                  dawg.dawg                       0.2.3        Tag: diâ€¦ winget
Corsair iCUE5 Software                Corsair.iCUE.5                  5.34.66      Tag: coâ€¦ winget
Dolt                                  DoltHub.Dolt                    1.59.18      Tag: giâ€¦ winget
Gridea                                EryouHao.Gridea                 0.9.3        Tag: giâ€¦ winget
Flux                                  FluxCD.Flux                     2.7.0        Tag: giâ€¦ winget
Cobalt SSG                            cobalt-org.cobalt               0.20.0       Tag: giâ€¦ winget
Ferium                                GorillaDevs.Ferium              4.7.1        Tag: giâ€¦ winget
VEC DigiLib                           LAVANJV.vecdigilib              1.0.0        Tag: diâ€¦ winget
HeadsetControl-GUI                    LeoKlaus.HeadsetControl-GUI     0.19.5       Tag: Loâ€¦ winget
OpenHantek6022                        OpenHantek.OpenHantek6022       3.4.0        Tag: diâ€¦ winget
ChanSort                              PredatH0r.ChanSort              2025-03-08   Tag: diâ€¦ winget
RescueTime                            RescueTime.DesktopApp           3.2.11.5     Tag: diâ€¦ winget
SatDump                               SatDump.SatDump                 1.2.2        Tag: diâ€¦ winget
ArtHub                                Tencent.ArtHub                  1.18.0       Tag: diâ€¦ winget
WK Radar                              WK.WKRadar                      7.16.0       Tag: Baâ€¦ winget
FileQL                                amrdeveloper.fileql             0.10.0       Tag: giâ€¦ winget
direnv                                direnv.direnv                   2.37.1       Tag: giâ€¦ winget
score                                 ossia.score                     3.7.1        Tag: diâ€¦ winget
actionlint                            rhysd.actionlint                1.7.7        Tag: giâ€¦ winget
PS3 Media Server                      shagrath.PS3MediaServer         1.90.1       Tag: diâ€¦ winget
SoX_ng                                sox_ng.sox_ng                   14.6.0.4     Tag: diâ€¦ winget
xploview                              xploview.xploview               3.3.31       Tag: diâ€¦ winget
PS C:\Users\kushal> winget list Git.Git
Name Id      Version Available Source
-------------------------------------
Git  Git.Git 2.51.0  2.51.0.2  winget
PS C:\Users\kushal> winget show Git.Git
Found Git [Git.Git]
Version: 2.51.0.2
Publisher: The Git Development Community
Publisher Url: https://gitforwindows.org/
Publisher Support Url: https://github.com/git-for-windows/git/issues
Moniker: git
Description:
  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
  Git for Windows focuses on offering a lightweight, native set of tools that bring the full feature set of the Git SCM to Windows while providing appropriate user interfaces for experienced Git users and novices alike.
Homepage: https://gitforwindows.org/
License: GPL-2.0
License Url: https://github.com/git-for-windows/build-extra/blob/HEAD/LICENSE.txt
Copyright: Copyright (C) 1989, 1991 Free Software Foundation, Inc.
Release Notes:
  Changes since Git for Windows v2.51.0 (August 19th 2025)
  New Features
  - Comes with PCRE2 v10.46.
  - Comes with cURL v8.16.0. This addresses a bug where fetches/pushes could fail with failed to read data from server: SEC_E_CONTEXT_EXPIRED (0x80090317) under certain circumstances. Also included: a back-port of a fix for a bug where connection failures were mistakenly reported as time-outs.
  - Comes with Tig v2.6.0.
  - Comes with MinTTY v3.8.1.
  - Comes with OpenSSL v3.5.3.
  Bug Fixes
  - The auto-updater now shows Git for Windows icon in the notification also on Windows/ARM64.
  - git clone/git fetch now deals more gracefully with directory / file conflicts when the files backend is used for ref storage, by failing only the ones that are involved in the conflict while allowing others. This is a regression in Git v2.51.0 that was reported in Git for Windows and independently also to the Git mailing list. This was fixed by merging Git's topic branch kn/refs-files-case-insensitive.
  - Support for pathspecs in diff --no-index was somewhat buggy, which has been fixed.
  - git sparse-checkout subcommand learned a new clean action to prune otherwise unused working-tree files that are outside the areas of interest. An earlier version of this had been integrated into MicrosoftGit already. This was fixed by merging Git's topic branch ds/sparse-checkout-clean.
  - git rebase -i failed to clean-up the commit log message when the command commits the final one in a chain of "fixup" commands, which has been corrected. Backported from Git's topic branch pw/rebase-i-cleanup-fix.
  - git subtree did not work correctly when splitting squashed subtrees, which has been improved. Backported from Git's topic branch cs/subtree-squash-split-fix.
  - Some among git add -p and friends ignored color.diff and/or color.ui configuration variables, which is an old regression, which has been corrected. This was fixed by merging Git's topic branch jk/add-i-color.
  - A corner-case bug in git log -L... has been corrected. This was fixed by merging Git's topic branch sg/line-log-boundary-fixes.
  - A broken or malicious git fetch can say that it has the same object for many many times, and the upload-pack serving it can exhaust memory storing them redundantly, which has been corrected. This was fixed by merging Git's topic branch ps/upload-pack-oom-protection.
  - Fixes multiple crashes around midx write-out codepaths. This was fixed by merging Git's topic branch ds/midx-write-fixes.
  - git repack --path-walk lost objects in some corner cases, which has been corrected. This was fixed by merging Git's topic branch ds/path-walk-repack-fix.
  - Under a race against another process that is repacking the repository, especially a partially cloned one, git fetch may mistakenly think some objects we do have are missing, which has been corrected. Thiswas fixed by merging Git's topic branch jk/fetch-check-graph-objects-fix.
  - Various options to git diff that makes comparison ignore certain aspects of the differences (like "space changes are ignored", "differences in lines that match these regular expressions are ignored") did not work well with --name-only and friends. This was fixed by merging Git's topic branch ly/diff-name-only-with-diff-from-content.
  - git diff --no-index run inside a subdirectory under control of a Git repository operated at the top of the working tree and stripped the prefix from the output, and oddballs like "-" (stdin) did not work correctly because of it. Correct the set-up by undoing what the set-up sequence did to the current working directory and prefix. This was fixed by merging Git's topic branch jc/diff-no-index-in-subdir.
  - Various bugs about rename handling in "ort" merge strategy have been fixed. This was fixed by merging Git's topic branch en/ort-rename-fixes.
  - git push had a code path that led to BUG() but it should have reported a regular failure, as it is a response to a usual but invalid end-user action to attempt pushing an object that does not exist. This was fixed by merging Git's topic branch dl/push-missing-object-error.
  - git refs migrate to migrate the reflog entries from a refs backend to another had a handful of bugs squashed. This was fixed by merging Git's topic branch ps/reflog-migrate-fixes.
  - During interactive rebase, using drop on a merge commit lead to an error, which was incorrect. This was fixed by merging Git's topic branch js/rebase-i-allow-drop-on-a-merge.
Release Notes Url: https://github.com/git-for-windows/git/releases/tag/v2.51.0.windows.2
Documentation:
  Wiki: https://github.com/git-for-windows/git/wiki
Tags:
  git
  vcs
Installer:
  Installer Type: inno
  Installer Url: https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  Installer SHA256: 5cf583441ccd8d98d3492936235b6ee30c6847d1b3f49365d6a025b3432094ad
  Release Date: 2025-09-29
  Offline Distribution Supported: true
PS C:\Users\kushal> winget install Git.Git
Found an existing package already installed. Trying to upgrade the installed package...
Found Git [Git.Git] Version 2.51.0.2
This application is licensed to you by its owner.
Microsoft is not responsible for, nor does it grant any licenses to, third-party packages.
Downloading https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  62.8 MB / 62.8 MB
Successfully verified installer hash
Starting package install...
The installer will request to run as administrator. Expect a prompt.
Successfully installed
PS C:\Users\kushal> git --version
git version 2.51.0.windows.2
PS C:\Users\kushal> dotnet --info
.NET SDK:
 Version:           10.0.100-rc.1.25451.107
 Commit:            2db1f5ee2b
 Workload version:  10.0.100-manifests.a6e8bec0
 MSBuild version:   17.15.0-preview-25451-107+2db1f5ee2

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.26100
 OS Platform: Windows
 RID:         win-x64
 Base Path:   C:\Program Files\dotnet\sdk\10.0.100-rc.1.25451.107\

.NET workloads installed:
There are no installed workloads to display.
Configured to use workload sets when installing new manifests.
No workload sets are installed. Run "dotnet workload restore" to install a workload set.

Host:
  Version:      10.0.0-rc.1.25451.107
  Architecture: x64
  Commit:       2db1f5ee2b

.NET SDKs installed:
  9.0.305 [C:\Program Files\dotnet\sdk]
  10.0.100-rc.1.25451.107 [C:\Program Files\dotnet\sdk]

.NET runtimes installed:
  Microsoft.AspNetCore.App 8.0.20 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 9.0.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 10.0.0-rc.1.25451.107 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 8.0.20 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 9.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 10.0.0-rc.1.25451.107 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 8.0.20 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 9.0.9 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 10.0.0-rc.1.25451.107 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

Other architectures found:
  x86   [C:\Program Files (x86)\dotnet]
    registered at [HKLM\SOFTWARE\dotnet\Setup\InstalledVersions\x86\InstallLocation]

Environment variables:
  Not set

global.json file:
  Not found

Learn more:
  https://aka.ms/dotnet/info

Download .NET:
  https://aka.ms/dotnet/download
PS C:\Users\kushal>
PS C:\Users\kushal> Set-Location "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet build; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet test; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";  git commit --message "add existing files"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git remote show origin; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git fetch; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git pull; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git clean -dfx; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; .\Export-Project.ps1 -ProjectPath "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\" -OutputFile "my_project_export.txt"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git commit --message "add all files" --message "update project"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git push origin --all; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated --pre-release Always --upgrade; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy

Build succeeded in 0.5s
2025-10-08-13-27-18
Restore complete (0.8s)
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  MyOpenTelemetryApi.Domain succeeded (0.1s) â†’ src\MyOpenTelemetryApi.Domain\bin\Debug\net10.0\MyOpenTelemetryApi.Domain.dll
  MyOpenTelemetryApi.Application succeeded (0.3s) â†’ src\MyOpenTelemetryApi.Application\bin\Debug\net10.0\MyOpenTelemetryApi.Application.dll
  MyOpenTelemetryApi.Infrastructure succeeded (0.4s) â†’ src\MyOpenTelemetryApi.Infrastructure\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.dll
  MyOpenTelemetryApi.Api succeeded (1.0s) â†’ src\MyOpenTelemetryApi.Api\bin\Debug\net10.0\MyOpenTelemetryApi.Api.dll
  MyOpenTelemetryApi.Application.Tests succeeded (0.4s) â†’ tests\MyOpenTelemetryApi.Application.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Application.Tests.dll
  MyOpenTelemetryApi.Infrastructure.Tests succeeded (0.4s) â†’ tests\MyOpenTelemetryApi.Infrastructure.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.Tests.dll
  MyOpenTelemetryApi.Api.Tests succeeded (0.4s) â†’ tests\MyOpenTelemetryApi.Api.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Api.Tests.dll

Build succeeded in 2.7s
2025-10-08-13-27-21
Restore complete (0.6s)
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  MyOpenTelemetryApi.Domain succeeded (0.0s) â†’ src\MyOpenTelemetryApi.Domain\bin\Debug\net10.0\MyOpenTelemetryApi.Domain.dll
  MyOpenTelemetryApi.Application succeeded (0.0s) â†’ src\MyOpenTelemetryApi.Application\bin\Debug\net10.0\MyOpenTelemetryApi.Application.dll
  MyOpenTelemetryApi.Infrastructure succeeded (0.1s) â†’ src\MyOpenTelemetryApi.Infrastructure\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.dll
  MyOpenTelemetryApi.Api succeeded (0.3s) â†’ src\MyOpenTelemetryApi.Api\bin\Debug\net10.0\MyOpenTelemetryApi.Api.dll
  MyOpenTelemetryApi.Api.Tests succeeded (0.1s) â†’ tests\MyOpenTelemetryApi.Api.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Api.Tests.dll
  MyOpenTelemetryApi.Application.Tests succeeded (0.1s) â†’ tests\MyOpenTelemetryApi.Application.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Application.Tests.dll
  MyOpenTelemetryApi.Infrastructure.Tests succeeded (0.1s) â†’ tests\MyOpenTelemetryApi.Infrastructure.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.Tests.dll
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.5+1b188a7b0a (64-bit .NET 10.0.0-rc.1.25451.107)
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.5+1b188a7b0a (64-bit .NET 10.0.0-rc.1.25451.107)
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.5+1b188a7b0a (64-bit .NET 10.0.0-rc.1.25451.107)
[xUnit.net 00:00:00.28]   Discovering: MyOpenTelemetryApi.Application.Tests
[xUnit.net 00:00:00.28]   Discovering: MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.28]   Discovering: MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.32]   Discovered:  MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.33]   Discovered:  MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.35]   Discovered:  MyOpenTelemetryApi.Application.Tests
[xUnit.net 00:00:00.34]   Starting:    MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.35]   Starting:    MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.37]   Starting:    MyOpenTelemetryApi.Application.Tests
[xUnit.net 00:00:00.53]   Finished:    MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.54]   Finished:    MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.57]   Finished:    MyOpenTelemetryApi.Application.Tests
  MyOpenTelemetryApi.Api.Tests test succeeded (1.5s)
  MyOpenTelemetryApi.Infrastructure.Tests test succeeded (1.5s)
  MyOpenTelemetryApi.Application.Tests test succeeded (1.5s)

Test summary: total: 44, failed: 0, succeeded: 44, skipped: 0, duration: 1.5s
Build succeeded in 2.9s
2025-10-08-13-27-24
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy

Build succeeded in 0.6s
2025-10-08-13-27-25
2025-10-08-13-27-25
[main e22138b] add existing files
 2 files changed, 614 insertions(+), 6376 deletions(-)
2025-10-08-13-27-25
* remote origin
  Fetch URL: https://github.com/collabskus/MyOpenTelemetryApi.git
  Push  URL: https://github.com/collabskus/MyOpenTelemetryApi.git
  HEAD branch: main
  Remote branches:
    main                                                                                             tracked
    refs/remotes/origin/dependabot/github_actions/actions/checkout-5                                 stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/actions/setup-dotnet-5                             stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.12   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.13   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.14   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.16   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/nuget/tests/MyOpenTelemetryApi.Api.Tests/test-packages-d1750de658 stale (use 'git remote prune' to remove)
    refs/remotes/origin/feat/dotnet-10                                                               stale (use 'git remote prune' to remove)
  Local branch configured for 'git pull':
    main merges with remote main
  Local ref configured for 'git push':
    main pushes to main (fast-forwardable)
2025-10-08-13-27-26
2025-10-08-13-27-26
Current branch main is up to date.
2025-10-08-13-27-26
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
2025-10-08-13-27-26
Removing src/MyOpenTelemetryApi.Api/bin/
Removing src/MyOpenTelemetryApi.Api/obj/
Removing src/MyOpenTelemetryApi.Application/bin/
Removing src/MyOpenTelemetryApi.Application/obj/
Removing src/MyOpenTelemetryApi.Domain/bin/
Removing src/MyOpenTelemetryApi.Domain/obj/
Removing src/MyOpenTelemetryApi.Infrastructure/bin/
Removing src/MyOpenTelemetryApi.Infrastructure/obj/
Removing tests/MyOpenTelemetryApi.Api.Tests/bin/
Removing tests/MyOpenTelemetryApi.Api.Tests/obj/
Removing tests/MyOpenTelemetryApi.Application.Tests/bin/
Removing tests/MyOpenTelemetryApi.Application.Tests/obj/
Removing tests/MyOpenTelemetryApi.Infrastructure.Tests/bin/
Removing tests/MyOpenTelemetryApi.Infrastructure.Tests/obj/
2025-10-08-13-27-26
Starting project export...
Project Path: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\
Output File: my_project_export.txt
Generating directory structure...
Collecting files...
Found 92 files to export
Processing (1/92): .github\dependabot.yml
Processing (2/92): .github\workflows\ci.yml
Processing (3/92): .github\workflows\codeql.yml
Processing (4/92): appsettings.Container.json
Processing (5/92): CONTAINER_SETUP.md
Processing (6/92): docker-compose.yml
Processing (7/92): docs\contact-manager-specification-sheet.md
Processing (8/92): docs\contact-manager-specification-sheet-backend.md
Processing (9/92): docs\llm.md
Processing (10/92): docs\log-sample.txt
Processing (11/92): docs\scratch.md
Processing (12/92): docs\Windows PowerShell.txt
Processing (13/92): LICENSE.txt
Processing (14/92): my_project_export.txt
Processing (15/92): MyOpenTelemetryApi.sln
Processing (16/92): podman-compose.yml
Processing (17/92): README.md
Processing (18/92): src\MyOpenTelemetryApi.Api\appsettings.Development.json
Processing (19/92): src\MyOpenTelemetryApi.Api\appsettings.json
Processing (20/92): src\MyOpenTelemetryApi.Api\appsettings.Production.json
Processing (21/92): src\MyOpenTelemetryApi.Api\Authentication\ApiKeyAuthenticationHandler.cs
Processing (22/92): src\MyOpenTelemetryApi.Api\Controllers\ContactsController.cs
Processing (23/92): src\MyOpenTelemetryApi.Api\Controllers\GroupsController.cs
Processing (24/92): src\MyOpenTelemetryApi.Api\Controllers\HealthController.cs
Processing (25/92): src\MyOpenTelemetryApi.Api\Controllers\TagsController.cs
Processing (26/92): src\MyOpenTelemetryApi.Api\dependencies.json
Processing (27/92): src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj
Processing (28/92): src\MyOpenTelemetryApi.Api\Program.cs
Processing (29/92): src\MyOpenTelemetryApi.Api\Properties\launchSettings.json
Processing (30/92): src\MyOpenTelemetryApi.Api\Telemetry\FileExporter.cs
Processing (31/92): src\MyOpenTelemetryApi.Api\Telemetry\TelemetryConstants.cs
Processing (32/92): src\MyOpenTelemetryApi.Api\Telemetry\TelemetryExtensions.cs
Processing (33/92): src\MyOpenTelemetryApi.Application\DTOs\AddressDto.cs
Processing (34/92): src\MyOpenTelemetryApi.Application\DTOs\ContactDto.cs
Processing (35/92): src\MyOpenTelemetryApi.Application\DTOs\ContactSummaryDto.cs
Processing (36/92): src\MyOpenTelemetryApi.Application\DTOs\CreateContactDto.cs
Processing (37/92): src\MyOpenTelemetryApi.Application\DTOs\EmailAddressDto.cs
Processing (38/92): src\MyOpenTelemetryApi.Application\DTOs\GroupDto.cs
Processing (39/92): src\MyOpenTelemetryApi.Application\DTOs\PaginatedResultDto.cs
Processing (40/92): src\MyOpenTelemetryApi.Application\DTOs\PhoneNumberDto.cs
Processing (41/92): src\MyOpenTelemetryApi.Application\DTOs\TagDto.cs
Processing (42/92): src\MyOpenTelemetryApi.Application\DTOs\UpdateContactDto.cs
Processing (43/92): src\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj
Processing (44/92): src\MyOpenTelemetryApi.Application\Services\ContactService.cs
Processing (45/92): src\MyOpenTelemetryApi.Application\Services\GroupService.cs
Processing (46/92): src\MyOpenTelemetryApi.Application\Services\IContactService.cs
Processing (47/92): src\MyOpenTelemetryApi.Application\Services\IGroupService.cs
Processing (48/92): src\MyOpenTelemetryApi.Application\Services\ITagService.cs
Processing (49/92): src\MyOpenTelemetryApi.Application\Services\TagService.cs
Processing (50/92): src\MyOpenTelemetryApi.Domain\Entities\Address.cs
Processing (51/92): src\MyOpenTelemetryApi.Domain\Entities\AddressType.cs
Processing (52/92): src\MyOpenTelemetryApi.Domain\Entities\Contact.cs
Processing (53/92): src\MyOpenTelemetryApi.Domain\Entities\ContactGroup.cs
Processing (54/92): src\MyOpenTelemetryApi.Domain\Entities\ContactTag.cs
Processing (55/92): src\MyOpenTelemetryApi.Domain\Entities\EmailAddress.cs
Processing (56/92): src\MyOpenTelemetryApi.Domain\Entities\EmailType.cs
Processing (57/92): src\MyOpenTelemetryApi.Domain\Entities\Group.cs
Processing (58/92): src\MyOpenTelemetryApi.Domain\Entities\PhoneNumber.cs
Processing (59/92): src\MyOpenTelemetryApi.Domain\Entities\PhoneType.cs
Processing (60/92): src\MyOpenTelemetryApi.Domain\Entities\Tag.cs
Processing (61/92): src\MyOpenTelemetryApi.Domain\Interfaces\IContactRepository.cs
Processing (62/92): src\MyOpenTelemetryApi.Domain\Interfaces\IGroupRepository.cs
Processing (63/92): src\MyOpenTelemetryApi.Domain\Interfaces\IRepository.cs
Processing (64/92): src\MyOpenTelemetryApi.Domain\Interfaces\ITagRepository.cs
Processing (65/92): src\MyOpenTelemetryApi.Domain\Interfaces\IUnitOfWork.cs
Processing (66/92): src\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj
Processing (67/92): src\MyOpenTelemetryApi.Infrastructure\Data\AppDbContext.cs
Processing (68/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\AddressConfiguration.cs
Processing (69/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactConfiguration.cs
Processing (70/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactGroupConfiguration.cs
Processing (71/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactTagConfiguration.cs
Processing (72/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\EmailAddressConfiguration.cs
Processing (73/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\GroupConfiguration.cs
Processing (74/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\PhoneNumberConfiguration.cs
Processing (75/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\TagConfiguration.cs
Processing (76/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.cs
Processing (77/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.Designer.cs
Processing (78/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.cs
Processing (79/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.Designer.cs
Processing (80/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\AppDbContextModelSnapshot.cs
Processing (81/92): src\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj
Processing (82/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\ContactRepository.cs
Processing (83/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\GroupRepository.cs
Processing (84/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\Repository.cs
Processing (85/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\TagRepository.cs
Processing (86/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\UnitOfWork.cs
Processing (87/92): tests\MyOpenTelemetryApi.Api.Tests\MyOpenTelemetryApi.Api.Tests.csproj
Processing (88/92): tests\MyOpenTelemetryApi.Api.Tests\UnitTest1.cs
Processing (89/92): tests\MyOpenTelemetryApi.Application.Tests\MyOpenTelemetryApi.Application.Tests.csproj
Processing (90/92): tests\MyOpenTelemetryApi.Application.Tests\UnitTest1.cs
Processing (91/92): tests\MyOpenTelemetryApi.Infrastructure.Tests\MyOpenTelemetryApi.Infrastructure.Tests.csproj
Processing (92/92): tests\MyOpenTelemetryApi.Infrastructure.Tests\UnitTest1.cs

Export completed successfully!
Output file: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\my_project_export.txt
Total files exported: 92
Output file size: 1.73 MB
2025-10-08-13-27-27
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   my_project_export.txt

no changes added to commit (use "git add" and/or "git commit -a")
2025-10-08-13-27-27
warning: in the working copy of 'my_project_export.txt', LF will be replaced by CRLF the next time Git touches it
2025-10-08-13-27-27
[main ac73311] add all files
 1 file changed, 18393 insertions(+), 29921 deletions(-)
2025-10-08-13-27-27
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 12 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (8/8), 18.68 KiB | 1006.00 KiB/s, done.
Total 8 (delta 5), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (5/5), completed with 3 local objects.
To https://github.com/collabskus/MyOpenTelemetryApi.git
   acb734e..ac73311  main -> main
2025-10-08-13-27-28
Discovering projects...
Analyzing project(s)...
Analyzing dependencies...
No outdated dependencies were detected
Elapsed: 00:00:02.4340628
2025-10-08-13-27-31
Discovering projects...
Analyzing project(s)...
Analyzing dependencies...
No outdated dependencies were detected
Elapsed: 00:00:02.0199565
2025-10-08-13-27-33
PS C:\Users\kushal\Source\Repos\MyOpenTelemetryApi>
PS C:\Users\kushal\Source\Repos\MyOpenTelemetryApi> Set-Location "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet build; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet test; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";  git commit --message "add existing files"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git remote show origin; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git fetch; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git pull; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git clean -dfx; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; .\Export-Project.ps1 -ProjectPath "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\" -OutputFile "my_project_export.txt"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git commit --message "add all files" --message "update project"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git push origin --all; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated --pre-release Always --upgrade; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";



================================================================================
FILE: LICENSE.txt
SIZE: 34.36 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

                    GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.



================================================================================
FILE: my_project_export.txt
SIZE: 803.26 KB
MODIFIED: 10/09/2025 07:20:57
================================================================================


===============================================================================
ASP.NET PROJECT EXPORT
Generated: 10/09/2025 07:20:55
Project Path: D:\DEV\MyOpenTelemetryApi
===============================================================================

DIRECTORY STRUCTURE:
===================

Folder PATH listing for volume DATA
Volume serial number is 128B-05C1
D:\DEV\MYOPENTELEMETRYAPI
|   .dockerignore
|   .editorconfig
|   .gitattributes
|   .gitignore
|   appsettings.Container.json
|   CONTAINER_SETUP.md
|   Directory.Build.props
|   Directory.Build.targets
|   Directory.Packages.props
|   docker-compose.yml
|   Dockerfile
|   Dockerfile.migrations
|   Export-Project.ps1
|   LICENSE.txt
|   MyOpenTelemetryApi.sln
|   my_project_export.txt
|   omnibus.ps1
|   podman-compose.yml
|   README.md
|   
+---.github
|   |   dependabot.yml
|   |   
|   \---workflows
|           ci.yml
|           codeql.yml
|           
+---docs
|       contact-manager-specification-sheet-backend.md
|       contact-manager-specification-sheet.md
|       firewall.png
|       llm.md
|       log-sample.txt
|       scratch.md
|       Windows PowerShell.txt
|       
+---src
|   +---MyOpenTelemetryApi.Api
|   |   |   appsettings.Development.json
|   |   |   appsettings.json
|   |   |   appsettings.Production.json
|   |   |   dependencies.json
|   |   |   MyOpenTelemetryApi.Api.csproj
|   |   |   MyOpenTelemetryApi.Api.http
|   |   |   Program.cs
|   |   |   
|   |   +---Authentication
|   |   |       ApiKeyAuthenticationHandler.cs
|   |   |       
|   |   +---Controllers
|   |   |       ContactsController.cs
|   |   |       GroupsController.cs
|   |   |       HealthController.cs
|   |   |       TagsController.cs
|   |   |       
|   |   +---Properties
|   |   |       launchSettings.json
|   |   |       
|   |   \---Telemetry
|   |           FileExporter.cs
|   |           TelemetryConstants.cs
|   |           TelemetryExtensions.cs
|   |           
|   +---MyOpenTelemetryApi.Application
|   |   |   MyOpenTelemetryApi.Application.csproj
|   |   |   
|   |   +---DTOs
|   |   |       AddressDto.cs
|   |   |       ContactDto.cs
|   |   |       ContactSummaryDto.cs
|   |   |       CreateContactDto.cs
|   |   |       EmailAddressDto.cs
|   |   |       GroupDto.cs
|   |   |       PaginatedResultDto.cs
|   |   |       PhoneNumberDto.cs
|   |   |       TagDto.cs
|   |   |       UpdateContactDto.cs
|   |   |       
|   |   \---Services
|   |           ContactService.cs
|   |           GroupService.cs
|   |           IContactService.cs
|   |           IGroupService.cs
|   |           ITagService.cs
|   |           TagService.cs
|   |           
|   +---MyOpenTelemetryApi.Domain
|   |   |   MyOpenTelemetryApi.Domain.csproj
|   |   |   
|   |   +---Entities
|   |   |       Address.cs
|   |   |       AddressType.cs
|   |   |       Contact.cs
|   |   |       ContactGroup.cs
|   |   |       ContactTag.cs
|   |   |       EmailAddress.cs
|   |   |       EmailType.cs
|   |   |       Group.cs
|   |   |       PhoneNumber.cs
|   |   |       PhoneType.cs
|   |   |       Tag.cs
|   |   |       
|   |   \---Interfaces
|   |           IContactRepository.cs
|   |           IGroupRepository.cs
|   |           IRepository.cs
|   |           ITagRepository.cs
|   |           IUnitOfWork.cs
|   |           
|   \---MyOpenTelemetryApi.Infrastructure
|       |   MyOpenTelemetryApi.Infrastructure.csproj
|       |   
|       +---Data
|       |   |   AppDbContext.cs
|       |   |   
|       |   +---Configurations
|       |   |       AddressConfiguration.cs
|       |   |       ContactConfiguration.cs
|       |   |       ContactGroupConfiguration.cs
|       |   |       ContactTagConfiguration.cs
|       |   |       EmailAddressConfiguration.cs
|       |   |       GroupConfiguration.cs
|       |   |       PhoneNumberConfiguration.cs
|       |   |       TagConfiguration.cs
|       |   |       
|       |   \---Migrations
|       |           20250804231722_InitialCreate.cs
|       |           20250804231722_InitialCreate.Designer.cs
|       |           20251003222820_AddContactPaginationIndexes.cs
|       |           20251003222820_AddContactPaginationIndexes.Designer.cs
|       |           AppDbContextModelSnapshot.cs
|       |           
|       \---Repositories
|               ContactRepository.cs
|               GroupRepository.cs
|               Repository.cs
|               TagRepository.cs
|               UnitOfWork.cs
|               
\---tests
    +---MyOpenTelemetryApi.Api.Tests
    |       MyOpenTelemetryApi.Api.Tests.csproj
    |       UnitTest1.cs
    |       
    +---MyOpenTelemetryApi.Application.Tests
    |       MyOpenTelemetryApi.Application.Tests.csproj
    |       UnitTest1.cs
    |       
    \---MyOpenTelemetryApi.Infrastructure.Tests
            MyOpenTelemetryApi.Infrastructure.Tests.csproj
            UnitTest1.cs
            


FILE CONTENTS:
==============

================================================================================
FILE: .github\dependabot.yml
SIZE: 0.63 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

# .github/dependabot.yml
version: 2
updates:
  - package-ecosystem: "nuget"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
    open-pull-requests-limit: 5
    groups:
      microsoft-packages:
        patterns:
          - "Microsoft.*"
          - "System.*"
      opentelemetry:
        patterns:
          - "OpenTelemetry*"
      test-packages:
        patterns:
          - "xunit*"
          - "coverlet*"
          - "*.Test.*"

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
    open-pull-requests-limit: 5




================================================================================
FILE: .github\workflows\ci.yml
SIZE: 5.06 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '10.0.x'
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger "console;verbosity=detailed" --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.13
      with:
        reports: coverage/**/coverage.cobertura.xml
        targetdir: coverage-report
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
        verbosity: 'Info'

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Add coverage PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        path: coverage-report/SummaryGithub.md

    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run EF Core migrations check
      run: |
        dotnet tool install --global dotnet-ef
        dotnet ef migrations has-pending-model-changes --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Test database migrations
      run: |
        dotnet ef database update --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Run integration tests (if any)
      run: |
        echo "No integration tests yet - placeholder for future tests"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        name: build-artifacts
        path: |
          src/MyOpenTelemetryApi.Api/bin/Release/net10.0/
          !src/MyOpenTelemetryApi.Api/bin/Release/net10.0/*.pdb
        retention-days: 7

  code-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install .NET tools
      run: |
        dotnet tool install --global dotnet-outdated-tool
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Check for outdated packages
      run: dotnet outdated --fail-on-updates
      continue-on-error: true

    - name: Security scan
      run: |
        dotnet list package --vulnerable --include-transitive

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    # REMOVED: "Create Dockerfile" step - use the real Dockerfile from repo instead

    - name: Build Docker image
      run: docker build -t myopentelemetryapi:${{ github.sha }} .

    - name: Run Docker container test
      run: |
        echo "Skipping container health check - requires database setup"
        # Will implement proper container testing later

    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save myopentelemetryapi:${{ github.sha }} | gzip > myopentelemetryapi.tar.gz

    - name: Upload Docker image
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: myopentelemetryapi.tar.gz
        retention-days: 7



================================================================================
FILE: .github\workflows\codeql.yml
SIZE: 0.92 KB
MODIFIED: 09/17/2025 13:05:07
================================================================================

# .github/workflows/codeql.yml
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 5 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '10.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3


================================================================================
FILE: appsettings.Container.json
SIZE: 1.12 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Information",
      "Microsoft.EntityFrameworkCore": "Information",
      "Microsoft.EntityFrameworkCore.Database.Command": "Information",
      "MyOpenTelemetryApi": "Debug",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Host=db;Port=5432;Database=myoteldb;Username=myoteluser;Password=myotelpass123;Include Error Detail=true;"
  },
  "OpenTelemetry": {
    "ServiceName": "MyOpenTelemetryApi-Container",
    "ServiceVersion": "1.0.0-container",
    "Exporter": {
      "Console": {
        "Enabled": true
      },
      "OTLP": {
        "Enabled": false,
        "Endpoint": "http://jaeger:4317",
        "Protocol": "Grpc"
      },
      "File": {
        "Enabled": true,
        "LogPath": "/app/logs/otel-logs.json",
        "TracePath": "/app/logs/otel-traces.json",
        "MetricsPath": "/app/logs/otel-metrics.json"
      }
    },
    "Sampling": {
      "AlwaysOn": true,
      "Ratio": 1.0
    }
  },
  "AllowedHosts": "*"
}


================================================================================
FILE: CONTAINER_SETUP.md
SIZE: 7.42 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

# ðŸ³ MyOpenTelemetryApi - Podman Setup

This guide will help you run the MyOpenTelemetryApi application using Podman with PostgreSQL.

## ðŸ“‹ Prerequisites

- [Podman](https://podman.io/getting-started/installation) installed
- [podman-compose](https://github.com/containers/podman-compose) (optional, but recommended)
- `curl` and `jq` (for testing, optional)

### Installing Prerequisites

#### Ubuntu/Debian:
```bash
sudo apt update
sudo apt install -y podman curl jq
pip3 install podman-compose
```

#### RHEL/Fedora/CentOS:
```bash
sudo dnf install -y podman curl jq python3-pip
pip3 install podman-compose
```

#### macOS:
```bash
brew install podman curl jq
pip3 install podman-compose
```

## ðŸš€ Quick Start

### Option 1: Using the Setup Script (Recommended)

1. **Make the setup script executable:**
   ```bash
   chmod +x setup-podman.sh
   ```

2. **Run the setup script:**
   ```bash
   ./setup-podman.sh
   ```

3. **To see logs during startup:**
   ```bash
   ./setup-podman.sh --logs
   ```

### Option 2: Manual Setup

1. **Create necessary directories:**
   ```bash
   mkdir -p logs init-db
   ```

2. **Build and start services:**
   ```bash
   # Using podman-compose
   podman-compose up --build -d
   
   # OR using podman compose
   podman compose up --build -d
   ```

3. **Check service status:**
   ```bash
   podman ps
   ```

## ðŸ”§ Configuration

The application runs with the following default configuration:

| Service | Port | Credentials |
|---------|------|-------------|
| API | 5174 | N/A |
| PostgreSQL | 5432 | User: `myoteluser`<br>Password: `myotelpass123`<br>Database: `myoteldb` |

### Environment Variables

Key environment variables configured in the container:

- `ASPNETCORE_ENVIRONMENT=Development`
- `ConnectionStrings__DefaultConnection` - PostgreSQL connection string
- `OpenTelemetry__ServiceName=MyOpenTelemetryApi-Podman`
- `OpenTelemetry__Exporter__Console__Enabled=true`
- `OpenTelemetry__Exporter__File__Enabled=true`

## ðŸ§ª Testing the Application

### Health Checks
```bash
# Basic health check
curl http://localhost:5174/api/health | jq

# Readiness check
curl http://localhost:5174/api/health/ready | jq

# Get all contacts (should return empty array initially)
curl http://localhost:5174/api/contacts | jq
```

### Creating Test Data
```bash
# Create a test contact
curl -X POST http://localhost:5174/api/contacts \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "John",
    "lastName": "Doe",
    "company": "Tech Corp",
    "emailAddresses": [{
      "email": "john.doe@example.com",
      "type": "Work",
      "isPrimary": true
    }],
    "phoneNumbers": [{
      "number": "+1-555-123-4567",
      "type": "Mobile",
      "isPrimary": true
    }]
  }' | jq

# Get all contacts to see the created contact
curl http://localhost:5174/api/contacts | jq
```

### Creating Test Groups and Tags
```bash
# Create a group
curl -X POST http://localhost:5174/api/groups \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Work Colleagues",
    "description": "People from work"
  }' | jq

# Create a tag
curl -X POST http://localhost:5174/api/tags \
  -H "Content-Type: application/json" \
  -d '{
    "name": "VIP",
    "colorHex": "#FF0000"
  }' | jq

# Get all groups
curl http://localhost:5174/api/groups | jq

# Get all tags
curl http://localhost:5174/api/tags | jq
```

## ðŸ“Š Monitoring and Logs

### Application Logs
```bash
# View application logs
podman-compose logs -f api

# View PostgreSQL logs
podman-compose logs -f db

# View all logs
podman-compose logs -f
```

### OpenTelemetry File Logs
The application writes OpenTelemetry logs to `./logs/otel-logs.json`:
```bash
# View structured logs
tail -f logs/otel-logs.json | jq

# Monitor logs in real-time with formatting
tail -f logs/otel-logs.json | while read line; do echo "$line" | jq -C; done
```

### Container Management
```bash
# View running containers
podman ps

# Stop all services
podman-compose down

# Restart just the API
podman-compose restart api

# Rebuild and restart
podman-compose up --build -d

# Shell into API container
podman exec -it myotel-api /bin/bash

# Shell into PostgreSQL container
podman exec -it myotel-postgres psql -U myoteluser -d myoteldb
```

## ðŸ—„ï¸ Database Management

### Connect to PostgreSQL
```bash
# Using podman exec
podman exec -it myotel-postgres psql -U myoteluser -d myoteldb

# Using external psql client (if installed)
psql -h localhost -p 5432 -U myoteluser -d myoteldb
```

### Common SQL Queries
```sql
-- List all tables
\dt

-- View contacts
SELECT * FROM "Contacts";

-- View groups
SELECT * FROM "Groups";

-- View tags
SELECT * FROM "Tags";

-- View contact-group relationships
SELECT c."FirstName", c."LastName", g."Name" as "GroupName"
FROM "Contacts" c
JOIN "ContactGroups" cg ON c."Id" = cg."ContactId"
JOIN "Groups" g ON cg."GroupId" = g."Id";
```

## ðŸ”„ Development Workflow

### Rebuilding After Code Changes
```bash
# Stop services
podman-compose down

# Rebuild and start
podman-compose up --build -d

# Or use the script
./setup-podman.sh --no-test
```

### Resetting Database
```bash
# Stop services
podman-compose down

# Remove database volume
podman volume rm myopentelemetryapi_postgres_data

# Start services (will recreate database)
podman-compose up -d
```

### Cleanup Everything
```bash
# Stop and remove containers
podman-compose down

# Remove volumes
podman volume prune

# Remove images
podman image prune -a

# Or use the cleanup function in the script
./setup-podman.sh
```

## ðŸ”§ Troubleshooting

### Common Issues

1. **Port already in use:**
   ```bash
   # Check what's using the port
   netstat -tulpn | grep :5174
   
   # Stop the conflicting service or change ports in docker-compose.yml
   ```

2. **Database connection failed:**
   ```bash
   # Check if PostgreSQL is running
   podman exec myotel-postgres pg_isready -U myoteluser -d myoteldb
   
   # Check database logs
   podman logs myotel-postgres
   ```

3. **API not starting:**
   ```bash
   # Check API logs
   podman logs myotel-api
   
   # Check if API container is running
   podman ps -a
   ```

4. **Permission issues (SELinux):**
   ```bash
   # If you're on a system with SELinux, add :Z to volume mounts
   # This is already done in podman-compose.yml
   ```

### Performance Issues
```bash
# Check resource usage
podman stats

# View container resource limits
podman inspect myotel-api | jq '.[0].HostConfig'
```

## ðŸŽ¯ Next Steps

- **Add Observability Stack:** Uncomment Jaeger, Prometheus, and Grafana services in `podman-compose.yml`
- **Configure OTLP Export:** Set up OpenTelemetry Protocol export to external systems
- **Add SSL/TLS:** Configure HTTPS for production-like setup
- **Persistent Data:** Configure persistent volumes for production use
- **Load Testing:** Use tools like `hey` or `wrk` to test API performance
- **Custom Metrics:** Add custom application metrics to monitor business logic

## ðŸ“š Useful Resources

- [Podman Documentation](https://docs.podman.io/)
- [OpenTelemetry Documentation](https://opentelemetry.io/docs/)
- [ASP.NET Core Docker](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/)
- [PostgreSQL Docker](https://hub.docker.com/_/postgres)

---

**Happy Coding! ðŸŽ‰**


================================================================================
FILE: docker-compose.yml
SIZE: 1.33 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: myopentelemetryapi-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-contactmanager}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myopentelemetryapi-api
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: "http://+:8080;http://+:8081"
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${POSTGRES_DB:-contactmanager};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}"
      ApiKey: ${API_KEY:-your-secret-api-key-change-in-production}
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./appsettings.Container.json:/app/appsettings.Production.json:ro
    restart: unless-stopped

volumes:
  postgres_data:



================================================================================
FILE: docs\contact-manager-specification-sheet.md
SIZE: 47 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

I'll review and enhance this Angular Contact Manager Application specification to make it more comprehensive, modern, and aligned with Angular 20+ best practices.I've significantly enhanced the Angular Contact Manager Application specifications with the following improvements:

## Key Enhancements:

### 1. **Technical Architecture**
- Added proper Angular 20+ features including the experimental zoneless change detection
- Included resource() API for better data fetching
- Added Vite build system for optimal performance
- Included SSR, PWA, and i18n support

### 2. **Enhanced Data Models**
- Added social profiles, custom fields, and activity tracking
- Included audit fields (createdAt, updatedBy, etc.)
- Added bulk operations support
- Implemented import/export functionality with proper error handling

### 3. **Advanced Features**
- **Real-time Updates**: WebSocket integration for live synchronization
- **Virtual Scrolling**: CDK virtual scrolling for performance
- **Deferred Loading**: Using @defer blocks for optimization
- **Advanced Search**: Complex filtering and duplicate detection
- **Activity Tracking**: Track all interactions with contacts

### 4. **Improved Component Architecture**
- Comprehensive example of ContactListComponent with modern Angular patterns
- Proper use of signals, computed values, and effects
- Container queries for responsive design
- Skeleton loading states and error handling

### 5. **Performance Optimizations**
- Detailed build optimization strategies
- Runtime performance improvements
- Lazy loading and code splitting
- Image optimization and compression strategies

### 6. **Security & Compliance**
- Input validation and XSS prevention
- CSRF protection and CSP headers
- PII handling and audit logging
- Rate limiting strategies

### 7. **Testing Strategy**
- Unit testing examples with signals
- E2E testing with Cypress
- Coverage requirements (>80%)

### 8. **Accessibility (WCAG 2.1 AA)**
- Comprehensive accessibility requirements
- ARIA labels and landmarks
- Keyboard navigation support
- Screen reader compatibility

### 9. **Internationalization**
- Multi-language support including RTL
- Translation service with signals
- Locale-specific formatting

### 10. **Deployment & DevOps**
- Docker multi-stage builds
- CI/CD pipeline configuration
- Health monitoring and analytics
- Comprehensive monitoring strategy

### 11. **Developer Experience**
- Clear project structure
- Detailed implementation checklist
- Development commands
- Support documentation

### 12. **Future Roadmap**
- Phase 2: AI features, calendar integration, mobile apps
- Phase 3: CRM integration, ML-powered recommendations, AR features

The enhanced specification is now production-ready and follows all the latest Angular best practices. It provides a complete blueprint for building a modern, scalable, and maintainable contact management application that showcases the full power of Angular 20+.


























# Angular Contact Manager Application Specifications v2.0

## Executive Summary
A modern, zoneless Angular 20+ contact management application showcasing cutting-edge Angular features including signals, resource API, and standalone components. The application provides comprehensive contact management capabilities with real-time updates, advanced filtering, and optimal performance.

## Technical Architecture

### Core Angular Configuration
- **Angular Version**: 20+ (latest stable)
- **Change Detection**: Zoneless with `provideExperimentalZonelessChangeDetection()`
- **Component Architecture**: 100% standalone components, no NgModules
- **State Management**: Signal-based reactive state with computed signals
- **HTTP Layer**: HttpClient with resource() API and signal-based interceptors
- **Routing**: Signal-based router with input bindings and withComponentInputBinding()
- **Forms**: Template-driven forms with signal-based two-way binding using model()
- **Build System**: Vite-based with esbuild for optimal build performance

### Advanced Features
- **Server-Side Rendering (SSR)**: Optional Angular Universal support
- **Progressive Web App (PWA)**: Offline-first architecture with service workers
- **Internationalization (i18n)**: Multi-language support with @angular/localize
- **Real-time Updates**: WebSocket integration for live contact updates
- **Virtual Scrolling**: CDK virtual scrolling for large datasets
- **Deferred Loading**: Using @defer blocks for performance optimization

## Enhanced Project Structure

```
src/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ core/
â”‚   â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”‚   â”œâ”€â”€ api.service.ts              # Base HTTP service with interceptors
â”‚   â”‚   â”‚   â”œâ”€â”€ contact.service.ts          # Contact-specific operations
â”‚   â”‚   â”‚   â”œâ”€â”€ group.service.ts            # Group management
â”‚   â”‚   â”‚   â”œâ”€â”€ tag.service.ts              # Tag management
â”‚   â”‚   â”‚   â”œâ”€â”€ health.service.ts           # Health monitoring
â”‚   â”‚   â”‚   â”œâ”€â”€ websocket.service.ts        # Real-time updates
â”‚   â”‚   â”‚   â””â”€â”€ storage.service.ts          # Local storage management
â”‚   â”‚   â”œâ”€â”€ interceptors/
â”‚   â”‚   â”‚   â”œâ”€â”€ error.interceptor.ts        # Global error handling
â”‚   â”‚   â”‚   â”œâ”€â”€ retry.interceptor.ts        # Automatic retry logic
â”‚   â”‚   â”‚   â””â”€â”€ cache.interceptor.ts        # HTTP caching
â”‚   â”‚   â”œâ”€â”€ guards/
â”‚   â”‚   â”‚   â””â”€â”€ unsaved-changes.guard.ts    # Prevent navigation with unsaved changes
â”‚   â”‚   â””â”€â”€ utils/
â”‚   â”‚       â”œâ”€â”€ validators.ts               # Custom validators
â”‚   â”‚       â”œâ”€â”€ debounce.ts                 # Debounce utility
â”‚   â”‚       â””â”€â”€ export.utils.ts             # CSV/PDF export utilities
â”‚   â”œâ”€â”€ features/
â”‚   â”‚   â”œâ”€â”€ contacts/
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-list.component.ts   # List with virtual scrolling
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-detail.component.ts # Detail view with edit mode
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-form.component.ts   # Create/Edit form
â”‚   â”‚   â”‚   â”œâ”€â”€ contact-card.component.ts   # Card view component
â”‚   â”‚   â”‚   â””â”€â”€ contact-search.component.ts # Advanced search
â”‚   â”‚   â”œâ”€â”€ groups/
â”‚   â”‚   â”‚   â”œâ”€â”€ group-list.component.ts
â”‚   â”‚   â”‚   â””â”€â”€ group-form.component.ts
â”‚   â”‚   â”œâ”€â”€ tags/
â”‚   â”‚   â”‚   â”œâ”€â”€ tag-list.component.ts
â”‚   â”‚   â”‚   â””â”€â”€ tag-form.component.ts
â”‚   â”‚   â””â”€â”€ dashboard/
â”‚   â”‚       â”œâ”€â”€ dashboard.component.ts      # Overview dashboard
â”‚   â”‚       â””â”€â”€ health-monitor.component.ts # API health monitoring
â”‚   â”œâ”€â”€ shared/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”‚   â”œâ”€â”€ confirm-dialog.component.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ loading-spinner.component.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ pagination.component.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ search-input.component.ts
â”‚   â”‚   â”‚   â””â”€â”€ toast.component.ts
â”‚   â”‚   â”œâ”€â”€ directives/
â”‚   â”‚   â”‚   â”œâ”€â”€ auto-focus.directive.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ infinite-scroll.directive.ts
â”‚   â”‚   â”‚   â””â”€â”€ tooltip.directive.ts
â”‚   â”‚   â””â”€â”€ pipes/
â”‚   â”‚       â”œâ”€â”€ phone-format.pipe.ts
â”‚   â”‚       â”œâ”€â”€ initials.pipe.ts
â”‚   â”‚       â””â”€â”€ highlight.pipe.ts
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â”œâ”€â”€ contact.model.ts
â”‚   â”‚   â”œâ”€â”€ group.model.ts
â”‚   â”‚   â”œâ”€â”€ tag.model.ts
â”‚   â”‚   â””â”€â”€ common.model.ts
â”‚   â”œâ”€â”€ app.component.ts
â”‚   â”œâ”€â”€ app.routes.ts
â”‚   â””â”€â”€ app.config.ts
â”œâ”€â”€ assets/
â”‚   â”œâ”€â”€ icons/
â”‚   â”œâ”€â”€ images/
â”‚   â””â”€â”€ i18n/
â”œâ”€â”€ environments/
â”‚   â”œâ”€â”€ environment.ts
â”‚   â”œâ”€â”€ environment.prod.ts
â”‚   â””â”€â”€ environment.staging.ts
â”œâ”€â”€ styles/
â”‚   â”œâ”€â”€ _variables.scss
â”‚   â”œâ”€â”€ _mixins.scss
â”‚   â”œâ”€â”€ _themes.scss
â”‚   â””â”€â”€ styles.scss
â”œâ”€â”€ index.html
â”œâ”€â”€ main.ts
â””â”€â”€ main.server.ts  # SSR entry point
```

## Enhanced Data Models

```typescript
// Enhanced Contact Model with additional fields
interface ContactDto {
  id: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  nickname?: string;
  prefix?: string;  // Mr., Ms., Dr., etc.
  suffix?: string;  // Jr., III, PhD, etc.
  company?: string;
  department?: string;  // New field
  jobTitle?: string;
  dateOfBirth?: string;
  anniversary?: string;  // New field
  notes?: string;
  emailAddresses: EmailAddress[];
  phoneNumbers: PhoneNumber[];
  addresses: Address[];
  socialProfiles: SocialProfile[];  // New field
  customFields: CustomField[];  // New field
  groups: Group[];
  tags: Tag[];
  avatar?: string;  // Base64 or URL
  favorite: boolean;  // New field
  lastContactedAt?: string;  // New field
  createdAt: string;
  updatedAt: string;
  createdBy?: string;
  updatedBy?: string;
}

// New interfaces for enhanced functionality
interface SocialProfile {
  id: string;
  platform: 'linkedin' | 'twitter' | 'facebook' | 'instagram' | 'github' | 'other';
  url: string;
  username?: string;
}

interface CustomField {
  id: string;
  fieldName: string;
  fieldValue: string;
  fieldType: 'text' | 'number' | 'date' | 'boolean' | 'url';
}

interface ContactActivity {
  id: string;
  contactId: string;
  activityType: 'email' | 'call' | 'meeting' | 'note' | 'task';
  subject: string;
  description?: string;
  activityDate: string;
  completed: boolean;
}

interface BulkOperation<T> {
  operation: 'create' | 'update' | 'delete';
  items: T[];
  options?: BulkOperationOptions;
}

interface BulkOperationOptions {
  skipValidation?: boolean;
  continueOnError?: boolean;
  transactional?: boolean;
}

interface ImportResult {
  success: number;
  failed: number;
  errors: ImportError[];
}

interface ImportError {
  row: number;
  field: string;
  value: any;
  error: string;
}

interface ExportOptions {
  format: 'csv' | 'excel' | 'json' | 'vcard';
  fields?: string[];
  includeGroups?: boolean;
  includeTags?: boolean;
  dateFormat?: string;
}
```

## Enhanced API Endpoints

### Contact Operations
```typescript
// Basic CRUD
GET    /api/contacts?page=1&size=20&sort=lastName,asc&filter=...
GET    /api/contacts/{id}
POST   /api/contacts
PUT    /api/contacts/{id}
PATCH  /api/contacts/{id}  // Partial update
DELETE /api/contacts/{id}

// Bulk Operations
POST   /api/contacts/bulk
PUT    /api/contacts/bulk
DELETE /api/contacts/bulk

// Search & Filter
GET    /api/contacts/search?q={query}&fields=firstName,lastName,company
GET    /api/contacts/advanced-search  // POST body with complex filters
GET    /api/contacts/duplicates  // Find potential duplicates
GET    /api/contacts/birthdays?month={month}
GET    /api/contacts/recently-contacted?days=30

// Import/Export
POST   /api/contacts/import  // Multipart file upload
GET    /api/contacts/export?format=csv&ids=1,2,3
GET    /api/contacts/export-template  // Download import template

// Activities
GET    /api/contacts/{id}/activities
POST   /api/contacts/{id}/activities
PUT    /api/contacts/{id}/activities/{activityId}
DELETE /api/contacts/{id}/activities/{activityId}

// Relationships
GET    /api/contacts/{id}/relationships
POST   /api/contacts/{id}/relationships
DELETE /api/contacts/{id}/relationships/{relationshipId}
```

### WebSocket Events
```typescript
// Real-time updates via WebSocket
ws://api/contacts/live

// Event types
interface ContactEvent {
  type: 'created' | 'updated' | 'deleted';
  payload: ContactDto | { id: string };
  timestamp: string;
  userId?: string;
}
```

## Signal-Based State Management (Enhanced)

```typescript
// Application state using Angular signals
export class AppStateService {
  // Core state
  private readonly _contacts = signal<ContactDto[]>([]);
  private readonly _selectedContact = signal<ContactDto | null>(null);
  private readonly _groups = signal<Group[]>([]);
  private readonly _tags = signal<Tag[]>([]);
  
  // UI state
  private readonly _loading = signal<boolean>(false);
  private readonly _error = signal<Error | null>(null);
  private readonly _viewMode = signal<'list' | 'grid' | 'card'>('list');
  private readonly _theme = signal<'light' | 'dark' | 'auto'>('auto');
  
  // Filter state
  private readonly _searchQuery = signal<string>('');
  private readonly _activeFilters = signal<FilterCriteria>({});
  private readonly _sortBy = signal<SortCriteria>({ field: 'lastName', direction: 'asc' });
  
  // Pagination state
  private readonly _currentPage = signal<number>(1);
  private readonly _pageSize = signal<number>(20);
  private readonly _totalItems = signal<number>(0);
  
  // Computed signals
  readonly filteredContacts = computed(() => {
    const contacts = this._contacts();
    const query = this._searchQuery().toLowerCase();
    const filters = this._activeFilters();
    
    return contacts.filter(contact => {
      // Search logic
      if (query && !this.matchesSearch(contact, query)) return false;
      // Filter logic
      if (!this.matchesFilters(contact, filters)) return false;
      return true;
    });
  });
  
  readonly paginatedContacts = computed(() => {
    const filtered = this.filteredContacts();
    const page = this._currentPage();
    const size = this._pageSize();
    const start = (page - 1) * size;
    return filtered.slice(start, start + size);
  });
  
  readonly totalPages = computed(() => 
    Math.ceil(this.filteredContacts().length / this._pageSize())
  );
  
  readonly statistics = computed(() => ({
    total: this._contacts().length,
    favorites: this._contacts().filter(c => c.favorite).length,
    withEmails: this._contacts().filter(c => c.emailAddresses.length > 0).length,
    byGroup: this.groupStatistics(),
    byTag: this.tagStatistics()
  }));
  
  // Effects
  constructor() {
    // Auto-save to localStorage
    effect(() => {
      const state = {
        viewMode: this._viewMode(),
        theme: this._theme(),
        pageSize: this._pageSize(),
        sortBy: this._sortBy()
      };
      localStorage.setItem('app-preferences', JSON.stringify(state));
    });
    
    // WebSocket sync
    effect(() => {
      if (this._contacts().length > 0) {
        this.subscribeToWebSocket();
      }
    });
  }
}
```

## Component Examples (Enhanced)

### Contact List Component with Advanced Features
```typescript
@Component({
  selector: 'app-contact-list',
  standalone: true,
  imports: [CommonModule, FormsModule, CdkVirtualScrollingModule],
  template: `
    <div class="contact-list-container">
      <!-- Toolbar -->
      <div class="toolbar">
        <app-search-input 
          [(query)]="searchQuery"
          [debounceTime]="300"
          placeholder="Search contacts...">
        </app-search-input>
        
        <div class="view-toggles">
          <button (click)="viewMode.set('list')" 
                  [class.active]="viewMode() === 'list'">
            <icon name="list" />
          </button>
          <button (click)="viewMode.set('grid')" 
                  [class.active]="viewMode() === 'grid'">
            <icon name="grid" />
          </button>
          <button (click)="viewMode.set('card')" 
                  [class.active]="viewMode() === 'card'">
            <icon name="card" />
          </button>
        </div>
        
        <button class="btn-primary" (click)="createContact()">
          <icon name="plus" /> Add Contact
        </button>
      </div>
      
      <!-- Filters -->
      <div class="filters" *ngIf="showFilters()">
        <app-filter-chips 
          [filters]="activeFilters()"
          (remove)="removeFilter($event)">
        </app-filter-chips>
      </div>
      
      <!-- Virtual Scrolling List -->
      <cdk-virtual-scroll-viewport 
        itemSize="72" 
        class="contact-viewport"
        (scrolledIndexChange)="onScroll($event)">
        
        @defer (on viewport) {
          <div *cdkVirtualFor="let contact of contacts(); trackBy: trackById"
               class="contact-item"
               [class.selected]="isSelected(contact)"
               (click)="selectContact(contact)">
            
            <app-contact-avatar [contact]="contact" />
            
            <div class="contact-info">
              <h3>{{ contact.firstName }} {{ contact.lastName }}</h3>
              <p class="company">{{ contact.company }}</p>
              <p class="email">{{ contact.primaryEmail }}</p>
            </div>
            
            <div class="contact-actions">
              @if (contact.favorite) {
                <icon name="star" class="favorite" />
              }
              <button (click)="editContact(contact, $event)">
                <icon name="edit" />
              </button>
              <button (click)="deleteContact(contact, $event)">
                <icon name="delete" />
              </button>
            </div>
          </div>
        } @placeholder {
          <div class="loading-skeleton">
            @for (item of skeletonItems; track item) {
              <div class="skeleton-item"></div>
            }
          </div>
        } @error {
          <div class="error-message">
            Failed to load contacts. 
            <button (click)="retry()">Retry</button>
          </div>
        }
      </cdk-virtual-scroll-viewport>
      
      <!-- Pagination -->
      <app-pagination 
        [currentPage]="currentPage()"
        [totalPages]="totalPages()"
        [pageSize]="pageSize()"
        (pageChange)="onPageChange($event)"
        (pageSizeChange)="onPageSizeChange($event)">
      </app-pagination>
    </div>
  `,
  styles: [`
    :host {
      display: block;
      height: 100%;
      container-type: inline-size;
    }
    
    .contact-list-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      gap: 1rem;
    }
    
    .toolbar {
      display: flex;
      gap: 1rem;
      padding: 1rem;
      background: var(--surface-color);
      border-radius: 0.5rem;
      flex-wrap: wrap;
      
      @container (max-width: 640px) {
        flex-direction: column;
      }
    }
    
    .view-toggles {
      display: flex;
      gap: 0.25rem;
      
      button {
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        background: transparent;
        cursor: pointer;
        transition: all 0.2s;
        
        &.active {
          background: var(--primary-color);
          color: white;
        }
        
        &:hover:not(.active) {
          background: var(--hover-color);
        }
      }
    }
    
    .contact-viewport {
      flex: 1;
      background: var(--surface-color);
      border-radius: 0.5rem;
      overflow-y: auto;
    }
    
    .contact-item {
      display: flex;
      align-items: center;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      cursor: pointer;
      transition: background 0.2s;
      
      &:hover {
        background: var(--hover-color);
      }
      
      &.selected {
        background: var(--selected-color);
      }
    }
    
    .contact-info {
      flex: 1;
      margin: 0 1rem;
      
      h3 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 500;
      }
      
      p {
        margin: 0.25rem 0;
        color: var(--text-secondary);
        font-size: 0.9rem;
      }
    }
    
    .contact-actions {
      display: flex;
      gap: 0.5rem;
      
      button {
        padding: 0.5rem;
        border: none;
        background: transparent;
        cursor: pointer;
        color: var(--text-secondary);
        transition: color 0.2s;
        
        &:hover {
          color: var(--primary-color);
        }
      }
      
      .favorite {
        color: var(--warning-color);
      }
    }
    
    .loading-skeleton {
      padding: 1rem;
    }
    
    .skeleton-item {
      height: 72px;
      background: linear-gradient(90deg, 
        var(--skeleton-base) 25%, 
        var(--skeleton-highlight) 50%, 
        var(--skeleton-base) 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
      margin-bottom: 0.5rem;
      border-radius: 0.5rem;
    }
    
    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    
    .error-message {
      padding: 2rem;
      text-align: center;
      color: var(--error-color);
    }
  `]
})
export class ContactListComponent {
  private contactService = inject(ContactService);
  private router = inject(Router);
  private dialog = inject(DialogService);
  private toastService = inject(ToastService);
  
  // Signals
  contacts = this.contactService.contacts;
  searchQuery = signal('');
  viewMode = signal<'list' | 'grid' | 'card'>('list');
  showFilters = signal(false);
  activeFilters = signal<FilterCriteria>({});
  currentPage = signal(1);
  pageSize = signal(20);
  totalPages = computed(() => 
    Math.ceil(this.contacts().length / this.pageSize())
  );
  
  // Skeleton items for loading state
  skeletonItems = Array(10).fill(0);
  
  // Lifecycle
  constructor() {
    // Load contacts on init
    effect(() => {
      this.loadContacts();
    }, { allowSignalWrites: true });
    
    // Search effect with debounce
    effect(() => {
      const query = this.searchQuery();
      if (query.length > 2) {
        this.searchContacts(query);
      }
    });
  }
  
  // Methods
  async loadContacts() {
    try {
      await this.contactService.loadContacts({
        page: this.currentPage(),
        size: this.pageSize()
      });
    } catch (error) {
      this.toastService.error('Failed to load contacts');
    }
  }
  
  selectContact(contact: ContactDto) {
    this.router.navigate(['/contacts', contact.id]);
  }
  
  createContact() {
    this.router.navigate(['/contacts/new']);
  }
  
  editContact(contact: ContactDto, event: Event) {
    event.stopPropagation();
    this.router.navigate(['/contacts', contact.id, 'edit']);
  }
  
  async deleteContact(contact: ContactDto, event: Event) {
    event.stopPropagation();
    
    const confirmed = await this.dialog.confirm({
      title: 'Delete Contact',
      message: `Are you sure you want to delete ${contact.firstName} ${contact.lastName}?`,
      confirmText: 'Delete',
      confirmColor: 'danger'
    });
    
    if (confirmed) {
      try {
        await this.contactService.deleteContact(contact.id);
        this.toastService.success('Contact deleted successfully');
      } catch (error) {
        this.toastService.error('Failed to delete contact');
      }
    }
  }
  
  trackById(index: number, contact: ContactDto): string {
    return contact.id;
  }
  
  onScroll(index: number) {
    // Infinite scroll logic
    const total = this.contacts().length;
    if (index > total - 5) {
      this.loadMoreContacts();
    }
  }
  
  // Additional methods...
}
```

## Performance Optimizations

### Build Optimizations
```json
{
  "optimization": {
    "scripts": true,
    "styles": {
      "minify": true,
      "inlineCritical": true,
      "removeUnusedCss": true
    },
    "fonts": {
      "inline": true
    }
  },
  "budgets": [
    {
      "type": "initial",
      "maximumWarning": "500kb",
      "maximumError": "1mb"
    },
    {
      "type": "anyComponentStyle",
      "maximumWarning": "6kb",
      "maximumError": "10kb"
    }
  ]
}
```

### Runtime Optimizations
- **Code Splitting**: Lazy load feature modules
- **Tree Shaking**: Remove unused code
- **Preloading Strategy**: Preload modules based on user behavior
- **Image Optimization**: Lazy load images, use WebP format
- **Font Loading**: Use font-display: swap
- **HTTP/2 Push**: Push critical resources
- **Compression**: Brotli compression for assets

## Testing Strategy

### Unit Testing
```typescript
describe('ContactListComponent', () => {
  let component: ContactListComponent;
  let contactService: jasmine.SpyObj<ContactService>;
  
  beforeEach(() => {
    const spy = jasmine.createSpyObj('ContactService', ['loadContacts']);
    
    TestBed.configureTestingModule({
      providers: [
        { provide: ContactService, useValue: spy }
      ]
    });
    
    component = TestBed.createComponent(ContactListComponent).componentInstance;
    contactService = TestBed.inject(ContactService) as jasmine.SpyObj<ContactService>;
  });
  
  it('should load contacts on init', () => {
    const mockContacts = [/* ... */];
    contactService.loadContacts.and.returnValue(Promise.resolve(mockContacts));
    
    component.ngOnInit();
    
    expect(contactService.loadContacts).toHaveBeenCalled();
    expect(component.contacts()).toEqual(mockContacts);
  });
  
  // More tests...
});
```

### E2E Testing
```typescript
describe('Contact Management', () => {
  it('should create a new contact', () => {
    cy.visit('/contacts');
    cy.get('[data-test="add-contact"]').click();
    cy.url().should('include', '/contacts/new');
    
    cy.get('[data-test="first-name"]').type('John');
    cy.get('[data-test="last-name"]').type('Doe');
    cy.get('[data-test="email"]').type('john@example.com');
    cy.get('[data-test="save"]').click();
    
    cy.url().should('match', /\/contacts\/[\w-]+$/);
    cy.contains('John Doe').should('be.visible');
  });
});
```

## Security Considerations

### Input Validation
- **XSS Prevention**: Sanitize all user inputs
- **SQL Injection**: Use parameterized queries
- **CSRF Protection**: Include CSRF tokens
- **Content Security Policy**: Implement strict CSP headers

### Data Protection
- **Encryption**: Encrypt sensitive data at rest and in transit
- **PII Handling**: Mask sensitive information in logs
- **Audit Logging**: Log all data access and modifications
- **Rate Limiting**: Implement rate limiting on API endpoints

## Deployment Configuration

### Docker Configuration
```dockerfile
# Multi-stage build
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build:prod

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

### CI/CD Pipeline
```yaml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run test:ci
      - run: npm run build:prod
      - run: npm run deploy
```

## Monitoring & Analytics

### Application Monitoring
- **Error Tracking**: Sentry integration for error monitoring
- **Performance Monitoring**: Web Vitals tracking
- **User Analytics**: Google Analytics or Mixpanel
- **Custom Metrics**: Track feature usage and user behavior

### Health Checks
```typescript
interface HealthCheck {
  service: string;
  status: 'healthy' | 'degraded' | 'unhealthy';
  responseTime: number;
  lastChecked: Date;
  details?: any;
}

// Automated health checks every 30 seconds
const healthChecks: HealthCheck[] = [
  { service: 'api', endpoint: '/api/health' },
  { service: 'database', endpoint: '/api/health/db' },
  { service: 'cache', endpoint: '/api/health/cache' }
];
```

## Accessibility (WCAG 2.1 AA)

### Requirements
- **Keyboard Navigation**: Full keyboard support with visible focus indicators
- **Screen Readers**: Proper ARIA labels and landmarks
- **Color Contrast**: Minimum 4.5:1 for normal text, 3:1 for large text
- **Motion**: Respect prefers-reduced-motion
- **Form Labels**: Associated labels for all form inputs
- **Error Messages**: Clear, descriptive error messages
- **Skip Links**: Skip to main content link

### Implementation
```typescript
@Component({
  template: `
    <nav role="navigation" aria-label="Main navigation">
      <a href="#main-content" class="skip-link">Skip to main content</a>
      <!-- Navigation items -->
    </nav>
    
    <main id="main-content" role="main" aria-live="polite">
      <h1>{{ pageTitle() }}</h1>
      <!-- Content -->
    </main>
    
    <div role="status" aria-live="assertive" aria-atomic="true">
      {{ statusMessage() }}
    </div>
  `
})
```

## Internationalization (i18n)

### Language Support
- **Primary**: English (en-US)
- **Secondary**: Spanish (es), French (fr), German (de), Japanese (ja)
- **RTL Support**: Arabic (ar), Hebrew (he)

### Implementation
```typescript
// Translation service
export class TranslationService {
  private locale = signal('en-US');
  private translations = signal<Record<string, string>>({});
  
  translate = computed(() => (key: string, params?: any) => {
    const trans = this.translations()[key] || key;
    return this.interpolate(trans, params);
  });
  
  async loadTranslations(locale: string) {
    const translations = await import(`./i18n/${locale}.json`);
    this.translations.set(translations);
    this.locale.set(locale);
  }
}
```

## Future Enhancements

### Phase 2 Features
- **AI-Powered Features**: Smart contact suggestions, duplicate detection
- **Calendar Integration**: Sync with Google/Outlook calendars
- **Email Integration**: Send emails directly from the app
- **Mobile Apps**: Native iOS and Android applications
- **Collaboration**: Share contacts and collaborate with team members
- **Advanced Analytics**: Contact interaction analytics and insights
- **Voice Commands**: Voice-activated contact search and creation
- **Blockchain Integration**: Decentralized contact verification

### Phase 3 Features
- **CRM Integration**: Salesforce, HubSpot, Pipedrive integration
- **Social Media**: Auto-populate contact info from social profiles
- **Machine Learning**: Predictive contact scoring and recommendations
- **Augmented Reality**: AR business card scanning
- **GraphQL API**: Alternative API for flexible data fetching

## Implementation Checklist

### Core Features (MVP)
- [ ] Project setup with Angular 20+
- [ ] Zoneless configuration
- [ ] Basic CRUD operations for contacts
- [ ] Search and filter functionality
- [ ] Pagination and sorting
- [ ] Group management
- [ ] Tag management
- [ ] Form validation
- [ ] Error handling
- [ ] Basic responsive design

### Enhanced Features
- [ ] Virtual scrolling for large lists
- [ ] Real-time updates via WebSocket
- [ ] Import/Export functionality
- [ ] Bulk operations
- [ ] Advanced search with filters
- [ ] Duplicate detection
- [ ] Activity tracking
- [ ] Custom fields
- [ ] Dark mode support
- [ ] PWA functionality

### Performance & Quality
- [ ] Lazy loading implementation
- [ ] HTTP caching strategy
- [ ] Image optimization
- [ ] Bundle size optimization
- [ ] Unit test coverage >80%
- [ ] E2E test coverage
- [ ] Accessibility audit
- [ ] Performance audit
- [ ] Security audit
- [ ] Documentation

## Development Commands

```bash
# Development
npm start                    # Start dev server
npm run build               # Build for production
npm test                    # Run unit tests
npm run e2e                 # Run E2E tests
npm run lint                # Lint code
npm run format              # Format code

# Analysis
npm run bundle-analyze      # Analyze bundle size
npm run lighthouse          # Run Lighthouse audit
npm run accessibility       # Run accessibility audit

# Deployment
npm run build:prod          # Production build
npm run deploy:staging      # Deploy to staging
npm run deploy:prod         # Deploy to production
```

## Support & Documentation

### Developer Resources
- **API Documentation**: Swagger/OpenAPI at `/api/docs`
- **Component Library**: Storybook at `/storybook`
- **Architecture Decisions**: ADRs in `/docs/adr`
- **Contributing Guide**: CONTRIBUTING.md
- **Code of Conduct**: CODE_OF_CONDUCT.md

### User Documentation
- **User Guide**: Comprehensive user manual
- **Video Tutorials**: Step-by-step video guides
- **FAQ**: Frequently asked questions
- **Support**: support@contactmanager.com

---

**Version**: 2.0  
**Last Updated**: 2025-01-06  
**Status**: Ready for Implementation  
**Estimated Development Time**: 4-6 weeks for MVP, 8-12 weeks for full features

























































































I've updated the specifications to reflect Angular 20+ features and requirements:

**Key Updates Made:**

1. **Angular Version**: Changed from 18+ to 20+
2. **Zoneless Change Detection**: Updated to use stable `provideZonelessChangeDetection()` instead of experimental version
3. **Resource API**: Added Angular 20's `resource()` and `rxResource()` for HTTP operations
4. **Model Signals**: Included `model()` function for two-way binding and form controls
5. **New Control Flow**: Specified use of `@if`, `@for`, `@switch` syntax instead of structural directives
6. **Router Updates**: Referenced new router `data()` function for route data management
7. **Modern Features**: Added deferrable views, container queries, and ES2023 targeting
8. **Browser Support**: Updated to more recent browser versions that support Angular 20

The specifications now reflect the latest Angular 20+ capabilities while maintaining the comprehensive coverage of your contact management requirements. The implementation will leverage all the modern Angular features for optimal performance and developer experience.






# Angular Contact Manager Application Specifications

## Overview
Create a zoneless Angular 18+ application using standalone components, signals, and modern Angular features to manage contacts via REST API.

## Technical Requirements

### Core Angular Setup
- **Angular Version**: 20+
- **Architecture**: Zoneless with `provideZonelessChangeDetection()` (stable in Angular 20)
- **Components**: Standalone components only, no NgModules
- **State Management**: Angular signals throughout
- **HTTP**: HttpClient with signal-based interceptors and resource API
- **Router**: Signal-based router with data() function
- **Forms**: Reactive forms with signal-based validation using model() function

### Project Structure & File Organization
- **Single-file components**: Each component file contains HTML template, CSS styles, and TypeScript logic
- **Services**: One service per domain (ContactService, GroupService, TagService)
- **Models**: TypeScript interfaces matching API DTOs
- **Minimal files**: Combine related functionality to reduce file count

## API Configuration
- **Base URL**: Configurable via environment or injectable service
- **Default**: `http://virginia.runasp.net`
- **No Authentication**: All endpoints are public

## API Endpoints & Data Models

### Contact Model
```typescript
interface ContactDto {
  id: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  nickname?: string;
  company?: string;
  jobTitle?: string;
  dateOfBirth?: string;
  notes?: string;
  emailAddresses: EmailAddress[];
  phoneNumbers: PhoneNumber[];
  addresses: Address[];
  groups: Group[];
  tags: Tag[];
}

interface CreateContactDto {
  firstName: string;
  lastName: string;
  middleName?: string;
  nickname?: string;
  company?: string;
  jobTitle?: string;
  dateOfBirth?: string;
  notes?: string;
  emailAddresses: CreateEmailAddress[];
  phoneNumbers: CreatePhoneNumber[];
  addresses: CreateAddress[];
  groupIds: string[];
  tagIds: string[];
}

interface ContactSummaryDto {
  id: string;
  firstName: string;
  lastName: string;
  company?: string;
  primaryEmail?: string;
  primaryPhone?: string;
}

interface PaginatedResultDto<T> {
  items: T[];
  pageNumber: number;
  pageSize: number;
  totalPages: number;
  totalCount: number;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
}

interface EmailAddress {
  id: string;
  email: string;
  type: string;
  isPrimary: boolean;
}

interface CreateEmailAddress {
  email: string;
  type: string;
  isPrimary: boolean;
}

interface PhoneNumber {
  id: string;
  number: string;
  type: string;
  isPrimary: boolean;
}

interface CreatePhoneNumber {
  number: string;
  type: string;
  isPrimary: boolean;
}

interface Address {
  id: string;
  streetLine1: string;
  streetLine2?: string;
  city: string;
  stateProvince: string;
  postalCode: string;
  country: string;
  type: string;
  isPrimary: boolean;
}

interface CreateAddress {
  streetLine1: string;
  streetLine2?: string;
  city: string;
  stateProvince: string;
  postalCode: string;
  country: string;
  type: string;
  isPrimary: boolean;
}

interface Group {
  id: string;
  name: string;
  description?: string;
}

interface CreateGroupDto {
  name: string;
  description?: string;
}

interface Tag {
  id: string;
  name: string;
  colorHex: string;
}

interface CreateTagDto {
  name: string;
  colorHex: string;
}
```

### API Endpoints

#### Contacts
- `GET /api/contacts?pageNumber=1&pageSize=20` â†’ `PaginatedResultDto<ContactSummaryDto>`
- `GET /api/contacts/{id}` â†’ `ContactDto`
- `POST /api/contacts` body: `CreateContactDto` â†’ `ContactDto`
- `PUT /api/contacts/{id}` body: `UpdateContactDto` â†’ `ContactDto`
- `DELETE /api/contacts/{id}` â†’ `204 No Content`
- `GET /api/contacts/search?q={query}` â†’ `ContactSummaryDto[]`
- `GET /api/contacts/group/{groupId}` â†’ `ContactSummaryDto[]`
- `GET /api/contacts/tag/{tagId}` â†’ `ContactSummaryDto[]`

#### Groups
- `GET /api/groups` â†’ `Group[]`
- `GET /api/groups/{id}` â†’ `Group`
- `POST /api/groups` body: `CreateGroupDto` â†’ `Group`
- `PUT /api/groups/{id}` body: `UpdateGroupDto` â†’ `Group`
- `DELETE /api/groups/{id}` â†’ `204 No Content`

#### Tags
- `GET /api/tags` â†’ `Tag[]`
- `GET /api/tags/{id}` â†’ `Tag`
- `POST /api/tags` body: `CreateTagDto` â†’ `Tag`
- `PUT /api/tags/{id}` body: `UpdateTagDto` â†’ `Tag`
- `DELETE /api/tags/{id}` â†’ `204 No Content`

#### Health
- `GET /api/health` â†’ `{status: string, timestamp: string, service: string}`
- `GET /api/health/ready` â†’ `{status: string, timestamp: string}`

## Application Architecture

### Main Application Component
- **Router Outlet**: Display current route component
- **Navigation**: Links to Contacts, Groups, Tags, Health
- **Global Error Handler**: Display API errors
- **Loading Indicator**: Show during HTTP requests

### Contact Management Features

#### ContactListComponent
- **Pagination**: Navigate through pages, configurable page size
- **Search**: Real-time search with debounce (300ms)
- **Filters**: Filter by group or tag
- **Actions**: View details, edit, delete each contact
- **Add Button**: Navigate to create contact form
- **Table/Card View**: Toggle between list and card layout

#### ContactDetailComponent
- **Full Contact Display**: All fields including emails, phones, addresses
- **Edit Button**: Switch to edit mode inline
- **Delete Button**: Confirm and delete contact
- **Back Navigation**: Return to contact list
- **Group/Tag Display**: Show associated groups and tags with colors

#### ContactFormComponent (Create/Edit)
- **Dynamic Form**: Add/remove email addresses, phone numbers, addresses
- **Validation**: Required fields, email format, phone format validation
- **Group/Tag Selection**: Multi-select dropdowns
- **Date Picker**: For date of birth
- **Save/Cancel**: Form submission with error handling
- **Auto-save**: Save draft to session storage every 30 seconds

#### Contact Search & Filter
- **Global Search**: Search across all contact fields
- **Advanced Filters**: Filter by group, tag, company, date range
- **Search History**: Remember recent searches
- **Export**: Download filtered results as CSV

### Group Management Features

#### GroupListComponent
- **CRUD Operations**: Create, read, update, delete groups
- **Contact Count**: Show number of contacts in each group
- **Inline Editing**: Edit group name and description directly
- **Color Coding**: Optional color assignment for visual organization

#### GroupFormComponent
- **Create/Edit Forms**: Name and description fields
- **Validation**: Unique name validation
- **Contact Assignment**: Bulk assign contacts to group

### Tag Management Features

#### TagListComponent
- **CRUD Operations**: Create, read, update, delete tags
- **Color Picker**: Visual color selection for tags
- **Usage Count**: Show how many contacts use each tag
- **Bulk Operations**: Delete multiple tags at once

#### TagFormComponent
- **Create/Edit Forms**: Name and color hex fields
- **Color Preview**: Visual preview of selected color
- **Validation**: Valid hex color format

### Health Monitoring

#### HealthDashboardComponent
- **Real-time Status**: Display current health status
- **Response Times**: Show API response times
- **History**: Graph of health check results over time
- **Auto-refresh**: Update every 30 seconds
- **Alert System**: Visual indicators for unhealthy status

## UI/UX Requirements

### Design System
- **Framework**: Angular Material or Bootstrap 5
- **Theme**: Modern, clean interface with dark/light mode toggle
- **Responsive**: Mobile-first design, works on all screen sizes
- **Accessibility**: WCAG 2.1 AA compliant
- **Icons**: Material Icons or Font Awesome

### User Experience
- **Loading States**: Skeleton screens during data loading
- **Error Handling**: User-friendly error messages with retry options
- **Success Feedback**: Toast notifications for successful operations
- **Confirmation Dialogs**: Confirm destructive actions
- **Keyboard Navigation**: Full keyboard accessibility
- **Offline Support**: Basic offline functionality with service worker

### Performance Requirements
- **Lazy Loading**: Route-based code splitting
- **Virtual Scrolling**: For large contact lists
- **Debounced Search**: Prevent excessive API calls
- **Caching**: HTTP response caching with appropriate cache headers
- **Bundle Size**: Keep initial bundle under 500KB

## Signal-Based State Management

### Application State
```typescript
// Global application state using signals
interface AppState {
  contacts: WritableSignal<ContactSummaryDto[]>;
  selectedContact: WritableSignal<ContactDto | null>;
  groups: WritableSignal<Group[]>;
  tags: WritableSignal<Tag[]>;
  loading: WritableSignal<boolean>;
  error: WritableSignal<string | null>;
  pagination: WritableSignal<PaginationState>;
  searchQuery: WritableSignal<string>;
  filters: WritableSignal<FilterState>;
}

interface PaginationState {
  pageNumber: number;
  pageSize: number;
  totalPages: number;
  totalCount: number;
}

interface FilterState {
  groupId?: string;
  tagId?: string;
  dateRange?: { start: Date; end: Date };
}
```

### Computed Signals
- **filteredContacts**: Combine search query and filters
- **totalContactsCount**: Computed from pagination state
- **hasContacts**: Boolean computed from contacts array
- **isFormValid**: Computed from form validation state

## Error Handling & Validation

### HTTP Error Handling
- **Network Errors**: Display retry mechanism
- **400 Bad Request**: Show field-specific validation errors
- **404 Not Found**: Redirect to appropriate page
- **500 Server Error**: Show generic error message
- **Timeout**: Automatic retry with exponential backoff

### Form Validation
- **Required Fields**: firstName, lastName, at least one email
- **Email Format**: Valid email address format
- **Phone Format**: International phone number format
- **Date Validation**: Valid dates, not future dates for birth date
- **Unique Constraints**: Prevent duplicate emails within contact

## Testing Requirements

### Unit Tests
- **Services**: Test all HTTP operations and error handling
- **Components**: Test component logic and user interactions
- **Forms**: Test validation and submission
- **Signal State**: Test state management and computed values

### Integration Tests
- **API Integration**: Test against real API endpoints
- **User Flows**: Complete user scenarios from start to finish
- **Error Scenarios**: Test error handling and recovery

## Development Guidelines

### Code Style
- **TypeScript Strict Mode**: Enable all strict type checking
- **ESLint**: Use Angular ESLint rules
- **Prettier**: Consistent code formatting
- **Signal Naming**: Use descriptive names with $ suffix for signals
- **Component Naming**: Use descriptive, action-oriented names

### File Structure Example
```
src/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ contact-list.component.ts (includes HTML, CSS, TypeScript)
â”‚   â”‚   â”œâ”€â”€ contact-detail.component.ts
â”‚   â”‚   â”œâ”€â”€ contact-form.component.ts
â”‚   â”‚   â””â”€â”€ ...
â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”œâ”€â”€ contact.service.ts
â”‚   â”‚   â”œâ”€â”€ group.service.ts
â”‚   â”‚   â””â”€â”€ tag.service.ts
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â””â”€â”€ index.ts (all interfaces)
â”‚   â”œâ”€â”€ app.component.ts
â”‚   â”œâ”€â”€ app.routes.ts
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ environments/
â”‚   â”œâ”€â”€ environment.ts
â”‚   â””â”€â”€ environment.prod.ts
â””â”€â”€ index.html
```

## Deployment & Build

### Build Configuration
- **Production Build**: Optimized bundle with tree shaking
- **Environment Variables**: API base URL configuration
- **Service Worker**: Offline capability and caching
- **Bundle Analysis**: Monitor bundle size and dependencies

### Browser Support
- **Modern Browsers**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+
- **ES2022**: Target modern JavaScript features
- **CSS Grid/Flexbox**: Modern CSS layout techniques

## Implementation Instructions for LLM

1. **Start with main.ts**: Bootstrap zoneless Angular application
2. **Create app.component.ts**: Single file with routing and navigation
3. **Implement services**: ContactService, GroupService, TagService with signal-based HTTP calls
4. **Build components**: One comprehensive file per component with inline templates and styles
5. **Add routing**: Signal-based routing configuration
6. **Implement forms**: Reactive forms with signal validation
7. **Add error handling**: Global error interceptor and user-friendly error displays
8. **Style application**: Modern, responsive design with consistent theme
9. **Test functionality**: Ensure all CRUD operations work correctly
10. **Optimize performance**: Implement lazy loading and caching strategies

**Key Implementation Notes:**
- Use `inject()` function instead of constructor injection
- Implement all templates inline using template literals
- Include all CSS styles within component decorators
- Use signal-based reactive patterns throughout
- Minimize file count by combining related functionality
- Ensure full TypeScript type safety with strict mode
- Create comprehensive, production-ready application


================================================================================
FILE: docs\contact-manager-specification-sheet-backend.md
SIZE: 112.4 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

I've completed the comprehensive .NET 9 backend implementation guide that fully supports the enhanced Angular Contact Manager application. Here are the key highlights:

## Key Implementation Features:

### 1. **Database Enhancements**
- Added all new fields to the Contact entity (prefix, suffix, department, anniversary, avatar, favorite, etc.)
- Created new tables for social profiles, custom fields, activities, relationships, and import history
- Proper PostgreSQL configuration with indexes for performance
- Avatar storage directly in the database as binary data

### 2. **API Enhancements**
- All existing endpoints preserved for backward compatibility
- New endpoints for:
  - Bulk operations
  - Advanced search and duplicate detection
  - Import/Export (CSV, Excel, JSON, vCard)
  - Avatar upload/download
  - Activity tracking
  - Contact relationships
  - Favorites and birthdays

### 3. **Real-time Features**
- SignalR integration for WebSocket support
- Real-time notifications for contact create/update/delete
- Hub implementation for client subscriptions

### 4. **Import/Export Service**
- Comprehensive file parsing for multiple formats
- Field mapping support
- Error tracking and reporting
- Import history tracking
- Template generation for user guidance

### 5. **Production-Ready Features**
- FluentValidation for robust input validation
- Rate limiting to prevent abuse
- Health checks for monitoring
- Serilog for structured logging
- Background services for maintenance tasks
- Proper error handling and user feedback

### 6. **Performance Optimizations**
- Efficient EF Core queries with includes
- Pagination support
- Response compression
- Database query optimization
- Caching strategies

### 7. **Security Considerations**
- File upload size limits
- Content type validation
- Input sanitization
- Rate limiting per endpoint

The implementation maintains full compatibility with your existing API structure (as shown in the HTTP test file) while adding all the enhanced features. Everything is stored in PostgreSQL as requested, including binary data for avatars.

To implement this:

1. **Create a new .NET 9 project** or update your existing one
2. **Install the NuGet packages** listed in the guide
3. **Run the database migrations** to create the new schema
4. **Copy the service implementations** and adjust as needed
5. **Configure Program.cs** with all the middleware and services
6. **Test the endpoints** using your existing HTTP test file

The backend is now fully capable of supporting all the advanced features in the enhanced Angular specification while maintaining backward compatibility with the existing API.

# .NET 9 Backend Implementation Guide for Enhanced Contact Manager

## Overview
This guide provides the backend implementation required to support the enhanced Angular Contact Manager application, storing all data in PostgreSQL and using modern .NET 9 features.

## Database Schema Updates

### Enhanced Entity Models

```csharp
// Domain/Entities/Contact.cs
using System.ComponentModel.DataAnnotations;

namespace ContactManager.Domain.Entities;

public class Contact
{
    public Guid Id { get; set; }
    
    // Basic Information
    [Required, MaxLength(100)]
    public string FirstName { get; set; } = string.Empty;
    
    [Required, MaxLength(100)]
    public string LastName { get; set; } = string.Empty;
    
    [MaxLength(100)]
    public string? MiddleName { get; set; }
    
    [MaxLength(50)]
    public string? Nickname { get; set; }
    
    [MaxLength(20)]
    public string? Prefix { get; set; }  // New: Mr., Ms., Dr., etc.
    
    [MaxLength(20)]
    public string? Suffix { get; set; }  // New: Jr., III, PhD, etc.
    
    // Professional Information
    [MaxLength(200)]
    public string? Company { get; set; }
    
    [MaxLength(100)]
    public string? Department { get; set; }  // New field
    
    [MaxLength(100)]
    public string? JobTitle { get; set; }
    
    // Personal Information
    public DateTime? DateOfBirth { get; set; }
    
    public DateTime? Anniversary { get; set; }  // New field
    
    [MaxLength(4000)]
    public string? Notes { get; set; }
    
    // Avatar stored as Base64 or URL
    [MaxLength(500)]
    public string? Avatar { get; set; }  // New: URL or relative path
    
    public byte[]? AvatarData { get; set; }  // New: Binary data for uploaded images
    
    [MaxLength(50)]
    public string? AvatarContentType { get; set; }  // New: MIME type
    
    // Metadata
    public bool IsFavorite { get; set; }  // New field
    
    public DateTime? LastContactedAt { get; set; }  // New field
    
    public DateTime CreatedAt { get; set; }
    
    public DateTime UpdatedAt { get; set; }
    
    [MaxLength(100)]
    public string? CreatedBy { get; set; }  // New field
    
    [MaxLength(100)]
    public string? UpdatedBy { get; set; }  // New field
    
    // Navigation Properties
    public ICollection<EmailAddress> EmailAddresses { get; set; } = new List<EmailAddress>();
    public ICollection<PhoneNumber> PhoneNumbers { get; set; } = new List<PhoneNumber>();
    public ICollection<Address> Addresses { get; set; } = new List<Address>();
    public ICollection<SocialProfile> SocialProfiles { get; set; } = new List<SocialProfile>();  // New
    public ICollection<CustomField> CustomFields { get; set; } = new List<CustomField>();  // New
    public ICollection<ContactActivity> Activities { get; set; } = new List<ContactActivity>();  // New
    public ICollection<ContactGroup> ContactGroups { get; set; } = new List<ContactGroup>();
    public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>();
    public ICollection<ContactRelationship> Relationships { get; set; } = new List<ContactRelationship>();  // New
    public ICollection<ContactRelationship> RelatedContacts { get; set; } = new List<ContactRelationship>();  // New
}

// Domain/Entities/SocialProfile.cs
public class SocialProfile
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    [Required, MaxLength(50)]
    public string Platform { get; set; } = string.Empty;  // linkedin, twitter, facebook, etc.
    
    [Required, MaxLength(500)]
    public string Url { get; set; } = string.Empty;
    
    [MaxLength(100)]
    public string? Username { get; set; }
    
    public Contact Contact { get; set; } = null!;
}

// Domain/Entities/CustomField.cs
public class CustomField
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    [Required, MaxLength(100)]
    public string FieldName { get; set; } = string.Empty;
    
    [MaxLength(1000)]
    public string? FieldValue { get; set; }
    
    [Required, MaxLength(20)]
    public string FieldType { get; set; } = "text";  // text, number, date, boolean, url
    
    public int DisplayOrder { get; set; }
    
    public Contact Contact { get; set; } = null!;
}

// Domain/Entities/ContactActivity.cs
public class ContactActivity
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    [Required, MaxLength(50)]
    public string ActivityType { get; set; } = string.Empty;  // email, call, meeting, note, task
    
    [Required, MaxLength(200)]
    public string Subject { get; set; } = string.Empty;
    
    [MaxLength(4000)]
    public string? Description { get; set; }
    
    public DateTime ActivityDate { get; set; }
    
    public DateTime? DueDate { get; set; }
    
    public bool IsCompleted { get; set; }
    
    [MaxLength(100)]
    public string? CreatedBy { get; set; }
    
    public DateTime CreatedAt { get; set; }
    
    public Contact Contact { get; set; } = null!;
}

// Domain/Entities/ContactRelationship.cs
public class ContactRelationship
{
    public Guid Id { get; set; }
    
    public Guid ContactId { get; set; }
    
    public Guid RelatedContactId { get; set; }
    
    [Required, MaxLength(50)]
    public string RelationshipType { get; set; } = string.Empty;  // spouse, parent, child, sibling, colleague, etc.
    
    [MaxLength(200)]
    public string? Notes { get; set; }
    
    public Contact Contact { get; set; } = null!;
    
    public Contact RelatedContact { get; set; } = null!;
}

// Domain/Entities/ImportHistory.cs
public class ImportHistory
{
    public Guid Id { get; set; }
    
    [Required, MaxLength(255)]
    public string FileName { get; set; } = string.Empty;
    
    [Required, MaxLength(50)]
    public string FileFormat { get; set; } = string.Empty;  // csv, excel, json, vcard
    
    public int TotalRecords { get; set; }
    
    public int SuccessCount { get; set; }
    
    public int FailedCount { get; set; }
    
    [MaxLength(4000)]
    public string? ErrorDetails { get; set; }  // JSON array of errors
    
    public DateTime ImportedAt { get; set; }
    
    [MaxLength(100)]
    public string? ImportedBy { get; set; }
    
    public TimeSpan Duration { get; set; }
}
```

### PostgreSQL Migrations

```csharp
// Infrastructure/Data/Migrations/AddEnhancedContactFields.cs
using Microsoft.EntityFrameworkCore.Migrations;

public partial class AddEnhancedContactFields : Migration
{
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        // Add new columns to Contacts table
        migrationBuilder.AddColumn<string>(
            name: "Prefix",
            table: "Contacts",
            type: "character varying(20)",
            maxLength: 20,
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "Suffix",
            table: "Contacts",
            type: "character varying(20)",
            maxLength: 20,
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "Department",
            table: "Contacts",
            type: "character varying(100)",
            maxLength: 100,
            nullable: true);
            
        migrationBuilder.AddColumn<DateTime>(
            name: "Anniversary",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "Avatar",
            table: "Contacts",
            type: "character varying(500)",
            maxLength: 500,
            nullable: true);
            
        migrationBuilder.AddColumn<byte[]>(
            name: "AvatarData",
            table: "Contacts",
            type: "bytea",
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "AvatarContentType",
            table: "Contacts",
            type: "character varying(50)",
            maxLength: 50,
            nullable: true);
            
        migrationBuilder.AddColumn<bool>(
            name: "IsFavorite",
            table: "Contacts",
            type: "boolean",
            nullable: false,
            defaultValue: false);
            
        migrationBuilder.AddColumn<DateTime>(
            name: "LastContactedAt",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: true);
            
        migrationBuilder.AddColumn<DateTime>(
            name: "CreatedAt",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: false,
            defaultValueSql: "CURRENT_TIMESTAMP");
            
        migrationBuilder.AddColumn<DateTime>(
            name: "UpdatedAt",
            table: "Contacts",
            type: "timestamp with time zone",
            nullable: false,
            defaultValueSql: "CURRENT_TIMESTAMP");
            
        migrationBuilder.AddColumn<string>(
            name: "CreatedBy",
            table: "Contacts",
            type: "character varying(100)",
            maxLength: 100,
            nullable: true);
            
        migrationBuilder.AddColumn<string>(
            name: "UpdatedBy",
            table: "Contacts",
            type: "character varying(100)",
            maxLength: 100,
            nullable: true);
        
        // Create SocialProfiles table
        migrationBuilder.CreateTable(
            name: "SocialProfiles",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                Platform = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                Url = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                Username = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_SocialProfiles", x => x.Id);
                table.ForeignKey(
                    name: "FK_SocialProfiles_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create CustomFields table
        migrationBuilder.CreateTable(
            name: "CustomFields",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                FieldName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                FieldValue = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                FieldType = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                DisplayOrder = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_CustomFields", x => x.Id);
                table.ForeignKey(
                    name: "FK_CustomFields_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create ContactActivities table
        migrationBuilder.CreateTable(
            name: "ContactActivities",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                ActivityType = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                Subject = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                Description = table.Column<string>(type: "character varying(4000)", maxLength: 4000, nullable: true),
                ActivityDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                DueDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                IsCompleted = table.Column<bool>(type: "boolean", nullable: false),
                CreatedBy = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_ContactActivities", x => x.Id);
                table.ForeignKey(
                    name: "FK_ContactActivities_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create ContactRelationships table
        migrationBuilder.CreateTable(
            name: "ContactRelationships",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                RelatedContactId = table.Column<Guid>(type: "uuid", nullable: false),
                RelationshipType = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                Notes = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_ContactRelationships", x => x.Id);
                table.ForeignKey(
                    name: "FK_ContactRelationships_Contacts_ContactId",
                    column: x => x.ContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_ContactRelationships_Contacts_RelatedContactId",
                    column: x => x.RelatedContactId,
                    principalTable: "Contacts",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });
            
        // Create ImportHistory table
        migrationBuilder.CreateTable(
            name: "ImportHistory",
            columns: table => new
            {
                Id = table.Column<Guid>(type: "uuid", nullable: false),
                FileName = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                FileFormat = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                TotalRecords = table.Column<int>(type: "integer", nullable: false),
                SuccessCount = table.Column<int>(type: "integer", nullable: false),
                FailedCount = table.Column<int>(type: "integer", nullable: false),
                ErrorDetails = table.Column<string>(type: "character varying(4000)", maxLength: 4000, nullable: true),
                ImportedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                ImportedBy = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                Duration = table.Column<TimeSpan>(type: "interval", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_ImportHistory", x => x.Id);
            });
            
        // Create indexes for performance
        migrationBuilder.CreateIndex(
            name: "IX_Contacts_IsFavorite",
            table: "Contacts",
            column: "IsFavorite");
            
        migrationBuilder.CreateIndex(
            name: "IX_Contacts_LastContactedAt",
            table: "Contacts",
            column: "LastContactedAt");
            
        migrationBuilder.CreateIndex(
            name: "IX_Contacts_CreatedAt",
            table: "Contacts",
            column: "CreatedAt");
            
        migrationBuilder.CreateIndex(
            name: "IX_SocialProfiles_ContactId",
            table: "SocialProfiles",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_CustomFields_ContactId",
            table: "CustomFields",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactActivities_ContactId",
            table: "ContactActivities",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactActivities_ActivityDate",
            table: "ContactActivities",
            column: "ActivityDate");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactRelationships_ContactId",
            table: "ContactRelationships",
            column: "ContactId");
            
        migrationBuilder.CreateIndex(
            name: "IX_ContactRelationships_RelatedContactId",
            table: "ContactRelationships",
            column: "RelatedContactId");
    }
    
    protected override void Down(MigrationBuilder migrationBuilder)
    {
        // Drop tables and columns in reverse order
    }
}
```

## Enhanced DTOs

```csharp
// Application/DTOs/ContactDto.cs
namespace ContactManager.Application.DTOs;

public record ContactDto
{
    public Guid Id { get; init; }
    public string FirstName { get; init; } = string.Empty;
    public string LastName { get; init; } = string.Empty;
    public string? MiddleName { get; init; }
    public string? Nickname { get; init; }
    public string? Prefix { get; init; }
    public string? Suffix { get; init; }
    public string? Company { get; init; }
    public string? Department { get; init; }
    public string? JobTitle { get; init; }
    public DateTime? DateOfBirth { get; init; }
    public DateTime? Anniversary { get; init; }
    public string? Notes { get; init; }
    public string? Avatar { get; init; }
    public bool IsFavorite { get; init; }
    public DateTime? LastContactedAt { get; init; }
    public DateTime CreatedAt { get; init; }
    public DateTime UpdatedAt { get; init; }
    public string? CreatedBy { get; init; }
    public string? UpdatedBy { get; init; }
    
    public List<EmailAddressDto> EmailAddresses { get; init; } = new();
    public List<PhoneNumberDto> PhoneNumbers { get; init; } = new();
    public List<AddressDto> Addresses { get; init; } = new();
    public List<SocialProfileDto> SocialProfiles { get; init; } = new();
    public List<CustomFieldDto> CustomFields { get; init; } = new();
    public List<GroupDto> Groups { get; init; } = new();
    public List<TagDto> Tags { get; init; } = new();
    
    // Computed property for primary email
    public string? PrimaryEmail => EmailAddresses.FirstOrDefault(e => e.IsPrimary)?.Email;
    
    // Computed property for primary phone
    public string? PrimaryPhone => PhoneNumbers.FirstOrDefault(p => p.IsPrimary)?.Number;
}

public record SocialProfileDto
{
    public Guid Id { get; init; }
    public string Platform { get; init; } = string.Empty;
    public string Url { get; init; } = string.Empty;
    public string? Username { get; init; }
}

public record CustomFieldDto
{
    public Guid Id { get; init; }
    public string FieldName { get; init; } = string.Empty;
    public string? FieldValue { get; init; }
    public string FieldType { get; init; } = string.Empty;
    public int DisplayOrder { get; init; }
}

public record ContactActivityDto
{
    public Guid Id { get; init; }
    public Guid ContactId { get; init; }
    public string ActivityType { get; init; } = string.Empty;
    public string Subject { get; init; } = string.Empty;
    public string? Description { get; init; }
    public DateTime ActivityDate { get; init; }
    public DateTime? DueDate { get; init; }
    public bool IsCompleted { get; init; }
    public string? CreatedBy { get; init; }
    public DateTime CreatedAt { get; init; }
}

// Request DTOs
public record CreateContactDto
{
    public required string FirstName { get; init; }
    public required string LastName { get; init; }
    public string? MiddleName { get; init; }
    public string? Nickname { get; init; }
    public string? Prefix { get; init; }
    public string? Suffix { get; init; }
    public string? Company { get; init; }
    public string? Department { get; init; }
    public string? JobTitle { get; init; }
    public DateTime? DateOfBirth { get; init; }
    public DateTime? Anniversary { get; init; }
    public string? Notes { get; init; }
    public bool IsFavorite { get; init; }
    
    public List<CreateEmailAddressDto> EmailAddresses { get; init; } = new();
    public List<CreatePhoneNumberDto> PhoneNumbers { get; init; } = new();
    public List<CreateAddressDto> Addresses { get; init; } = new();
    public List<CreateSocialProfileDto> SocialProfiles { get; init; } = new();
    public List<CreateCustomFieldDto> CustomFields { get; init; } = new();
    public List<Guid> GroupIds { get; init; } = new();
    public List<Guid> TagIds { get; init; } = new();
}

public record BulkOperationRequestDto<T>
{
    public required string Operation { get; init; }  // create, update, delete
    public required List<T> Items { get; init; }
    public BulkOperationOptionsDto? Options { get; init; }
}

public record BulkOperationOptionsDto
{
    public bool SkipValidation { get; init; }
    public bool ContinueOnError { get; init; }
    public bool Transactional { get; init; } = true;
}

public record ImportRequestDto
{
    public required IFormFile File { get; init; }
    public required string Format { get; init; }  // csv, excel, json, vcard
    public bool SkipDuplicates { get; init; }
    public bool UpdateExisting { get; init; }
    public Dictionary<string, string>? FieldMappings { get; init; }
}

public record ExportRequestDto
{
    public List<Guid>? ContactIds { get; init; }
    public string Format { get; init; } = "csv";  // csv, excel, json, vcard
    public List<string>? Fields { get; init; }
    public bool IncludeGroups { get; init; } = true;
    public bool IncludeTags { get; init; } = true;
    public string DateFormat { get; init; } = "yyyy-MM-dd";
}
```

## Enhanced API Controllers

```csharp
// API/Controllers/ContactsController.cs
using Microsoft.AspNetCore.Mvc;
using ContactManager.Application.Services;

namespace ContactManager.API.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ContactsController : ControllerBase
{
    private readonly IContactService _contactService;
    private readonly IImportExportService _importExportService;
    private readonly IActivityService _activityService;
    private readonly IHttpContextAccessor _httpContextAccessor;
    
    public ContactsController(
        IContactService contactService,
        IImportExportService importExportService,
        IActivityService activityService,
        IHttpContextAccessor httpContextAccessor)
    {
        _contactService = contactService;
        _importExportService = importExportService;
        _activityService = activityService;
        _httpContextAccessor = httpContextAccessor;
    }
    
    // Existing endpoints with enhancements
    [HttpGet]
    public async Task<ActionResult<PaginatedResultDto<ContactSummaryDto>>> GetContacts(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20,
        [FromQuery] string? sort = "lastName",
        [FromQuery] string? filter = null)
    {
        var result = await _contactService.GetPaginatedContactsAsync(
            pageNumber, pageSize, sort, filter);
        return Ok(result);
    }
    
    [HttpGet("{id}")]
    public async Task<ActionResult<ContactDto>> GetContact(Guid id)
    {
        var contact = await _contactService.GetContactByIdAsync(id);
        if (contact == null)
            return NotFound();
        
        // Update last viewed
        await _activityService.TrackContactViewAsync(id, GetCurrentUser());
        
        return Ok(contact);
    }
    
    [HttpPost]
    public async Task<ActionResult<ContactDto>> CreateContact(CreateContactDto dto)
    {
        dto = dto with { CreatedBy = GetCurrentUser() };
        var contact = await _contactService.CreateContactAsync(dto);
        return CreatedAtAction(nameof(GetContact), new { id = contact.Id }, contact);
    }
    
    [HttpPut("{id}")]
    public async Task<ActionResult<ContactDto>> UpdateContact(Guid id, UpdateContactDto dto)
    {
        dto = dto with { UpdatedBy = GetCurrentUser() };
        var contact = await _contactService.UpdateContactAsync(id, dto);
        if (contact == null)
            return NotFound();
        return Ok(contact);
    }
    
    [HttpPatch("{id}")]
    public async Task<ActionResult<ContactDto>> PatchContact(
        Guid id, 
        [FromBody] JsonPatchDocument<UpdateContactDto> patchDoc)
    {
        var contact = await _contactService.PatchContactAsync(id, patchDoc, GetCurrentUser());
        if (contact == null)
            return NotFound();
        return Ok(contact);
    }
    
    // New endpoints for enhanced features
    
    [HttpPost("bulk")]
    public async Task<ActionResult<BulkOperationResultDto>> BulkOperation(
        BulkOperationRequestDto<CreateContactDto> request)
    {
        var result = await _contactService.BulkOperationAsync(request, GetCurrentUser());
        return Ok(result);
    }
    
    [HttpGet("search/advanced")]
    public async Task<ActionResult<List<ContactSummaryDto>>> AdvancedSearch(
        [FromBody] AdvancedSearchDto searchDto)
    {
        var results = await _contactService.AdvancedSearchAsync(searchDto);
        return Ok(results);
    }
    
    [HttpGet("duplicates")]
    public async Task<ActionResult<List<DuplicateGroupDto>>> FindDuplicates(
        [FromQuery] string? fields = "name,email")
    {
        var duplicates = await _contactService.FindDuplicatesAsync(fields);
        return Ok(duplicates);
    }
    
    [HttpGet("birthdays")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetBirthdays(
        [FromQuery] int? month = null,
        [FromQuery] int? day = null)
    {
        var contacts = await _contactService.GetBirthdaysAsync(month, day);
        return Ok(contacts);
    }
    
    [HttpGet("recently-contacted")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetRecentlyContacted(
        [FromQuery] int days = 30)
    {
        var contacts = await _contactService.GetRecentlyContactedAsync(days);
        return Ok(contacts);
    }
    
    [HttpGet("favorites")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetFavorites()
    {
        var contacts = await _contactService.GetFavoritesAsync();
        return Ok(contacts);
    }
    
    [HttpPost("{id}/favorite")]
    public async Task<IActionResult> ToggleFavorite(Guid id)
    {
        await _contactService.ToggleFavoriteAsync(id);
        return NoContent();
    }
    
    // Import/Export endpoints
    
    [HttpPost("import")]
    [RequestSizeLimit(10_485_760)] // 10MB limit
    public async Task<ActionResult<ImportResultDto>> ImportContacts(
        [FromForm] ImportRequestDto request)
    {
        var result = await _importExportService.ImportContactsAsync(
            request.File, 
            request.Format, 
            request.FieldMappings,
            GetCurrentUser());
        return Ok(result);
    }
    
    [HttpGet("export")]
    public async Task<IActionResult> ExportContacts([FromQuery] ExportRequestDto request)
    {
        var (fileContent, contentType, fileName) = 
            await _importExportService.ExportContactsAsync(request);
        
        return File(fileContent, contentType, fileName);
    }
    
    [HttpGet("export-template")]
    public IActionResult GetImportTemplate([FromQuery] string format = "csv")
    {
        var (fileContent, contentType, fileName) = 
            _importExportService.GetImportTemplate(format);
        
        return File(fileContent, contentType, fileName);
    }
    
    // Avatar handling
    
    [HttpPost("{id}/avatar")]
    [RequestSizeLimit(5_242_880)] // 5MB limit
    public async Task<ActionResult<string>> UploadAvatar(
        Guid id, 
        [FromForm] IFormFile file)
    {
        if (file.Length == 0)
            return BadRequest("File is empty");
        
        var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp" };
        if (!allowedTypes.Contains(file.ContentType))
            return BadRequest("Invalid file type");
        
        var avatarUrl = await _contactService.UploadAvatarAsync(id, file);
        if (avatarUrl == null)
            return NotFound();
        
        return Ok(new { avatarUrl });
    }
    
    [HttpDelete("{id}/avatar")]
    public async Task<IActionResult> DeleteAvatar(Guid id)
    {
        await _contactService.DeleteAvatarAsync(id);
        return NoContent();
    }
    
    [HttpGet("{id}/avatar")]
    public async Task<IActionResult> GetAvatar(Guid id)
    {
        var (data, contentType) = await _contactService.GetAvatarAsync(id);
        if (data == null)
            return NotFound();
        
        return File(data, contentType);
    }
    
    // Activity tracking
    
    [HttpGet("{id}/activities")]
    public async Task<ActionResult<List<ContactActivityDto>>> GetActivities(
        Guid id,
        [FromQuery] int? limit = null)
    {
        var activities = await _activityService.GetContactActivitiesAsync(id, limit);
        return Ok(activities);
    }
    
    [HttpPost("{id}/activities")]
    public async Task<ActionResult<ContactActivityDto>> CreateActivity(
        Guid id,
        CreateActivityDto dto)
    {
        dto = dto with { CreatedBy = GetCurrentUser() };
        var activity = await _activityService.CreateActivityAsync(id, dto);
        return Ok(activity);
    }
    
    [HttpPut("{id}/activities/{activityId}")]
    public async Task<ActionResult<ContactActivityDto>> UpdateActivity(
        Guid id,
        Guid activityId,
        UpdateActivityDto dto)
    {
        var activity = await _activityService.UpdateActivityAsync(activityId, dto);
        if (activity == null)
            return NotFound();
        return Ok(activity);
    }
    
    [HttpDelete("{id}/activities/{activityId}")]
    public async Task<IActionResult> DeleteActivity(Guid id, Guid activityId)
    {
        await _activityService.DeleteActivityAsync(activityId);
        return NoContent();
    }
    
    // Relationships
    
    [HttpGet("{id}/relationships")]
    public async Task<ActionResult<List<ContactRelationshipDto>>> GetRelationships(Guid id)
    {
        var relationships = await _contactService.GetRelationshipsAsync(id);
        return Ok(relationships);
    }
    
    [HttpPost("{id}/relationships")]
    public async Task<ActionResult<ContactRelationshipDto>> CreateRelationship(
        Guid id,
        CreateRelationshipDto dto)
    {
        var relationship = await _contactService.CreateRelationshipAsync(id, dto);
        return Ok(relationship);
    }
    
    [HttpDelete("{id}/relationships/{relationshipId}")]
    public async Task<IActionResult> DeleteRelationship(Guid id, Guid relationshipId)
    {
        await _contactService.DeleteRelationshipAsync(relationshipId);
        return NoContent();
    }
    
    private string GetCurrentUser()
    {
        // Get from auth context, for now return a default
        return _httpContextAccessor.HttpContext?.User?.Identity?.Name ?? "system";
    }
}
```

## Services Implementation

```csharp
// Application/Services/ContactService.cs
using Microsoft.EntityFrameworkCore;
using AutoMapper;

namespace ContactManager.Application.Services;

public interface IContactService
{
    Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter);
    Task<ContactDto?> GetContactByIdAsync(Guid id);
    Task<ContactDto> CreateContactAsync(CreateContactDto dto);
    Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto);
    Task<ContactDto?> PatchContactAsync(Guid id, JsonPatchDocument<UpdateContactDto> patchDoc, string user);
    Task DeleteContactAsync(Guid id);
    Task<List<ContactSummaryDto>> SearchContactsAsync(string query);
    Task<List<ContactSummaryDto>> AdvancedSearchAsync(AdvancedSearchDto searchDto);
    Task<List<DuplicateGroupDto>> FindDuplicatesAsync(string fields);
    Task<List<ContactSummaryDto>> GetBirthdaysAsync(int? month, int? day);
    Task<List<ContactSummaryDto>> GetRecentlyContactedAsync(int days);
    Task<List<ContactSummaryDto>> GetFavoritesAsync();
    Task ToggleFavoriteAsync(Guid id);
    Task<string?> UploadAvatarAsync(Guid id, IFormFile file);
    Task DeleteAvatarAsync(Guid id);
    Task<(byte[]? data, string contentType)> GetAvatarAsync(Guid id);
    Task<BulkOperationResultDto> BulkOperationAsync(
        BulkOperationRequestDto<CreateContactDto> request, string user);
    Task<List<ContactRelationshipDto>> GetRelationshipsAsync(Guid id);
    Task<ContactRelationshipDto> CreateRelationshipAsync(Guid id, CreateRelationshipDto dto);
    Task DeleteRelationshipAsync(Guid relationshipId);
}

public class ContactService : IContactService
{
    private readonly ApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly ILogger<ContactService> _logger;
    
    public ContactService(
        ApplicationDbContext context,
        IMapper mapper,
        ILogger<ContactService> logger)
    {
        _context = context;
        _mapper = mapper;
        _logger = logger;
    }
    
    public async Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter)
    {
        var query = _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .AsQueryable();
        
        // Apply filters
        if (!string.IsNullOrWhiteSpace(filter))
        {
            var filters = JsonSerializer.Deserialize<Dictionary<string, string>>(filter);
            if (filters != null)
            {
                foreach (var (key, value) in filters)
                {
                    query = key.ToLower() switch
                    {
                        "favorite" => query.Where(c => c.IsFavorite == bool.Parse(value)),
                        "company" => query.Where(c => c.Company != null && 
                            c.Company.Contains(value, StringComparison.OrdinalIgnoreCase)),
                        "group" => query.Where(c => c.ContactGroups.Any(cg => 
                            cg.GroupId == Guid.Parse(value))),
                        "tag" => query.Where(c => c.ContactTags.Any(ct => 
                            ct.TagId == Guid.Parse(value))),
                        _ => query
                    };
                }
            }
        }
        
        // Apply sorting
        query = sort?.ToLower() switch
        {
            "firstname" => query.OrderBy(c => c.FirstName),
            "lastname" => query.OrderBy(c => c.LastName),
            "company" => query.OrderBy(c => c.Company),
            "createdat" => query.OrderByDescending(c => c.CreatedAt),
            "lastcontacted" => query.OrderByDescending(c => c.LastContactedAt),
            _ => query.OrderBy(c => c.LastName).ThenBy(c => c.FirstName)
        };
        
        var totalCount = await query.CountAsync();
        
        var items = await query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .Select(c => new ContactSummaryDto
            {
                Id = c.Id,
                FirstName = c.FirstName,
                LastName = c.LastName,
                Company = c.Company,
                PrimaryEmail = c.EmailAddresses
                    .Where(e => e.IsPrimary)
                    .Select(e => e.Email)
                    .FirstOrDefault(),
                PrimaryPhone = c.PhoneNumbers
                    .Where(p => p.IsPrimary)
                    .Select(p => p.Number)
                    .FirstOrDefault(),
                IsFavorite = c.IsFavorite,
                Avatar = c.Avatar
            })
            .ToListAsync();
        
        return new PaginatedResultDto<ContactSummaryDto>
        {
            Items = items,
            PageNumber = pageNumber,
            PageSize = pageSize,
            TotalCount = totalCount,
            TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize),
            HasPreviousPage = pageNumber > 1,
            HasNextPage = pageNumber < (int)Math.Ceiling(totalCount / (double)pageSize)
        };
    }
    
    public async Task<ContactDto?> GetContactByIdAsync(Guid id)
    {
        var contact = await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.SocialProfiles)
            .Include(c => c.CustomFields)
            .Include(c => c.ContactGroups)
                .ThenInclude(cg => cg.Group)
            .Include(c => c.ContactTags)
                .ThenInclude(ct => ct.Tag)
            .FirstOrDefaultAsync(c => c.Id == id);
        
        if (contact == null)
            return null;
        
        return _mapper.Map<ContactDto>(contact);
    }
    
    public async Task<ContactDto> CreateContactAsync(CreateContactDto dto)
    {
        var contact = _mapper.Map<Contact>(dto);
        contact.Id = Guid.NewGuid();
        contact.CreatedAt = DateTime.UtcNow;
        contact.UpdatedAt = DateTime.UtcNow;
        contact.CreatedBy = dto.CreatedBy;
        
        // Handle many-to-many relationships
        foreach (var groupId in dto.GroupIds)
        {
            contact.ContactGroups.Add(new ContactGroup 
            { 
                ContactId = contact.Id, 
                GroupId = groupId 
            });
        }
        
        foreach (var tagId in dto.TagIds)
        {
            contact.ContactTags.Add(new ContactTag 
            { 
                ContactId = contact.Id, 
                TagId = tagId 
            });
        }
        
        _context.Contacts.Add(contact);
        await _context.SaveChangesAsync();
        
        return await GetContactByIdAsync(contact.Id) ?? throw new InvalidOperationException();
    }
    
    public async Task<string?> UploadAvatarAsync(Guid id, IFormFile file)
    {
        var contact = await _context.Contacts.FindAsync(id);
        if (contact == null)
            return null;
        
        using var memoryStream = new MemoryStream();
        await file.CopyToAsync(memoryStream);
        
        // Store the image data in the database
        contact.AvatarData = memoryStream.ToArray();
        contact.AvatarContentType = file.ContentType;
        contact.Avatar = $"/api/contacts/{id}/avatar"; // URL to retrieve the avatar
        contact.UpdatedAt = DateTime.UtcNow;
        
        await _context.SaveChangesAsync();
        
        return contact.Avatar;
    }
    
    public async Task<(byte[]? data, string contentType)> GetAvatarAsync(Guid id)
    {
        var contact = await _context.Contacts
            .Select(c => new { c.Id, c.AvatarData, c.AvatarContentType })
            .FirstOrDefaultAsync(c => c.Id == id);
        
        if (contact?.AvatarData == null)
            return (null, "");
        
        return (contact.AvatarData, contact.AvatarContentType ?? "image/jpeg");
    }
    
    public async Task<List<DuplicateGroupDto>> FindDuplicatesAsync(string fields)
    {
        var fieldList = fields.Split(',').Select(f => f.Trim().ToLower()).ToList();
        var duplicates = new List<DuplicateGroupDto>();
        
        if (fieldList.Contains("name"))
        {
            var nameGroups = await _context.Contacts
                .GroupBy(c => new { c.FirstName, c.LastName })
                .Where(g => g.Count() > 1)
                .Select(g => new DuplicateGroupDto
                {
                    Field = "Name",
                    Value = $"{g.Key.FirstName} {g.Key.LastName}",
                    Count = g.Count(),
                    ContactIds = g.Select(c => c.Id).ToList()
                })
                .ToListAsync();
            
            duplicates.AddRange(nameGroups);
        }
        
        if (fieldList.Contains("email"))
        {
            var emailGroups = await _context.EmailAddresses
                .GroupBy(e => e.Email.ToLower())
                .Where(g => g.Count() > 1)
                .Select(g => new DuplicateGroupDto
                {
                    Field = "Email",
                    Value = g.Key,
                    Count = g.Count(),
                    ContactIds = g.Select(e => e.ContactId).Distinct().ToList()
                })
                .ToListAsync();
            
            duplicates.AddRange(emailGroups);
        }
        
        return duplicates;
    }
    
    // Additional service methods implementation...
}
```

## Import/Export Service

```csharp
// Application/Services/ImportExportService.cs
using CsvHelper;
using ClosedXML.Excel;
using System.Text.Json;

namespace ContactManager.Application.Services;

public interface IImportExportService
{
    Task<ImportResultDto> ImportContactsAsync(
        IFormFile file, string format, Dictionary<string, string>? fieldMappings, string user);
    Task<(byte[] content, string contentType, string fileName)> ExportContactsAsync(
        ExportRequestDto request);
    (byte[] content, string contentType, string fileName) GetImportTemplate(string format);
}

public class ImportExportService : IImportExportService
{
    private readonly ApplicationDbContext _context;
    private readonly IContactService _contactService;
    private readonly ILogger<ImportExportService> _logger;
    
    public async Task<ImportResultDto> ImportContactsAsync(
        IFormFile file, string format, Dictionary<string, string>? fieldMappings, string user)
    {
        var startTime = DateTime.UtcNow;
        var errors = new List<ImportError>();
        var successCount = 0;
        var totalRecords = 0;
        
        try
        {
            var contacts = format.ToLower() switch
            {
                "csv" => await ParseCsvFile(file, fieldMappings),
                "excel" => await ParseExcelFile(file, fieldMappings),
                "json" => await ParseJsonFile(file),
                "vcard" => await ParseVCardFile(file),
                _ => throw new NotSupportedException($"Format {format} is not supported")
            };
            
            totalRecords = contacts.Count;
            
            foreach (var (contact, index) in contacts.Select((c, i) => (c, i)))
            {
                try
                {
                    contact.CreatedBy = user;
                    await _contactService.CreateContactAsync(contact);
                    successCount++;
                }
                catch (Exception ex)
                {
                    errors.Add(new ImportError
                    {
                        Row = index + 2, // +2 for header and 0-based index
                        Field = "General",
                        Value = $"{contact.FirstName} {contact.LastName}",
                        Error = ex.Message
                    });
                }
            }
            
            // Save import history
            var history = new ImportHistory
            {
                Id = Guid.NewGuid(),
                FileName = file.FileName,
                FileFormat = format,
                TotalRecords = totalRecords,
                SuccessCount = successCount,
                FailedCount = errors.Count,
                ErrorDetails = errors.Any() ? JsonSerializer.Serialize(errors) : null,
                ImportedAt = DateTime.UtcNow,
                ImportedBy = user,
                Duration = DateTime.UtcNow - startTime
            };
            
            _context.ImportHistory.Add(history);
            await _context.SaveChangesAsync();
            
            return new ImportResultDto
            {
                Success = successCount,
                Failed = errors.Count,
                Errors = errors
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to import contacts from {FileName}", file.FileName);
            throw;
        }
    }
    
    private async Task<List<CreateContactDto>> ParseCsvFile(
        IFormFile file, Dictionary<string, string>? fieldMappings)
    {
        var contacts = new List<CreateContactDto>();
        
        using var reader = new StreamReader(file.OpenReadStream());
        using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        
        // Auto-detect delimiter
        csv.Configuration.Delimiter = DetectDelimiter(await reader.ReadLineAsync() ?? ",");
        reader.BaseStream.Position = 0;
        reader.DiscardBufferedData();
        
        var records = csv.GetRecords<dynamic>().ToList();
        
        foreach (var record in records)
        {
            var dict = record as IDictionary<string, object>;
            if (dict == null) continue;
            
            var contact = new CreateContactDto
            {
                FirstName = GetMappedValue(dict, fieldMappings, "FirstName", "first_name", "fname"),
                LastName = GetMappedValue(dict, fieldMappings, "LastName", "last_name", "lname"),
                MiddleName = GetMappedValue(dict, fieldMappings, "MiddleName", "middle_name"),
                Company = GetMappedValue(dict, fieldMappings, "Company", "company", "organization"),
                JobTitle = GetMappedValue(dict, fieldMappings, "JobTitle", "job_title", "title"),
                Notes = GetMappedValue(dict, fieldMappings, "Notes", "notes", "comments"),
                EmailAddresses = new List<CreateEmailAddressDto>(),
                PhoneNumbers = new List<CreatePhoneNumberDto>(),
                Addresses = new List<CreateAddressDto>()
            };
            
            // Parse email
            var email = GetMappedValue(dict, fieldMappings, "Email", "email", "email_address");
            if (!string.IsNullOrWhiteSpace(email))
            {
                contact.EmailAddresses.Add(new CreateEmailAddressDto
                {
                    Email = email,
                    Type = "Personal",
                    IsPrimary = true
                });
            }
            
            // Parse phone
            var phone = GetMappedValue(dict, fieldMappings, "Phone", "phone", "phone_number");
            if (!string.IsNullOrWhiteSpace(phone))
            {
                contact.PhoneNumbers.Add(new CreatePhoneNumberDto
                {
                    Number = phone,
                    Type = "Mobile",
                    IsPrimary = true
                });
            }
            
            contacts.Add(contact);
        }
        
        return contacts;
    }
    
    private async Task<List<CreateContactDto>> ParseExcelFile(
        IFormFile file, Dictionary<string, string>? fieldMappings)
    {
        var contacts = new List<CreateContactDto>();
        
        using var stream = file.OpenReadStream();
        using var workbook = new XLWorkbook(stream);
        
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RowsUsed().Skip(1); // Skip header
        
        foreach (var row in rows)
        {
            var contact = new CreateContactDto
            {
                FirstName = row.Cell(1).GetValue<string>(),
                LastName = row.Cell(2).GetValue<string>(),
                MiddleName = row.Cell(3).GetValue<string>(),
                Company = row.Cell(4).GetValue<string>(),
                JobTitle = row.Cell(5).GetValue<string>(),
                EmailAddresses = new List<CreateEmailAddressDto>(),
                PhoneNumbers = new List<CreatePhoneNumberDto>(),
                Addresses = new List<CreateAddressDto>()
            };
            
            var email = row.Cell(6).GetValue<string>();
            if (!string.IsNullOrWhiteSpace(email))
            {
                contact.EmailAddresses.Add(new CreateEmailAddressDto
                {
                    Email = email,
                    Type = "Personal",
                    IsPrimary = true
                });
            }
            
            var phone = row.Cell(7).GetValue<string>();
            if (!string.IsNullOrWhiteSpace(phone))
            {
                contact.PhoneNumbers.Add(new CreatePhoneNumberDto
                {
                    Number = phone,
                    Type = "Mobile",
                    IsPrimary = true
                });
            }
            
            contacts.Add(contact);
        }
        
        return contacts;
    }
    
    public async Task<(byte[] content, string contentType, string fileName)> ExportContactsAsync(
        ExportRequestDto request)
    {
        var query = _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .AsQueryable();
        
        if (request.ContactIds?.Any() == true)
        {
            query = query.Where(c => request.ContactIds.Contains(c.Id));
        }
        
        var contacts = await query.ToListAsync();
        
        return request.Format.ToLower() switch
        {
            "csv" => ExportToCsv(contacts, request),
            "excel" => ExportToExcel(contacts, request),
            "json" => ExportToJson(contacts, request),
            "vcard" => ExportToVCard(contacts, request),
            _ => throw new NotSupportedException($"Format {request.Format} is not supported")
        };
    }
    
    private (byte[] content, string contentType, string fileName) ExportToCsv(
        List<Contact> contacts, ExportRequestDto request)
    {
        using var memoryStream = new MemoryStream();
        using var writer = new StreamWriter(memoryStream);
        using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        
        var records = contacts.Select(c => new
        {
            c.FirstName,
            c.LastName,
            c.MiddleName,
            c.Company,
            c.JobTitle,
            Email = c.EmailAddresses.FirstOrDefault(e => e.IsPrimary)?.Email,
            Phone = c.PhoneNumbers.FirstOrDefault(p => p.IsPrimary)?.Number,
            Address = c.Addresses.FirstOrDefault(a => a.IsPrimary)?.ToString(),
            Groups = request.IncludeGroups ? 
                string.Join(", ", c.ContactGroups.Select(cg => cg.Group.Name)) : null,
            Tags = request.IncludeTags ? 
                string.Join(", ", c.ContactTags.Select(ct => ct.Tag.Name)) : null
        });
        
        csv.WriteRecords(records);
        writer.Flush();
        
        return (
            memoryStream.ToArray(),
            "text/csv",
            $"contacts_{DateTime.UtcNow:yyyyMMddHHmmss}.csv"
        );
    }
    
    private string GetMappedValue(
        IDictionary<string, object> dict, 
        Dictionary<string, string>? fieldMappings,
        params string[] possibleKeys)
    {
        // Check field mappings first
        if (fieldMappings != null)
        {
            foreach (var key in possibleKeys)
            {
                if (fieldMappings.TryGetValue(key, out var mappedKey) &&
                    dict.TryGetValue(mappedKey, out var value))
                {
                    return value?.ToString() ?? string.Empty;
                }
            }
        }
        
        // Check default keys
        foreach (var key in possibleKeys)
        {
            if (dict.TryGetValue(key, out var value))
            {
                return value?.ToString() ?? string.Empty;
            }
            
            // Case-insensitive search
            var matchingKey = dict.Keys.FirstOrDefault(k => 
                string.Equals(k, key, StringComparison.OrdinalIgnoreCase));
            
            if (matchingKey != null && dict.TryGetValue(matchingKey, out value))
            {
                return value?.ToString() ?? string.Empty;
            }
        }
        
        return string.Empty;
    }
    
    private string DetectDelimiter(string firstLine)
    {
        var delimiters = new[] { ",", ";", "\t", "|" };
        var counts = delimiters.Select(d => new 
        { 
            Delimiter = d, 
            Count = firstLine.Count(c => c.ToString() == d) 
        });
        
        return counts.OrderByDescending(c => c.Count).First().Delimiter;
    }
}
```

## WebSocket Support for Real-time Updates

```csharp
// API/Hubs/ContactHub.cs
using Microsoft.AspNetCore.SignalR;

namespace ContactManager.API.Hubs;

public interface IContactClient
{
    Task ContactCreated(ContactDto contact);
    Task ContactUpdated(ContactDto contact);
    Task ContactDeleted(Guid contactId);
    Task ContactsImported(ImportResultDto result);
}

public class ContactHub : Hub<IContactClient>
{
    private readonly ILogger<ContactHub> _logger;
    
    public ContactHub(ILogger<ContactHub> logger)
    {
        _logger = logger;
    }
    
    public override async Task OnConnectedAsync()
    {
        _logger.LogInformation("Client connected: {ConnectionId}", Context.ConnectionId);
        await base.OnConnectedAsync();
    }
    
    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        _logger.LogInformation("Client disconnected: {ConnectionId}", Context.ConnectionId);
        await base.OnDisconnectedAsync(exception);
    }
    
    public async Task JoinGroup(string groupName)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, groupName);
        _logger.LogInformation("Client {ConnectionId} joined group {GroupName}", 
            Context.ConnectionId, groupName);
    }
    
    public async Task LeaveGroup(string groupName)
    {
        await Groups.RemoveFromGroupAsync(Context.ConnectionId, groupName);
        _logger.LogInformation("Client {ConnectionId} left group {GroupName}", 
            Context.ConnectionId, groupName);
    }
}

// Integration in ContactService
public class ContactService : IContactService
{
    private readonly IHubContext<ContactHub, IContactClient> _hubContext;
    
    public async Task<ContactDto> CreateContactAsync(CreateContactDto dto)
    {
        // ... existing create logic ...
        
        var createdContact = await GetContactByIdAsync(contact.Id);
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactCreated(createdContact);
        
        return createdContact;
    }
    
    public async Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto)
    {
        // ... existing update logic ...
        
        var updatedContact = await GetContactByIdAsync(id);
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactUpdated(updatedContact);
        
        return updatedContact;
    }
    
    public async Task DeleteContactAsync(Guid id)
    {
        // ... existing delete logic ...
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactDeleted(id);
    }
}
```

## Application DbContext

```csharp
// Infrastructure/Data/ApplicationDbContext.cs
using Microsoft.EntityFrameworkCore;
using ContactManager.Domain.Entities;

namespace ContactManager.Infrastructure.Data;

public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }
    
    public DbSet<Contact> Contacts => Set<Contact>();
    public DbSet<EmailAddress> EmailAddresses => Set<EmailAddress>();
    public DbSet<PhoneNumber> PhoneNumbers => Set<PhoneNumber>();
    public DbSet<Address> Addresses => Set<Address>();
    public DbSet<SocialProfile> SocialProfiles => Set<SocialProfile>();
    public DbSet<CustomField> CustomFields => Set<CustomField>();
    public DbSet<ContactActivity> ContactActivities => Set<ContactActivity>();
    public DbSet<ContactRelationship> ContactRelationships => Set<ContactRelationship>();
    public DbSet<Group> Groups => Set<Group>();
    public DbSet<Tag> Tags => Set<Tag>();
    public DbSet<ContactGroup> ContactGroups => Set<ContactGroup>();
    public DbSet<ContactTag> ContactTags => Set<ContactTag>();
    public DbSet<ImportHistory> ImportHistory => Set<ImportHistory>();
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        
        // Contact configuration
        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.FirstName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.LastName).IsRequired().HasMaxLength(100);
            entity.HasIndex(e => e.IsFavorite);
            entity.HasIndex(e => e.LastContactedAt);
            entity.HasIndex(e => new { e.FirstName, e.LastName });
            
            // Set default values
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.IsFavorite).HasDefaultValue(false);
        });
        
        // Email configuration
        modelBuilder.Entity<EmailAddress>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Email).IsRequired().HasMaxLength(255);
            entity.HasIndex(e => e.Email);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.EmailAddresses)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Phone configuration
        modelBuilder.Entity<PhoneNumber>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Number).IsRequired().HasMaxLength(50);
            entity.HasIndex(e => e.Number);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.PhoneNumbers)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Address configuration
        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.StreetLine1).IsRequired().HasMaxLength(200);
            entity.Property(e => e.City).IsRequired().HasMaxLength(100);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.Addresses)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Social Profile configuration
        modelBuilder.Entity<SocialProfile>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Platform).IsRequired().HasMaxLength(50);
            entity.Property(e => e.Url).IsRequired().HasMaxLength(500);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.SocialProfiles)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Custom Field configuration
        modelBuilder.Entity<CustomField>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.FieldName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.FieldType).IsRequired().HasMaxLength(20);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.CustomFields)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Activity configuration
        modelBuilder.Entity<ContactActivity>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.ActivityType).IsRequired().HasMaxLength(50);
            entity.Property(e => e.Subject).IsRequired().HasMaxLength(200);
            entity.HasIndex(e => e.ActivityDate);
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.Activities)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Relationship configuration
        modelBuilder.Entity<ContactRelationship>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.RelationshipType).IsRequired().HasMaxLength(50);
            
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.Relationships)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Restrict);
                
            entity.HasOne(e => e.RelatedContact)
                .WithMany(c => c.RelatedContacts)
                .HasForeignKey(e => e.RelatedContactId)
                .OnDelete(DeleteBehavior.Restrict);
        });
        
        // Group configuration
        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
            entity.HasIndex(e => e.Name).IsUnique();
        });
        
        // Tag configuration
        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Name).IsRequired().HasMaxLength(50);
            entity.Property(e => e.ColorHex).IsRequired().HasMaxLength(7);
            entity.HasIndex(e => e.Name).IsUnique();
        });
        
        // Many-to-many: Contact-Group
        modelBuilder.Entity<ContactGroup>(entity =>
        {
            entity.HasKey(e => new { e.ContactId, e.GroupId });
            
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.ContactGroups)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
                
            entity.HasOne(e => e.Group)
                .WithMany(g => g.ContactGroups)
                .HasForeignKey(e => e.GroupId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Many-to-many: Contact-Tag
        modelBuilder.Entity<ContactTag>(entity =>
        {
            entity.HasKey(e => new { e.ContactId, e.TagId });
            
            entity.HasOne(e => e.Contact)
                .WithMany(c => c.ContactTags)
                .HasForeignKey(e => e.ContactId)
                .OnDelete(DeleteBehavior.Cascade);
                
            entity.HasOne(e => e.Tag)
                .WithMany(t => t.ContactTags)
                .HasForeignKey(e => e.TagId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        // Import History configuration
        modelBuilder.Entity<ImportHistory>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.FileName).IsRequired().HasMaxLength(255);
            entity.Property(e => e.FileFormat).IsRequired().HasMaxLength(50);
            entity.HasIndex(e => e.ImportedAt);
        });
    }
    
    public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        UpdateTimestamps();
        return base.SaveChangesAsync(cancellationToken);
    }
    
    private void UpdateTimestamps()
    {
        var entries = ChangeTracker.Entries()
            .Where(e => e.Entity is Contact && 
                       (e.State == EntityState.Added || e.State == EntityState.Modified));
        
        foreach (var entry in entries)
        {
            var contact = (Contact)entry.Entity;
            
            if (entry.State == EntityState.Added)
            {
                contact.CreatedAt = DateTime.UtcNow;
            }
            
            contact.UpdatedAt = DateTime.UtcNow;
        }
    }
}
```

## AutoMapper Profiles

```csharp
// Application/Mappings/ContactMappingProfile.cs
using AutoMapper;
using ContactManager.Domain.Entities;
using ContactManager.Application.DTOs;

namespace ContactManager.Application.Mappings;

public class ContactMappingProfile : Profile
{
    public ContactMappingProfile()
    {
        // Contact mappings
        CreateMap<Contact, ContactDto>()
            .ForMember(dest => dest.Groups, opt => opt.MapFrom(src => 
                src.ContactGroups.Select(cg => cg.Group)))
            .ForMember(dest => dest.Tags, opt => opt.MapFrom(src => 
                src.ContactTags.Select(ct => ct.Tag)));
                
        CreateMap<CreateContactDto, Contact>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.ContactGroups, opt => opt.Ignore())
            .ForMember(dest => dest.ContactTags, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());
            
        CreateMap<UpdateContactDto, Contact>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.ContactGroups, opt => opt.Ignore())
            .ForMember(dest => dest.ContactTags, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());
        
        // Email mappings
        CreateMap<EmailAddress, EmailAddressDto>();
        CreateMap<CreateEmailAddressDto, EmailAddress>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Phone mappings
        CreateMap<PhoneNumber, PhoneNumberDto>();
        CreateMap<CreatePhoneNumberDto, PhoneNumber>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Address mappings
        CreateMap<Address, AddressDto>();
        CreateMap<CreateAddressDto, Address>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Social Profile mappings
        CreateMap<SocialProfile, SocialProfileDto>();
        CreateMap<CreateSocialProfileDto, SocialProfile>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Custom Field mappings
        CreateMap<CustomField, CustomFieldDto>();
        CreateMap<CreateCustomFieldDto, CustomField>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Activity mappings
        CreateMap<ContactActivity, ContactActivityDto>();
        CreateMap<CreateActivityDto, ContactActivity>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Group mappings
        CreateMap<Group, GroupDto>();
        CreateMap<CreateGroupDto, Group>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
        
        // Tag mappings
        CreateMap<Tag, TagDto>();
        CreateMap<CreateTagDto, Tag>()
            .ForMember(dest => dest.Id, opt => opt.Ignore());
    }
}
```

## Program.cs Configuration

```csharp
// Program.cs
using ContactManager.API.Hubs;
using ContactManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

// Configure Serilog
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .WriteTo.Console()
    .WriteTo.File("logs/log-.txt", rollingInterval: RollingInterval.Day)
    .CreateLogger();

builder.Host.UseSerilog();

// Add services
builder.Services.AddControllers()
    .AddNewtonsoftJson(); // For JSON Patch support

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo 
    { 
        Title = "Contact Manager API", 
        Version = "v1",
        Description = "Enhanced Contact Management System API"
    });
});

// Configure PostgreSQL
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"),
        npgsqlOptions =>
        {
            npgsqlOptions.EnableRetryOnFailure(3);
            npgsqlOptions.CommandTimeout(30);
        }));

// Add AutoMapper
builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

// Register services
builder.Services.AddScoped<IContactService, ContactService>();
builder.Services.AddScoped<IGroupService, GroupService>();
builder.Services.AddScoped<ITagService, TagService>();
builder.Services.AddScoped<IImportExportService, ImportExportService>();
builder.Services.AddScoped<IActivityService, ActivityService>();

// Add SignalR for real-time updates
builder.Services.AddSignalR(options =>
{
    options.EnableDetailedErrors = builder.Environment.IsDevelopment();
    options.MaximumReceiveMessageSize = 102400; // 100KB
});

// Add CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAngularApp",
        policy =>
        {
            policy.WithOrigins(
                    "http://localhost:4200",
                    "https://localhost:4200")
                .AllowAnyHeader()
                .AllowAnyMethod()
                .AllowCredentials(); // Required for SignalR
        });
});

// Add response compression
builder.Services.AddResponseCompression(options =>
{
    options.EnableForHttps = true;
});

// Add health checks
builder.Services.AddHealthChecks()
    .AddDbContextCheck<ApplicationDbContext>("database")
    .AddCheck("ready", () => HealthCheckResult.Healthy("Application is ready"));

// Add HTTP context accessor
builder.Services.AddHttpContextAccessor();

// Configure request size limits
builder.Services.Configure<FormOptions>(options =>
{
    options.MultipartBodyLengthLimit = 10485760; // 10MB
});

var app = builder.Build();

// Apply migrations automatically
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    await dbContext.Database.MigrateAsync();
}

// Configure middleware pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors("AllowAngularApp");
app.UseResponseCompression();

// Health check endpoints
app.MapHealthChecks("/api/health", new HealthCheckOptions
{
    ResponseWriter = async (context, report) =>
    {
        context.Response.ContentType = "application/json";
        var response = new
        {
            status = report.Status.ToString(),
            timestamp = DateTime.UtcNow,
            service = "Contact Manager API",
            checks = report.Entries.Select(e => new
            {
                name = e.Key,
                status = e.Value.Status.ToString(),
                description = e.Value.Description,
                duration = e.Value.Duration.TotalMilliseconds
            })
        };
        await context.Response.WriteAsync(JsonSerializer.Serialize(response));
    }
});

app.MapHealthChecks("/api/health/ready", new HealthCheckOptions
{
    Predicate = check => check.Name == "ready",
    ResponseWriter = async (context, report) =>
    {
        context.Response.ContentType = "application/json";
        var response = new
        {
            status = report.Status.ToString(),
            timestamp = DateTime.UtcNow
        };
        await context.Response.WriteAsync(JsonSerializer.Serialize(response));
    }
});

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();
app.MapHub<ContactHub>("/hubs/contacts");

app.Run();
```
















































































I see we are using `async` but we don't forward cancellation tokens. Is this not required anymore? Also what is the most basic way to add authentication? This is a simple app to be used by a single person. 

You're absolutely right! Forwarding cancellation tokens is still a best practice in .NET 9. Let me update the implementation with proper cancellation token usage and add a simple authentication solution.Perfect! I've created a comprehensive guide addressing both of your concerns:

## 1. **Cancellation Tokens** - You're absolutely right!

Forwarding cancellation tokens is still a best practice in .NET 9. I've updated all the code to properly use them:

- **Every async method** now accepts `CancellationToken cancellationToken = default`
- **Controllers automatically receive tokens** from ASP.NET Core
- **All async operations** (database queries, file I/O) forward the token
- **Default parameter values** maintain backward compatibility

Key benefits:
- Proper request cancellation when clients disconnect
- Better resource management
- Prevents unnecessary work when requests are cancelled
- Essential for production applications

## 2. **Simple Authentication Options**

For a single-user application, I've provided three options:

### **Option A: API Key (Recommended for your use case)**
```csharp
// Just add a header to all requests
X-API-Key: your-secret-key
```
- âœ… **Simplest to implement**
- âœ… No login UI needed
- âœ… Configure once and forget
- âœ… Works with HTTP test files easily

### **Option B: Basic Authentication**
```csharp
// Standard HTTP Basic Auth
Authorization: Basic base64(username:password)
```
- âœ… Built into browsers
- âœ… Simple configuration
- âš ï¸ Credentials sent with every request

### **Option C: JWT Token**
```csharp
// Login once, use token
POST /api/auth/login â†’ Get token
Authorization: Bearer {token}
```
- âœ… Most secure and flexible
- âœ… Tokens can expire
- âš ï¸ Requires login UI

## **My Recommendation**

For your single-person use case, **go with API Key authentication**:

1. **Set it in appsettings.json**:
```json
{
  "Auth": {
    "ApiKey": "generate-a-long-random-string-here"
  }
}
```

2. **It's automatically required on all endpoints**
3. **Store the key in your Angular app's environment file**
4. **Use HTTPS in production**

The implementation I provided:
- Uses proper async/await patterns with cancellation
- Includes authentication without over-engineering
- Maintains clean, testable code
- Follows .NET 9 best practices

Would you like me to elaborate on any specific part or help you implement a particular authentication method?
























# Enhanced .NET 9 Implementation with Cancellation Tokens and Simple Authentication

## 1. Proper Cancellation Token Usage

### Updated Service Interface with Cancellation Tokens

```csharp
// Application/Services/IContactService.cs
namespace ContactManager.Application.Services;

public interface IContactService
{
    Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter, CancellationToken cancellationToken = default);
    Task<ContactDto?> GetContactByIdAsync(Guid id, CancellationToken cancellationToken = default);
    Task<ContactDto> CreateContactAsync(CreateContactDto dto, CancellationToken cancellationToken = default);
    Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default);
    Task<ContactDto?> PatchContactAsync(Guid id, JsonPatchDocument<UpdateContactDto> patchDoc, string user, CancellationToken cancellationToken = default);
    Task DeleteContactAsync(Guid id, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> SearchContactsAsync(string query, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> AdvancedSearchAsync(AdvancedSearchDto searchDto, CancellationToken cancellationToken = default);
    Task<List<DuplicateGroupDto>> FindDuplicatesAsync(string fields, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetBirthdaysAsync(int? month, int? day, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetRecentlyContactedAsync(int days, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetFavoritesAsync(CancellationToken cancellationToken = default);
    Task ToggleFavoriteAsync(Guid id, CancellationToken cancellationToken = default);
    Task<string?> UploadAvatarAsync(Guid id, IFormFile file, CancellationToken cancellationToken = default);
    Task DeleteAvatarAsync(Guid id, CancellationToken cancellationToken = default);
    Task<(byte[]? data, string contentType)> GetAvatarAsync(Guid id, CancellationToken cancellationToken = default);
    Task<BulkOperationResultDto> BulkOperationAsync(
        BulkOperationRequestDto<CreateContactDto> request, string user, CancellationToken cancellationToken = default);
}
```

### Updated Service Implementation with Cancellation Tokens

```csharp
// Application/Services/ContactService.cs
public class ContactService : IContactService
{
    private readonly ApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly ILogger<ContactService> _logger;
    private readonly IHubContext<ContactHub, IContactClient> _hubContext;
    
    public ContactService(
        ApplicationDbContext context,
        IMapper mapper,
        ILogger<ContactService> logger,
        IHubContext<ContactHub, IContactClient> hubContext)
    {
        _context = context;
        _mapper = mapper;
        _logger = logger;
        _hubContext = hubContext;
    }
    
    public async Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedContactsAsync(
        int pageNumber, int pageSize, string? sort, string? filter, CancellationToken cancellationToken = default)
    {
        var query = _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .AsNoTracking() // Better performance for read-only queries
            .AsQueryable();
        
        // Apply filters
        if (!string.IsNullOrWhiteSpace(filter))
        {
            var filters = JsonSerializer.Deserialize<Dictionary<string, string>>(filter);
            if (filters != null)
            {
                query = ApplyFilters(query, filters);
            }
        }
        
        // Apply sorting
        query = ApplySorting(query, sort);
        
        var totalCount = await query.CountAsync(cancellationToken);
        
        var items = await query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .Select(c => new ContactSummaryDto
            {
                Id = c.Id,
                FirstName = c.FirstName,
                LastName = c.LastName,
                Company = c.Company,
                PrimaryEmail = c.EmailAddresses
                    .Where(e => e.IsPrimary)
                    .Select(e => e.Email)
                    .FirstOrDefault(),
                PrimaryPhone = c.PhoneNumbers
                    .Where(p => p.IsPrimary)
                    .Select(p => p.Number)
                    .FirstOrDefault(),
                IsFavorite = c.IsFavorite,
                Avatar = c.Avatar
            })
            .ToListAsync(cancellationToken);
        
        return new PaginatedResultDto<ContactSummaryDto>
        {
            Items = items,
            PageNumber = pageNumber,
            PageSize = pageSize,
            TotalCount = totalCount,
            TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize),
            HasPreviousPage = pageNumber > 1,
            HasNextPage = pageNumber < (int)Math.Ceiling(totalCount / (double)pageSize)
        };
    }
    
    public async Task<ContactDto?> GetContactByIdAsync(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.SocialProfiles)
            .Include(c => c.CustomFields)
            .Include(c => c.ContactGroups)
                .ThenInclude(cg => cg.Group)
            .Include(c => c.ContactTags)
                .ThenInclude(ct => ct.Tag)
            .AsNoTracking()
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken);
        
        if (contact == null)
            return null;
        
        return _mapper.Map<ContactDto>(contact);
    }
    
    public async Task<ContactDto> CreateContactAsync(CreateContactDto dto, CancellationToken cancellationToken = default)
    {
        var contact = _mapper.Map<Contact>(dto);
        contact.Id = Guid.NewGuid();
        contact.CreatedAt = DateTime.UtcNow;
        contact.UpdatedAt = DateTime.UtcNow;
        contact.CreatedBy = dto.CreatedBy;
        
        // Handle many-to-many relationships
        foreach (var groupId in dto.GroupIds)
        {
            contact.ContactGroups.Add(new ContactGroup 
            { 
                ContactId = contact.Id, 
                GroupId = groupId 
            });
        }
        
        foreach (var tagId in dto.TagIds)
        {
            contact.ContactTags.Add(new ContactTag 
            { 
                ContactId = contact.Id, 
                TagId = tagId 
            });
        }
        
        _context.Contacts.Add(contact);
        await _context.SaveChangesAsync(cancellationToken);
        
        var createdContact = await GetContactByIdAsync(contact.Id, cancellationToken) 
            ?? throw new InvalidOperationException("Failed to retrieve created contact");
        
        // Notify all connected clients
        await _hubContext.Clients.All.ContactCreated(createdContact);
        
        return createdContact;
    }
    
    public async Task<ContactDto?> UpdateContactAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.SocialProfiles)
            .Include(c => c.CustomFields)
            .FirstOrDefaultAsync(c => c.Id == id, cancellationToken);
        
        if (contact == null)
            return null;
        
        _mapper.Map(dto, contact);
        contact.UpdatedAt = DateTime.UtcNow;
        contact.UpdatedBy = dto.UpdatedBy;
        
        await _context.SaveChangesAsync(cancellationToken);
        
        var updatedContact = await GetContactByIdAsync(id, cancellationToken);
        
        if (updatedContact != null)
            await _hubContext.Clients.All.ContactUpdated(updatedContact);
        
        return updatedContact;
    }
    
    public async Task DeleteContactAsync(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts.FindAsync(new object[] { id }, cancellationToken);
        
        if (contact != null)
        {
            _context.Contacts.Remove(contact);
            await _context.SaveChangesAsync(cancellationToken);
            
            await _hubContext.Clients.All.ContactDeleted(id);
        }
    }
    
    public async Task<string?> UploadAvatarAsync(Guid id, IFormFile file, CancellationToken cancellationToken = default)
    {
        var contact = await _context.Contacts.FindAsync(new object[] { id }, cancellationToken);
        if (contact == null)
            return null;
        
        using var memoryStream = new MemoryStream();
        await file.CopyToAsync(memoryStream, cancellationToken);
        
        // Store the image data in the database
        contact.AvatarData = memoryStream.ToArray();
        contact.AvatarContentType = file.ContentType;
        contact.Avatar = $"/api/contacts/{id}/avatar";
        contact.UpdatedAt = DateTime.UtcNow;
        
        await _context.SaveChangesAsync(cancellationToken);
        
        return contact.Avatar;
    }
    
    // Helper methods
    private IQueryable<Contact> ApplyFilters(IQueryable<Contact> query, Dictionary<string, string> filters)
    {
        foreach (var (key, value) in filters)
        {
            query = key.ToLower() switch
            {
                "favorite" => query.Where(c => c.IsFavorite == bool.Parse(value)),
                "company" => query.Where(c => c.Company != null && 
                    c.Company.Contains(value, StringComparison.OrdinalIgnoreCase)),
                "group" => query.Where(c => c.ContactGroups.Any(cg => 
                    cg.GroupId == Guid.Parse(value))),
                "tag" => query.Where(c => c.ContactTags.Any(ct => 
                    ct.TagId == Guid.Parse(value))),
                _ => query
            };
        }
        return query;
    }
    
    private IQueryable<Contact> ApplySorting(IQueryable<Contact> query, string? sort)
    {
        return sort?.ToLower() switch
        {
            "firstname" => query.OrderBy(c => c.FirstName),
            "lastname" => query.OrderBy(c => c.LastName),
            "company" => query.OrderBy(c => c.Company),
            "createdat" => query.OrderByDescending(c => c.CreatedAt),
            "lastcontacted" => query.OrderByDescending(c => c.LastContactedAt),
            _ => query.OrderBy(c => c.LastName).ThenBy(c => c.FirstName)
        };
    }
}
```

### Updated Controller with Cancellation Tokens

```csharp
// API/Controllers/ContactsController.cs
[ApiController]
[Route("api/[controller]")]
[Authorize] // Requires authentication
public class ContactsController : ControllerBase
{
    private readonly IContactService _contactService;
    private readonly IImportExportService _importExportService;
    private readonly IActivityService _activityService;
    
    public ContactsController(
        IContactService contactService,
        IImportExportService importExportService,
        IActivityService activityService)
    {
        _contactService = contactService;
        _importExportService = importExportService;
        _activityService = activityService;
    }
    
    [HttpGet]
    public async Task<ActionResult<PaginatedResultDto<ContactSummaryDto>>> GetContacts(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20,
        [FromQuery] string? sort = "lastName",
        [FromQuery] string? filter = null,
        CancellationToken cancellationToken = default)
    {
        var result = await _contactService.GetPaginatedContactsAsync(
            pageNumber, pageSize, sort, filter, cancellationToken);
        return Ok(result);
    }
    
    [HttpGet("{id}")]
    public async Task<ActionResult<ContactDto>> GetContact(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.GetContactByIdAsync(id, cancellationToken);
        if (contact == null)
            return NotFound();
        
        // Update last viewed
        await _activityService.TrackContactViewAsync(id, GetCurrentUser(), cancellationToken);
        
        return Ok(contact);
    }
    
    [HttpPost]
    public async Task<ActionResult<ContactDto>> CreateContact(
        CreateContactDto dto, 
        CancellationToken cancellationToken = default)
    {
        dto = dto with { CreatedBy = GetCurrentUser() };
        var contact = await _contactService.CreateContactAsync(dto, cancellationToken);
        return CreatedAtAction(nameof(GetContact), new { id = contact.Id }, contact);
    }
    
    [HttpPut("{id}")]
    public async Task<ActionResult<ContactDto>> UpdateContact(
        Guid id, 
        UpdateContactDto dto,
        CancellationToken cancellationToken = default)
    {
        dto = dto with { UpdatedBy = GetCurrentUser() };
        var contact = await _contactService.UpdateContactAsync(id, dto, cancellationToken);
        if (contact == null)
            return NotFound();
        return Ok(contact);
    }
    
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteContact(Guid id, CancellationToken cancellationToken = default)
    {
        await _contactService.DeleteContactAsync(id, cancellationToken);
        return NoContent();
    }
    
    [HttpPost("{id}/avatar")]
    [RequestSizeLimit(5_242_880)] // 5MB limit
    public async Task<ActionResult<string>> UploadAvatar(
        Guid id, 
        [FromForm] IFormFile file,
        CancellationToken cancellationToken = default)
    {
        if (file.Length == 0)
            return BadRequest("File is empty");
        
        var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp" };
        if (!allowedTypes.Contains(file.ContentType))
            return BadRequest("Invalid file type");
        
        var avatarUrl = await _contactService.UploadAvatarAsync(id, file, cancellationToken);
        if (avatarUrl == null)
            return NotFound();
        
        return Ok(new { avatarUrl });
    }
    
    private string GetCurrentUser()
    {
        return User.Identity?.Name ?? "system";
    }
}
```

## 2. Simple Authentication for Single User

### Option A: API Key Authentication (Simplest)

```csharp
// Auth/ApiKeyAuthenticationHandler.cs
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Options;
using System.Security.Claims;
using System.Text.Encodings.Web;

namespace ContactManager.Auth;

public class ApiKeyAuthenticationHandler : AuthenticationHandler<ApiKeyAuthenticationOptions>
{
    private const string ApiKeyHeaderName = "X-API-Key";
    
    public ApiKeyAuthenticationHandler(
        IOptionsMonitor<ApiKeyAuthenticationOptions> options,
        ILoggerFactory logger,
        UrlEncoder encoder)
        : base(options, logger, encoder)
    {
    }
    
    protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        // Check if API key is in header
        if (!Request.Headers.TryGetValue(ApiKeyHeaderName, out var apiKeyHeader))
        {
            // Check if API key is in query string (for convenience)
            if (!Request.Query.TryGetValue("apiKey", out var apiKeyQuery))
            {
                return AuthenticateResult.Fail("API Key not found");
            }
            apiKeyHeader = apiKeyQuery;
        }
        
        var providedApiKey = apiKeyHeader.ToString();
        
        // Validate API key
        if (string.IsNullOrWhiteSpace(providedApiKey) || providedApiKey != Options.ApiKey)
        {
            return AuthenticateResult.Fail("Invalid API Key");
        }
        
        // Create claims
        var claims = new[]
        {
            new Claim(ClaimTypes.Name, "User"),
            new Claim(ClaimTypes.NameIdentifier, "single-user")
        };
        
        var identity = new ClaimsIdentity(claims, Scheme.Name);
        var principal = new ClaimsPrincipal(identity);
        var ticket = new AuthenticationTicket(principal, Scheme.Name);
        
        return AuthenticateResult.Success(ticket);
    }
}

public class ApiKeyAuthenticationOptions : AuthenticationSchemeOptions
{
    public string ApiKey { get; set; } = string.Empty;
}

// Extension method for easier registration
public static class ApiKeyAuthenticationExtensions
{
    public static AuthenticationBuilder AddApiKey(
        this AuthenticationBuilder builder,
        string apiKey)
    {
        return builder.AddScheme<ApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler>(
            "ApiKey",
            options => options.ApiKey = apiKey);
    }
}
```

### Option B: Basic Authentication (Username/Password)

```csharp
// Auth/BasicAuthenticationHandler.cs
using System.Net.Http.Headers;
using System.Text;

namespace ContactManager.Auth;

public class BasicAuthenticationHandler : AuthenticationHandler<BasicAuthenticationOptions>
{
    public BasicAuthenticationHandler(
        IOptionsMonitor<BasicAuthenticationOptions> options,
        ILoggerFactory logger,
        UrlEncoder encoder)
        : base(options, logger, encoder)
    {
    }
    
    protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        // Check for Authorization header
        if (!Request.Headers.ContainsKey("Authorization"))
        {
            return AuthenticateResult.Fail("Missing Authorization Header");
        }
        
        try
        {
            var authHeader = AuthenticationHeaderValue.Parse(Request.Headers["Authorization"]);
            
            if (authHeader.Scheme != "Basic")
            {
                return AuthenticateResult.Fail("Invalid Authentication Scheme");
            }
            
            var credentialBytes = Convert.FromBase64String(authHeader.Parameter ?? string.Empty);
            var credentials = Encoding.UTF8.GetString(credentialBytes).Split(':', 2);
            
            if (credentials.Length != 2)
            {
                return AuthenticateResult.Fail("Invalid Authorization Header");
            }
            
            var username = credentials[0];
            var password = credentials[1];
            
            // Validate credentials
            if (username != Options.Username || password != Options.Password)
            {
                return AuthenticateResult.Fail("Invalid Username or Password");
            }
            
            var claims = new[]
            {
                new Claim(ClaimTypes.Name, username),
                new Claim(ClaimTypes.NameIdentifier, username)
            };
            
            var identity = new ClaimsIdentity(claims, Scheme.Name);
            var principal = new ClaimsPrincipal(identity);
            var ticket = new AuthenticationTicket(principal, Scheme.Name);
            
            return AuthenticateResult.Success(ticket);
        }
        catch
        {
            return AuthenticateResult.Fail("Invalid Authorization Header");
        }
    }
    
    protected override Task HandleChallengeAsync(AuthenticationProperties properties)
    {
        Response.Headers["WWW-Authenticate"] = $"Basic realm=\"Contact Manager\"";
        return base.HandleChallengeAsync(properties);
    }
}

public class BasicAuthenticationOptions : AuthenticationSchemeOptions
{
    public string Username { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
}
```

### Option C: Simple JWT Token (Stateless)

```csharp
// Auth/SimpleJwtService.cs
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace ContactManager.Auth;

public interface ISimpleJwtService
{
    string GenerateToken(string username);
    ClaimsPrincipal? ValidateToken(string token);
}

public class SimpleJwtService : ISimpleJwtService
{
    private readonly IConfiguration _configuration;
    private readonly string _secretKey;
    private readonly string _issuer;
    private readonly string _audience;
    
    public SimpleJwtService(IConfiguration configuration)
    {
        _configuration = configuration;
        _secretKey = configuration["Jwt:SecretKey"] ?? throw new InvalidOperationException("JWT SecretKey not configured");
        _issuer = configuration["Jwt:Issuer"] ?? "ContactManager";
        _audience = configuration["Jwt:Audience"] ?? "ContactManagerUsers";
    }
    
    public string GenerateToken(string username)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_secretKey);
        
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[]
            {
                new Claim(ClaimTypes.Name, username),
                new Claim(ClaimTypes.NameIdentifier, username),
                new Claim("created", DateTime.UtcNow.ToString("o"))
            }),
            Expires = DateTime.UtcNow.AddDays(30), // Long-lived for single user
            Issuer = _issuer,
            Audience = _audience,
            SigningCredentials = new SigningCredentials(
                new SymmetricSecurityKey(key),
                SecurityAlgorithms.HmacSha256Signature)
        };
        
        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }
    
    public ClaimsPrincipal? ValidateToken(string token)
    {
        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);
            
            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = _issuer,
                ValidateAudience = true,
                ValidAudience = _audience,
                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero
            };
            
            var principal = tokenHandler.ValidateToken(token, validationParameters, out _);
            return principal;
        }
        catch
        {
            return null;
        }
    }
}

// Simple login controller
[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly IConfiguration _configuration;
    private readonly ISimpleJwtService _jwtService;
    
    public AuthController(IConfiguration configuration, ISimpleJwtService jwtService)
    {
        _configuration = configuration;
        _jwtService = jwtService;
    }
    
    [HttpPost("login")]
    public IActionResult Login([FromBody] LoginDto dto)
    {
        var configuredUsername = _configuration["Auth:Username"] ?? "admin";
        var configuredPassword = _configuration["Auth:Password"] ?? "password";
        
        if (dto.Username != configuredUsername || dto.Password != configuredPassword)
        {
            return Unauthorized(new { message = "Invalid credentials" });
        }
        
        var token = _jwtService.GenerateToken(dto.Username);
        
        return Ok(new
        {
            token,
            expiresIn = 2592000, // 30 days in seconds
            username = dto.Username
        });
    }
}

public record LoginDto(string Username, string Password);
```

## 3. Program.cs Configuration with Authentication

```csharp
// Program.cs
var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();

// Choose ONE authentication method:

// Option A: API Key Authentication (Simplest)
builder.Services.AddAuthentication("ApiKey")
    .AddApiKey(builder.Configuration["Auth:ApiKey"] ?? "your-secret-api-key-here");

// Option B: Basic Authentication
builder.Services.AddAuthentication("Basic")
    .AddScheme<BasicAuthenticationOptions, BasicAuthenticationHandler>("Basic", options =>
    {
        options.Username = builder.Configuration["Auth:Username"] ?? "admin";
        options.Password = builder.Configuration["Auth:Password"] ?? "password";
    });

// Option C: JWT Authentication
builder.Services.AddSingleton<ISimpleJwtService, SimpleJwtService>();
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        var key = Encoding.ASCII.GetBytes(
            builder.Configuration["Jwt:SecretKey"] ?? "your-256-bit-secret-key-here-minimum-32-characters");
        
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ValidateIssuer = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"] ?? "ContactManager",
            ValidateAudience = true,
            ValidAudience = builder.Configuration["Jwt:Audience"] ?? "ContactManagerUsers",
            ValidateLifetime = true,
            ClockSkew = TimeSpan.Zero
        };
        
        // Support token from query string for SignalR
        options.Events = new JwtBearerEvents
        {
            OnMessageReceived = context =>
            {
                var accessToken = context.Request.Query["access_token"];
                var path = context.HttpContext.Request.Path;
                
                if (!string.IsNullOrEmpty(accessToken) &&
                    path.StartsWithSegments("/hubs"))
                {
                    context.Token = accessToken;
                }
                
                return Task.CompletedTask;
            }
        };
    });

builder.Services.AddAuthorization();

// Configure CORS to include auth headers
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAngularApp",
        policy =>
        {
            policy.WithOrigins(
                    "http://localhost:4200",
                    "https://localhost:4200")
                .AllowAnyMethod()
                .AllowAnyHeader() // Allows Authorization header
                .AllowCredentials()
                .WithExposedHeaders("Content-Disposition"); // For file downloads
        });
});

// Rest of services...
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

// Middleware pipeline
app.UseHttpsRedirection();
app.UseCors("AllowAngularApp");

app.UseAuthentication(); // Must come before UseAuthorization
app.UseAuthorization();

// Optional: Allow anonymous access to health endpoints
app.MapHealthChecks("/api/health").AllowAnonymous();
app.MapHealthChecks("/api/health/ready").AllowAnonymous();

// Optional: Allow anonymous access to auth endpoint if using JWT
if (builder.Configuration["Auth:Method"] == "JWT")
{
    app.MapControllers()
        .RequireAuthorization() // Require auth by default
        .WithMetadata(new AllowAnonymousAttribute()); // Except where specified
}
else
{
    app.MapControllers().RequireAuthorization();
}

app.MapHub<ContactHub>("/hubs/contacts").RequireAuthorization();

app.Run();
```

## 4. Updated appsettings.json

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Database=ContactManager;Username=postgres;Password=yourpassword"
  },
  "Auth": {
    "Method": "ApiKey", // Options: "ApiKey", "Basic", "JWT"
    "ApiKey": "your-secret-api-key-change-this-in-production",
    "Username": "admin",
    "Password": "your-secure-password-here"
  },
  "Jwt": {
    "SecretKey": "your-256-bit-secret-key-here-minimum-32-characters-long",
    "Issuer": "ContactManager",
    "Audience": "ContactManagerUsers"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
```

## 5. Angular Integration Examples

### API Key Authentication in Angular

```typescript
// Angular service with API Key
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiKey = 'your-secret-api-key-change-this-in-production';
  private baseUrl = 'https://localhost:7034/api';
  
  private getHeaders(): HttpHeaders {
    return new HttpHeaders({
      'X-API-Key': this.apiKey,
      'Content-Type': 'application/json'
    });
  }
  
  getContacts() {
    return this.http.get(`${this.baseUrl}/contacts`, {
      headers: this.getHeaders()
    });
  }
}
```

### Basic Authentication in Angular

```typescript
// Angular service with Basic Auth
@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private username = 'admin';
  private password = 'password';
  private baseUrl = 'https://localhost:7034/api';
  
  private getHeaders(): HttpHeaders {
    const credentials = btoa(`${this.username}:${this.password}`);
    return new HttpHeaders({
      'Authorization': `Basic ${credentials}`,
      'Content-Type': 'application/json'
    });
  }
  
  getContacts() {
    return this.http.get(`${this.baseUrl}/contacts`, {
      headers: this.getHeaders()
    });
  }
}
```

### JWT Authentication in Angular

```typescript
// Angular service with JWT
@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private token = signal<string | null>(null);
  private baseUrl = 'https://localhost:7034/api';
  
  constructor(private http: HttpClient) {
    // Load token from localStorage on init
    const savedToken = localStorage.getItem('auth_token');
    if (savedToken) {
      this.token.set(savedToken);
    }
  }
  
  async login(username: string, password: string): Promise<boolean> {
    try {
      const response = await firstValueFrom(
        this.http.post<any>(`${this.baseUrl}/auth/login`, { username, password })
      );
      
      this.token.set(response.token);
      localStorage.setItem('auth_token', response.token);
      return true;
    } catch {
      return false;
    }
  }
  
  logout() {
    this.token.set(null);
    localStorage.removeItem('auth_token');
  }
  
  getAuthHeaders(): HttpHeaders {
    const token = this.token();
    return new HttpHeaders({
      'Authorization': token ? `Bearer ${token}` : '',
      'Content-Type': 'application/json'
    });
  }
}

// HTTP Interceptor for JWT
@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}
  
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = this.authService.token();
    
    if (token) {
      req = req.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
    }
    
    return next.handle(req);
  }
}
```

## 6. Updated HTTP Test File with Authentication

```http
# MyOpenTelemetryApi.http
@host = https://localhost:7034
@contentType = application/json

# For API Key auth
@apiKey = your-secret-api-key-change-this-in-production

# For Basic auth
@username = admin
@password = password

# For JWT auth - first login to get token
@token = {{login.response.body.token}}

################################################
# AUTH ENDPOINTS (if using JWT)
################################################

### Login (JWT only)
# @name login
POST {{host}}/api/auth/login
Content-Type: {{contentType}}

{
  "username": "{{username}}",
  "password": "{{password}}"
}

###

################################################
# HEALTH ENDPOINTS (No auth required)
################################################

### Health Check
GET {{host}}/api/health
Accept: {{contentType}}

###

################################################
# CONTACT ENDPOINTS (Auth required)
################################################

### Get Contacts with API Key
GET {{host}}/api/contacts
X-API-Key: {{apiKey}}
Accept: {{contentType}}

###

### Get Contacts with Basic Auth
GET {{host}}/api/contacts
Authorization: Basic {{$base64 username:password}}
Accept: {{contentType}}

###

### Get Contacts with JWT
GET {{host}}/api/contacts
Authorization: Bearer {{token}}
Accept: {{contentType}}

###

### Create Contact with API Key
POST {{host}}/api/contacts
X-API-Key: {{apiKey}}
Content-Type: {{contentType}}

{
  "firstName": "John",
  "lastName": "Doe",
  "emailAddresses": [
    {
      "email": "john@example.com",
      "type": "Personal",
      "isPrimary": true
    }
  ]
}

###
```

## Summary

### Cancellation Token Best Practices:
1. **Always forward cancellation tokens** through the entire call chain
2. **Use default parameter values** to maintain backward compatibility
3. **Pass tokens to all async operations** (database queries, HTTP calls, file I/O)
4. **Controllers automatically receive tokens** from ASP.NET Core

### Authentication Recommendations:

For a **single-user application**, I recommend:

1. **API Key (Simplest)**: 
   - âœ… No login UI needed
   - âœ… Easy to implement
   - âœ… Works with all clients
   - âš ï¸ Key must be kept secret
   - ðŸ“± Store key in environment variables

2. **Basic Auth (Simple but Standard)**:
   - âœ… Built into browsers
   - âœ… No token management
   - âš ï¸ Credentials sent with every request
   - ðŸ“± Use HTTPS always

3. **JWT (Most Flexible)**:
   - âœ… Stateless
   - âœ… Can expire and refresh
   - âœ… Industry standard
   - âš ï¸ Requires login UI
   - ðŸ“± Good for web apps

For your use case (single person), **API Key** is probably the best choice - simple, secure enough with HTTPS, and no login UI needed.


================================================================================
FILE: docs\llm.md
SIZE: 46.33 KB
MODIFIED: 10/06/2025 17:03:43
================================================================================

that's right the windows machine doesn't have docker but virginia the debian machine has docker err I mean podman same difference 
let us review this

kushal@virginia:~$
kushal@virginia:~$ podman ps -a
CONTAINER ID  IMAGE                                    COMMAND     CREATED     STATUS               PORTS                             NAMES
57c23e1715b2  docker.io/library/postgres:16-alpine     postgres    2 days ago  Up 2 days (healthy)  0.0.0.0:5432->5432/tcp            myotel-postgres
4c80486da197  localhost/myopentelemetryapi_api:latest              2 days ago  Up 2 days (healthy)  0.0.0.0:5174->8080/tcp, 8081/tcp  myotel-api
kushal@virginia:~$ cd ~/src/dotnet/MyOpenTelemetryApi/; time podman-compose down; git status; git remote show origin; git fetch; git status; git pull; git status; time podman-compose -f podman-compose.yml up --build -d
myotel-api
myotel-postgres
myotel-api
myotel-postgres
99aaed22f3e4cd58036f33263f4e3d48b261a168127bbb5b307aa11ca4582c3c
myopentelemetryapi_myotel-network

real    0m1.789s
user    0m0.833s
sys     0m0.413s
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
* remote origin
  Fetch URL: https://github.com/collabskus/MyOpenTelemetryApi
  Push  URL: https://github.com/collabskus/MyOpenTelemetryApi
  HEAD branch: main
  Remote branches:
    main                                                                                           tracked
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.16 stale (use 'git remote prune' to remove)
  Local branch configured for 'git pull':
    main merges with remote main
  Local ref configured for 'git push':
    main pushes to main (local out of date)
remote: Enumerating objects: 376, done.
remote: Counting objects: 100% (14/14), done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 376 (delta 7), reused 10 (delta 6), pack-reused 362 (from 2)
Receiving objects: 100% (376/376), 903.71 KiB | 4.11 MiB/s, done.
Resolving deltas: 100% (231/231), completed with 3 local objects.
From https://github.com/collabskus/MyOpenTelemetryApi
   4f11177..bd0ead8  main       -> origin/main
On branch main
Your branch is behind 'origin/main' by 95 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)

nothing to commit, working tree clean
Updating 4f11177..bd0ead8
Fast-forward
 .github/workflows/ci.yml                                                                     |    64 +-
 Directory.Build.props                                                                        |    16 +
 Directory.Build.targets                                                                      |    58 +
 Directory.Packages.props                                                                     |    59 +
 Dockerfile                                                                                   |    42 +-
 Dockerfile.migrations                                                                        |    14 +-
 docker-compose.yml                                                                           |    76 +-
 docs/Windows PowerShell.txt                                                                  |   288 +
 docs/firewall.png                                                                            |   Bin 0 -> 29348 bytes
 docs/llm.md                                                                                  |   125 +
 docs/log-sample.txt                                                                          |  8925 +++++++++++++++++++++++++
 docs/scratch.md                                                                              |  9362 ++++++++++++++++++++++++++
 my_project_export.txt                                                                        | 38181 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj                                     |    55 +-
 src/MyOpenTelemetryApi.Api/Program.cs                                                        |     9 +-
 src/MyOpenTelemetryApi.Api/Properties/launchSettings.json                                    |    40 +-
 src/MyOpenTelemetryApi.Application/MyOpenTelemetryApi.Application.csproj                     |    18 +-
 src/MyOpenTelemetryApi.Application/Services/ContactService.cs                                |   138 +-
 src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj                               |     6 +-
 src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj               |    14 +-
 tests/MyOpenTelemetryApi.Api.Tests/MyOpenTelemetryApi.Api.Tests.csproj                       |    19 +-
 tests/MyOpenTelemetryApi.Application.Tests/MyOpenTelemetryApi.Application.Tests.csproj       |    24 +-
 tests/MyOpenTelemetryApi.Infrastructure.Tests/MyOpenTelemetryApi.Infrastructure.Tests.csproj |    21 +-
 23 files changed, 56875 insertions(+), 679 deletions(-)
 create mode 100644 Directory.Build.props
 create mode 100644 Directory.Build.targets
 create mode 100644 Directory.Packages.props
 create mode 100644 docs/Windows PowerShell.txt
 create mode 100644 docs/firewall.png
 create mode 100644 docs/llm.md
 create mode 100644 docs/log-sample.txt
 create mode 100644 docs/scratch.md
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
[1/2] STEP 1/11: FROM mcr.microsoft.com/dotnet/sdk:10.0 AS build
[1/2] STEP 2/11: WORKDIR /src
--> Using cache c734d7b1e551535267151f5976d85d6bc25ec891c718d754863db1fcc85c2ab2
--> c734d7b1e551
[1/2] STEP 3/11: COPY ["Directory.Build.props", "./"]
--> 806e7c5a736f
[1/2] STEP 4/11: COPY ["Directory.Packages.props", "./"]
--> 4419c188d9f6
[1/2] STEP 5/11: COPY ["src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj", "MyOpenTelemetryApi.Api/"]
--> 84b6c5c88fbc
[1/2] STEP 6/11: COPY ["src/MyOpenTelemetryApi.Application/MyOpenTelemetryApi.Application.csproj", "MyOpenTelemetryApi.Application/"]
--> 018a97599a17
[1/2] STEP 7/11: COPY ["src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj", "MyOpenTelemetryApi.Domain/"]
--> 3104bf6746ef
[1/2] STEP 8/11: COPY ["src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj", "MyOpenTelemetryApi.Infrastructure/"]
--> 938de8affc26
[1/2] STEP 9/11: RUN dotnet restore "MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj"
  Determining projects to restore...
  Restored /src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj (in 310 ms).
  Restored /src/MyOpenTelemetryApi.Application/MyOpenTelemetryApi.Application.csproj (in 3.46 sec).
  Restored /src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj (in 5.49 sec).
  Restored /src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj (in 5.49 sec).
--> 4549e50d527f
[1/2] STEP 10/11: COPY src/ .
--> ab70374905a5
[1/2] STEP 11/11: RUN dotnet publish "MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj" -c Release -o /app/publish
  Determining projects to restore...
  All projects are up-to-date for restore.
/usr/share/dotnet/sdk/10.0.100-rc.1.25451.107/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(345,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj]
/usr/share/dotnet/sdk/10.0.100-rc.1.25451.107/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(345,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/src/MyOpenTelemetryApi.Infrastructure/MyOpenTelemetryApi.Infrastructure.csproj]
/usr/share/dotnet/sdk/10.0.100-rc.1.25451.107/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(345,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/src/MyOpenTelemetryApi.Domain/MyOpenTelemetryApi.Domain.csproj]
  MyOpenTelemetryApi.Domain -> /src/MyOpenTelemetryApi.Domain/bin/Release/net10.0/MyOpenTelemetryApi.Domain.dll
  MyOpenTelemetryApi.Application -> /src/MyOpenTelemetryApi.Application/bin/Release/net10.0/MyOpenTelemetryApi.Application.dll
  MyOpenTelemetryApi.Infrastructure -> /src/MyOpenTelemetryApi.Infrastructure/bin/Release/net10.0/MyOpenTelemetryApi.Infrastructure.dll
  MyOpenTelemetryApi.Api -> /src/MyOpenTelemetryApi.Api/bin/Release/net10.0/MyOpenTelemetryApi.Api.dll
  MyOpenTelemetryApi.Api -> /app/publish/
--> 516bffb0cd22
[2/2] STEP 1/9: FROM mcr.microsoft.com/dotnet/aspnet:10.0
[2/2] STEP 2/9: WORKDIR /app
--> Using cache 601ef07a6b33606b1ec38699803b23bcb77b1ff822df320047fb42112e09bf27
--> 601ef07a6b33
[2/2] STEP 3/9: RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
Get:1 http://archive.ubuntu.com/ubuntu noble InRelease [256 kB]
Get:2 http://security.ubuntu.com/ubuntu noble-security InRelease [126 kB]
Get:3 http://archive.ubuntu.com/ubuntu noble-updates InRelease [126 kB]
Get:4 http://security.ubuntu.com/ubuntu noble-security/main amd64 Packages [1519 kB]
Get:5 http://archive.ubuntu.com/ubuntu noble-backports InRelease [126 kB]
Get:6 http://archive.ubuntu.com/ubuntu noble/main amd64 Packages [1808 kB]
Get:7 http://security.ubuntu.com/ubuntu noble-security/universe amd64 Packages [1138 kB]
Get:8 http://security.ubuntu.com/ubuntu noble-security/restricted amd64 Packages [2478 kB]
Get:9 http://archive.ubuntu.com/ubuntu noble/universe amd64 Packages [19.3 MB]
Get:10 http://security.ubuntu.com/ubuntu noble-security/multiverse amd64 Packages [34.6 kB]
Get:11 http://archive.ubuntu.com/ubuntu noble/restricted amd64 Packages [117 kB]
Get:12 http://archive.ubuntu.com/ubuntu noble/multiverse amd64 Packages [331 kB]
Get:13 http://archive.ubuntu.com/ubuntu noble-updates/restricted amd64 Packages [2612 kB]
Get:14 http://archive.ubuntu.com/ubuntu noble-updates/universe amd64 Packages [1924 kB]
Get:15 http://archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 Packages [38.9 kB]
Get:16 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 Packages [1882 kB]
Get:17 http://archive.ubuntu.com/ubuntu noble-backports/universe amd64 Packages [33.9 kB]
Get:18 http://archive.ubuntu.com/ubuntu noble-backports/main amd64 Packages [49.4 kB]
Fetched 33.9 MB in 4s (7979 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  krb5-locales libbrotli1 libcurl4t64 libgssapi-krb5-2 libk5crypto3
  libkeyutils1 libkrb5-3 libkrb5support0 libldap-common libldap2 libnghttp2-14
  libpsl5t64 librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh-4
  publicsuffix
Suggested packages:
  krb5-doc krb5-user libsasl2-modules-gssapi-mit
  | libsasl2-modules-gssapi-heimdal libsasl2-modules-ldap libsasl2-modules-otp
  libsasl2-modules-sql
The following NEW packages will be installed:
  curl krb5-locales libbrotli1 libcurl4t64 libgssapi-krb5-2 libk5crypto3
  libkeyutils1 libkrb5-3 libkrb5support0 libldap-common libldap2 libnghttp2-14
  libpsl5t64 librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh-4
  publicsuffix
0 upgraded, 19 newly installed, 0 to remove and 3 not upgraded.
Need to get 2405 kB of archives.
After this operation, 6886 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 krb5-locales all 1.20.1-6ubuntu2.6 [14.8 kB]
Get:2 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libkrb5support0 amd64 1.20.1-6ubuntu2.6 [34.4 kB]
Get:3 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libk5crypto3 amd64 1.20.1-6ubuntu2.6 [82.0 kB]
Get:4 http://archive.ubuntu.com/ubuntu noble/main amd64 libkeyutils1 amd64 1.6.3-3build1 [9490 B]
Get:5 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libkrb5-3 amd64 1.20.1-6ubuntu2.6 [348 kB]
Get:6 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libgssapi-krb5-2 amd64 1.20.1-6ubuntu2.6 [143 kB]
Get:7 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libnghttp2-14 amd64 1.59.0-1ubuntu0.2 [74.3 kB]
Get:8 http://archive.ubuntu.com/ubuntu noble/main amd64 libpsl5t64 amd64 0.21.2-1.1build1 [57.1 kB]
Get:9 http://archive.ubuntu.com/ubuntu noble/main amd64 publicsuffix all 20231001.0357-0.1 [129 kB]
Get:10 http://archive.ubuntu.com/ubuntu noble/main amd64 libbrotli1 amd64 1.1.0-2build2 [331 kB]
Get:11 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libsasl2-modules-db amd64 2.1.28+dfsg1-5ubuntu3.1 [20.4 kB]
Get:12 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libsasl2-2 amd64 2.1.28+dfsg1-5ubuntu3.1 [53.2 kB]
Get:13 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libldap2 amd64 2.6.7+dfsg-1~exp1ubuntu8.2 [196 kB]
Get:14 http://archive.ubuntu.com/ubuntu noble/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-2build7 [56.3 kB]
Get:15 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libssh-4 amd64 0.10.6-2ubuntu0.1 [188 kB]
Get:16 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libcurl4t64 amd64 8.5.0-2ubuntu10.6 [341 kB]
Get:17 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 curl amd64 8.5.0-2ubuntu10.6 [226 kB]
Get:18 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libldap-common all 2.6.7+dfsg-1~exp1ubuntu8.2 [31.7 kB]
Get:19 http://archive.ubuntu.com/ubuntu noble-updates/main amd64 libsasl2-modules amd64 2.1.28+dfsg1-5ubuntu3.1 [69.9 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 2405 kB in 2s (1347 kB/s)
Selecting previously unselected package krb5-locales.
(Reading database ... 6136 files and directories currently installed.)
Preparing to unpack .../00-krb5-locales_1.20.1-6ubuntu2.6_all.deb ...
Unpacking krb5-locales (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libkrb5support0:amd64.
Preparing to unpack .../01-libkrb5support0_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libkrb5support0:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libk5crypto3:amd64.
Preparing to unpack .../02-libk5crypto3_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libk5crypto3:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libkeyutils1:amd64.
Preparing to unpack .../03-libkeyutils1_1.6.3-3build1_amd64.deb ...
Unpacking libkeyutils1:amd64 (1.6.3-3build1) ...
Selecting previously unselected package libkrb5-3:amd64.
Preparing to unpack .../04-libkrb5-3_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libkrb5-3:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libgssapi-krb5-2:amd64.
Preparing to unpack .../05-libgssapi-krb5-2_1.20.1-6ubuntu2.6_amd64.deb ...
Unpacking libgssapi-krb5-2:amd64 (1.20.1-6ubuntu2.6) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../06-libnghttp2-14_1.59.0-1ubuntu0.2_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.59.0-1ubuntu0.2) ...
Selecting previously unselected package libpsl5t64:amd64.
Preparing to unpack .../07-libpsl5t64_0.21.2-1.1build1_amd64.deb ...
Unpacking libpsl5t64:amd64 (0.21.2-1.1build1) ...
Selecting previously unselected package publicsuffix.
Preparing to unpack .../08-publicsuffix_20231001.0357-0.1_all.deb ...
Unpacking publicsuffix (20231001.0357-0.1) ...
Selecting previously unselected package libbrotli1:amd64.
Preparing to unpack .../09-libbrotli1_1.1.0-2build2_amd64.deb ...
Unpacking libbrotli1:amd64 (1.1.0-2build2) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../10-libsasl2-modules-db_2.1.28+dfsg1-5ubuntu3.1_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../11-libsasl2-2_2.1.28+dfsg1-5ubuntu3.1_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Selecting previously unselected package libldap2:amd64.
Preparing to unpack .../12-libldap2_2.6.7+dfsg-1~exp1ubuntu8.2_amd64.deb ...
Unpacking libldap2:amd64 (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../13-librtmp1_2.4+20151223.gitfa8646d.1-2build7_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2build7) ...
Selecting previously unselected package libssh-4:amd64.
Preparing to unpack .../14-libssh-4_0.10.6-2ubuntu0.1_amd64.deb ...
Unpacking libssh-4:amd64 (0.10.6-2ubuntu0.1) ...
Selecting previously unselected package libcurl4t64:amd64.
Preparing to unpack .../15-libcurl4t64_8.5.0-2ubuntu10.6_amd64.deb ...
Unpacking libcurl4t64:amd64 (8.5.0-2ubuntu10.6) ...
Selecting previously unselected package curl.
Preparing to unpack .../16-curl_8.5.0-2ubuntu10.6_amd64.deb ...
Unpacking curl (8.5.0-2ubuntu10.6) ...
Selecting previously unselected package libldap-common.
Preparing to unpack .../17-libldap-common_2.6.7+dfsg-1~exp1ubuntu8.2_all.deb ...
Unpacking libldap-common (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Selecting previously unselected package libsasl2-modules:amd64.
Preparing to unpack .../18-libsasl2-modules_2.1.28+dfsg1-5ubuntu3.1_amd64.deb ...
Unpacking libsasl2-modules:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up libkeyutils1:amd64 (1.6.3-3build1) ...
Setting up libbrotli1:amd64 (1.1.0-2build2) ...
Setting up libsasl2-modules:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up libpsl5t64:amd64 (0.21.2-1.1build1) ...
Setting up libnghttp2-14:amd64 (1.59.0-1ubuntu0.2) ...
Setting up krb5-locales (1.20.1-6ubuntu2.6) ...
Setting up libldap-common (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Setting up libkrb5support0:amd64 (1.20.1-6ubuntu2.6) ...
Setting up libsasl2-modules-db:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2build7) ...
Setting up libk5crypto3:amd64 (1.20.1-6ubuntu2.6) ...
Setting up libsasl2-2:amd64 (2.1.28+dfsg1-5ubuntu3.1) ...
Setting up libkrb5-3:amd64 (1.20.1-6ubuntu2.6) ...
Setting up publicsuffix (20231001.0357-0.1) ...
Setting up libldap2:amd64 (2.6.7+dfsg-1~exp1ubuntu8.2) ...
Setting up libgssapi-krb5-2:amd64 (1.20.1-6ubuntu2.6) ...
Setting up libssh-4:amd64 (0.10.6-2ubuntu0.1) ...
Setting up libcurl4t64:amd64 (8.5.0-2ubuntu10.6) ...
Setting up curl (8.5.0-2ubuntu10.6) ...
Processing triggers for libc-bin (2.39-0ubuntu8.6) ...
--> ccacbb7cedbc
[2/2] STEP 4/9: COPY --from=build /app/publish .
--> 39b8c44daaa7
[2/2] STEP 5/9: RUN mkdir -p /app/logs && chmod 777 /app/logs
--> 89cb17dbc805
[2/2] STEP 6/9: USER app
--> 921d2bb37a55
[2/2] STEP 7/9: EXPOSE 8080
--> c904b479d829
[2/2] STEP 8/9: EXPOSE 8081
--> e06d16c5fe49
[2/2] STEP 9/9: ENTRYPOINT ["dotnet", "MyOpenTelemetryApi.Api.dll"]
[2/2] COMMIT myopentelemetryapi_api
--> b598ff7cf1fc
Successfully tagged localhost/myopentelemetryapi_api:latest
b598ff7cf1fc688ca546dc72cb1f2f8d007145f0cca4c0bf8964c49393d7b979
6b9b5d3a556b349b7683558a0107c3a1c226143d46630cc645ef69348f560021
5a67e9ce01cdce780cc2bfda92230a2b6242df0316cd36bf8e81d425c9ac34da
myotel-postgres
b3d68f9bb4f3e9b59d39238565fbbd2e8abf1039afc2d0724a596783d205a3e7
myotel-api

real    1m6.525s
user    1m10.982s
sys     0m15.256s
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$ podman ps -a
CONTAINER ID  IMAGE                                    COMMAND     CREATED        STATUS                   PORTS                             NAMES
5a67e9ce01cd  docker.io/library/postgres:16-alpine     postgres    7 seconds ago  Up 7 seconds (healthy)   0.0.0.0:5432->5432/tcp            myotel-postgres
b3d68f9bb4f3  localhost/myopentelemetryapi_api:latest              6 seconds ago  Up 6 seconds (starting)  0.0.0.0:5174->8080/tcp, 8081/tcp  myotel-api
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$ podman ps -a
CONTAINER ID  IMAGE                                    COMMAND     CREATED             STATUS                       PORTS                             NAMES
5a67e9ce01cd  docker.io/library/postgres:16-alpine     postgres    About a minute ago  Up About a minute (healthy)  0.0.0.0:5432->5432/tcp            myotel-postgres
b3d68f9bb4f3  localhost/myopentelemetryapi_api:latest              About a minute ago  Up About a minute (healthy)  0.0.0.0:5174->8080/tcp, 8081/tcp  myotel-api
kushal@virginia:~/src/dotnet/MyOpenTelemetryApi$








Great! Your Virginia Debian server successfully pulled 95 commits and rebuilt/redeployed both containers. Let me break down what happened:

## Deployment Summary

**Git Update:**
- Was 95 commits behind (`4f11177..bd0ead8`)
- Fast-forwarded successfully
- Pulled 376 objects (903.71 KiB)

**Major Changes Pulled:**
- New centralized package management (`Directory.Build.props`, `Directory.Packages.props`, `Directory.Build.targets`)
- Updated CI/CD workflows
- Enhanced Dockerfile with health checks and proper user permissions
- Massive documentation additions (38K+ lines in `my_project_export.txt`)
- Various project file updates across all layers

**Container Status:**
Both containers are now **healthy** and running:
- `myotel-postgres` (5a67e9ce01cd) - PostgreSQL 16 on port 5432
- `myotel-api` (b3d68f9bb4f3) - Your API on port 5174

**Build Time:**
- Total deployment: ~1 minute 7 seconds
- Clean shutdown: ~1.8 seconds
- Build and startup: remainder

## What's Different Now

The deployment includes your recent work on:
1. Centralized package version management
2. Updated health check configurations
3. Improved logging directory permissions (`/app/logs` with 777 permissions)
4. Running as non-root `app` user for security

Everything looks clean - no errors, both containers healthy. Ready to test the API at `http://192.168.0.76:5174`! ðŸš€

Want me to help you verify the deployment or test any specific endpoints?



Good idea. 
kushal@texas:~$ cat ~/mybashscripts/insert-contacts.sh; time for ((i=1; i<=10; i++)); do time bash ~/mybashscripts/insert-contacts.sh; date; sleep 1; done
#!/bin/bash

# API Configuration
API_BASE="http://192.168.0.76:5174/api"

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to generate timestamp
get_timestamp() {
    date +"%Y-%m-%d-%H-%M-%S"
}

# Function to make API calls with error handling
api_post() {
    local endpoint=$1
    local data=$2
    local response=$(curl -s -w "\n%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        -d "$data" \
        "${API_BASE}${endpoint}")

    local body=$(echo "$response" | head -n -1)
    local status=$(echo "$response" | tail -n 1)

    if [ "$status" -ge 200 ] && [ "$status" -lt 300 ]; then
        echo "$body"
        return 0
    else
        echo "Error: HTTP $status - $body" >&2
        return 1
    fi
}

# Function to extract ID from JSON response
extract_id() {
    local json=$1
    echo "$json" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"\([^"]*\)"/\1/'
}

# Function to create a tag
create_tag() {
    local ts=$1
    local name=$2
    local color=$3

    echo -e "${YELLOW}Creating tag: $name-$ts${NC}" >&2

    local data=$(cat <<EOF
{
  "name": "$name-$ts",
  "colorHex": "$color"
}
EOF
)

    local result=$(api_post "/Tags" "$data")
    if [ $? -eq 0 ]; then
        local tag_id=$(extract_id "$result")
        echo -e "${GREEN}âœ“ Tag created: $tag_id${NC}" >&2
        echo "$tag_id"
    else
        echo -e "${RED}âœ— Failed to create tag${NC}" >&2
        echo ""
        return 1
    fi
}

# Function to create a group
create_group() {
    local ts=$1
    local name=$2
    local desc=$3

    echo -e "${YELLOW}Creating group: $name-$ts${NC}" >&2

    local data=$(cat <<EOF
{
  "name": "$name-$ts",
  "description": "$desc-$ts"
}
EOF
)

    local result=$(api_post "/Groups" "$data")
    if [ $? -eq 0 ]; then
        local group_id=$(extract_id "$result")
        echo -e "${GREEN}âœ“ Group created: $group_id${NC}" >&2
        echo "$group_id"
    else
        echo -e "${RED}âœ— Failed to create group${NC}" >&2
        echo ""
        return 1
    fi
}

# Function to create a contact
create_contact() {
    local ts=$1
    local firstname=$2
    local lastname=$3
    local company=$4
    local group_ids=$5
    local tag_ids=$6

    echo -e "${YELLOW}Creating contact: $firstname-$ts $lastname-$ts${NC}" >&2

    local data=$(cat <<EOF
{
  "firstName": "$firstname-$ts",
  "lastName": "$lastname-$ts",
  "middleName": "Middle-$ts",
  "nickname": "Nick-$ts",
  "company": "$company-$ts",
  "jobTitle": "Developer-$ts",
  "dateOfBirth": "1990-01-15T00:00:00Z",
  "notes": "Test contact created at $ts",
  "emailAddresses": [
    {
      "email": "${firstname,,}.${lastname,,}-$ts@gmail.com",
      "type": "Personal",
      "isPrimary": true
    },
    {
      "email": "${firstname,,}.${lastname,,}-$ts@work.com",
      "type": "Work",
      "isPrimary": false
    }
  ],
  "phoneNumbers": [
    {
      "number": "+1-555-0100-$ts",
      "type": "Mobile",
      "isPrimary": true
    },
    {
      "number": "+1-555-0200-$ts",
      "type": "Work",
      "isPrimary": false
    }
  ],
  "addresses": [
    {
      "streetLine1": "123 Main St-$ts",
      "streetLine2": "Apt 4B",
      "city": "Newport News",
      "stateProvince": "VA",
      "postalCode": "23601",
      "country": "USA",
      "type": "Home",
      "isPrimary": true
    },
    {
      "streetLine1": "456 Business Blvd-$ts",
      "streetLine2": "Suite 100",
      "city": "Norfolk",
      "stateProvince": "VA",
      "postalCode": "23510",
      "country": "USA",
      "type": "Work",
      "isPrimary": false
    }
  ],
  "groupIds": [$group_ids],
  "tagIds": [$tag_ids]
}
EOF
)

    local result=$(api_post "/Contacts" "$data")
    if [ $? -eq 0 ]; then
        local contact_id=$(extract_id "$result")
        echo -e "${GREEN}âœ“ Contact created: $contact_id${NC}" >&2
        echo "$contact_id"
    else
        echo -e "${RED}âœ— Failed to create contact${NC}" >&2
        echo ""
        return 1
    fi
}

# Main execution
echo -e "${GREEN}=== Starting API Data Generation ===${NC}"
echo ""

# Generate single timestamp for this run
TIMESTAMP=$(get_timestamp)
echo -e "Using timestamp: ${YELLOW}$TIMESTAMP${NC}"
echo ""

# Create Tags
echo -e "${GREEN}--- Creating Tags ---${NC}"
TAG1=$(create_tag "$TIMESTAMP" "Important" "#FF0000")
TAG2=$(create_tag "$TIMESTAMP" "VIP" "#FFD700")
TAG3=$(create_tag "$TIMESTAMP" "Follow-Up" "#00FF00")
echo ""

# Check if tags were created
if [ -z "$TAG1" ] || [ -z "$TAG2" ] || [ -z "$TAG3" ]; then
    echo -e "${RED}Failed to create tags. Exiting.${NC}"
    exit 1
fi

# Create Groups
echo -e "${GREEN}--- Creating Groups ---${NC}"
GROUP1=$(create_group "$TIMESTAMP" "Family" "Family members")
GROUP2=$(create_group "$TIMESTAMP" "Colleagues" "Work colleagues")
GROUP3=$(create_group "$TIMESTAMP" "Friends" "Close friends")
echo ""

# Check if groups were created
if [ -z "$GROUP1" ] || [ -z "$GROUP2" ] || [ -z "$GROUP3" ]; then
    echo -e "${RED}Failed to create groups. Exiting.${NC}"
    exit 1
fi

# Prepare IDs for contacts
TAG_IDS="\"$TAG1\",\"$TAG2\""
GROUP_IDS="\"$GROUP1\",\"$GROUP2\""

# Create Contacts
echo -e "${GREEN}--- Creating Contacts ---${NC}"
CONTACT1=$(create_contact "$TIMESTAMP" "Adam" "West" "Wayne Enterprises" "$GROUP_IDS" "$TAG_IDS")
echo ""

CONTACT2=$(create_contact "$TIMESTAMP" "Bruce" "Banner" "Stark Industries" "\"$GROUP2\"" "\"$TAG1\",\"$TAG3\"")
echo ""

CONTACT3=$(create_contact "$TIMESTAMP" "Diana" "Prince" "Themyscira Inc" "\"$GROUP1\",\"$GROUP3\"" "\"$TAG2\"")
echo ""

CONTACT4=$(create_contact "$TIMESTAMP" "Peter" "Parker" "Daily Bugle" "\"$GROUP3\"" "\"$TAG3\"")
echo ""

CONTACT5=$(create_contact "$TIMESTAMP" "Clark" "Kent" "Daily Planet" "$GROUP_IDS" "\"$TAG1\",\"$TAG2\",\"$TAG3\"")
echo ""

echo -e "${GREEN}=== Data Generation Complete ===${NC}"
echo ""
echo -e "${YELLOW}Summary:${NC}"
echo "Timestamp used: $TIMESTAMP"
echo "Tags created: 3"
echo "Groups created: 3"
echo "Contacts created: 5"
echo ""
echo -e "${GREEN}All data has been inserted successfully!${NC}"

=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-29

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-29
âœ“ Tag created: 935c4224-793f-45ec-a1d4-242193383fcb
Creating tag: VIP-2025-10-06-16-31-29
âœ“ Tag created: c188c6ed-9224-47b9-9fc9-eb1134776006
Creating tag: Follow-Up-2025-10-06-16-31-29
âœ“ Tag created: ad8f15dd-78fe-446a-900a-48532e2a1ac6

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-29
âœ“ Group created: 9d00e5a2-9db9-4668-9a7f-21aba2b6507a
Creating group: Colleagues-2025-10-06-16-31-29
âœ“ Group created: 15354523-ebe4-4dc9-b04d-0c77396aa245
Creating group: Friends-2025-10-06-16-31-29
âœ“ Group created: 81146300-976f-4a4e-a68c-db3ec732680f

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-29 West-2025-10-06-16-31-29
âœ“ Contact created: 6089f707-37ea-4d28-a700-d34918da4660

Creating contact: Bruce-2025-10-06-16-31-29 Banner-2025-10-06-16-31-29
âœ“ Contact created: 3412fff6-7baa-46a6-83fa-fb5bddc781f7

Creating contact: Diana-2025-10-06-16-31-29 Prince-2025-10-06-16-31-29
âœ“ Contact created: 082ded46-9c91-4486-84f3-f8a1a3aab420

Creating contact: Peter-2025-10-06-16-31-29 Parker-2025-10-06-16-31-29
âœ“ Contact created: 3b6ba5e3-ecf6-4aac-8de3-cb691ffacf53

Creating contact: Clark-2025-10-06-16-31-29 Kent-2025-10-06-16-31-29
âœ“ Contact created: 9d171076-0e59-4d94-9847-0919bd1cf70b

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-29
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.801s
user    0m0.231s
sys     0m0.111s
Mon Oct  6 04:31:29 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-30

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-30
âœ“ Tag created: f310e07b-3cee-467c-b671-0760c81a335c
Creating tag: VIP-2025-10-06-16-31-30
âœ“ Tag created: 2a886c31-6f3c-4375-a3aa-1fc9266a7fa5
Creating tag: Follow-Up-2025-10-06-16-31-30
âœ“ Tag created: 3e5484fc-bae7-465c-8b4e-62b0d4d01708

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-30
âœ“ Group created: 0ceda88b-f426-46e2-8756-ffced4204402
Creating group: Colleagues-2025-10-06-16-31-30
âœ“ Group created: 624de489-4d0d-4308-b2c3-449d535dcf7f
Creating group: Friends-2025-10-06-16-31-30
âœ“ Group created: ade31416-3522-4bee-877a-fad1f27b4419

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-30 West-2025-10-06-16-31-30
âœ“ Contact created: 4e9c6411-4218-4afc-a778-d75d2f43f19d

Creating contact: Bruce-2025-10-06-16-31-30 Banner-2025-10-06-16-31-30
âœ“ Contact created: 5df1cfeb-7ecb-4b1d-90ed-1a51341239f0

Creating contact: Diana-2025-10-06-16-31-30 Prince-2025-10-06-16-31-30
âœ“ Contact created: 71cafa08-af60-4989-b63a-1949668606a6

Creating contact: Peter-2025-10-06-16-31-30 Parker-2025-10-06-16-31-30
âœ“ Contact created: 1eda4c94-d061-435c-93a9-adb29a7130b4

Creating contact: Clark-2025-10-06-16-31-30 Kent-2025-10-06-16-31-30
âœ“ Contact created: eb8dfec9-9dd0-4bdd-b39f-bef43d67e1de

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-30
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.760s
user    0m0.240s
sys     0m0.094s
Mon Oct  6 04:31:31 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-32

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-32
âœ“ Tag created: 40c8ae99-660d-4ede-b4f9-c593259fe918
Creating tag: VIP-2025-10-06-16-31-32
âœ“ Tag created: d2b184b1-9bee-432e-992b-feca1e6ca4f0
Creating tag: Follow-Up-2025-10-06-16-31-32
âœ“ Tag created: 0b72ea55-eb0b-4f84-a024-27fb7e96162f

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-32
âœ“ Group created: f53dfc23-4e6b-4b76-a2b5-d8f327c67cdb
Creating group: Colleagues-2025-10-06-16-31-32
âœ“ Group created: b17ee173-92c6-4bf9-8b5f-be6f288785d5
Creating group: Friends-2025-10-06-16-31-32
âœ“ Group created: 5612ef3e-7c36-48bd-b4e6-6c3a19c8b674

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-32 West-2025-10-06-16-31-32
âœ“ Contact created: a9f43e35-cd36-4435-9dfa-19cecd9fb149

Creating contact: Bruce-2025-10-06-16-31-32 Banner-2025-10-06-16-31-32
âœ“ Contact created: 4ae76363-ad3a-46ea-8ffe-57db5e66c789

Creating contact: Diana-2025-10-06-16-31-32 Prince-2025-10-06-16-31-32
âœ“ Contact created: 4c6c38e5-65af-4f0c-93e3-f2d7dc0581cb

Creating contact: Peter-2025-10-06-16-31-32 Parker-2025-10-06-16-31-32
âœ“ Contact created: 4c37a494-9df8-40d6-a13e-6693074816d2

Creating contact: Clark-2025-10-06-16-31-32 Kent-2025-10-06-16-31-32
âœ“ Contact created: 5505fc1a-d9f5-4cc7-8b4d-fdebc10c50f1

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-32
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.760s
user    0m0.235s
sys     0m0.106s
Mon Oct  6 04:31:33 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-34

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-34
âœ“ Tag created: 32531ee6-8d12-4926-b2db-ce75cdd3f934
Creating tag: VIP-2025-10-06-16-31-34
âœ“ Tag created: 8b38f0b5-1fa8-470e-97d4-f18071b9197c
Creating tag: Follow-Up-2025-10-06-16-31-34
âœ“ Tag created: 05a3ea2f-65a1-48c1-b4fc-b0d1bc3a863a

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-34
âœ“ Group created: 14c5598e-2e4c-413e-8d70-ae7d6cd4a51e
Creating group: Colleagues-2025-10-06-16-31-34
âœ“ Group created: 66ebc2fb-440c-4c34-b37f-419e1f8a0207
Creating group: Friends-2025-10-06-16-31-34
âœ“ Group created: bb5ab330-8147-4c15-8324-09edacf39403

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-34 West-2025-10-06-16-31-34
âœ“ Contact created: 9a88f24d-4b03-49b7-928d-db247b84a271

Creating contact: Bruce-2025-10-06-16-31-34 Banner-2025-10-06-16-31-34
âœ“ Contact created: c6e83ed0-11b6-4c66-b975-c817c16016d4

Creating contact: Diana-2025-10-06-16-31-34 Prince-2025-10-06-16-31-34
âœ“ Contact created: 3e8b6766-98f6-4ac7-bb51-625e77684dd7

Creating contact: Peter-2025-10-06-16-31-34 Parker-2025-10-06-16-31-34
âœ“ Contact created: 1a6dc3e4-dbf6-4fcf-8d5c-57b31e58d202

Creating contact: Clark-2025-10-06-16-31-34 Kent-2025-10-06-16-31-34
âœ“ Contact created: b1f135c1-6de9-4844-8fe1-bd27558d5418

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-34
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.762s
user    0m0.242s
sys     0m0.100s
Mon Oct  6 04:31:35 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-36

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-36
âœ“ Tag created: ffe5bfaf-e3e7-4fdf-b2e4-7c88a989ef9e
Creating tag: VIP-2025-10-06-16-31-36
âœ“ Tag created: 33f1e69a-4866-4c1f-b37c-50e488497fca
Creating tag: Follow-Up-2025-10-06-16-31-36
âœ“ Tag created: b8aa2930-c45f-40f5-9735-d0633c9fdd7a

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-36
âœ“ Group created: a7da3e72-7993-4b67-b53c-d09fa7ba90a1
Creating group: Colleagues-2025-10-06-16-31-36
âœ“ Group created: 8b87eb37-7afe-42de-859c-9efc76fae559
Creating group: Friends-2025-10-06-16-31-36
âœ“ Group created: 7aed1609-6da7-41b4-b93e-c9c0dbc4d0bd

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-36 West-2025-10-06-16-31-36
âœ“ Contact created: 8288b144-4ced-4c2c-9a18-7cf2a7d2a8b8

Creating contact: Bruce-2025-10-06-16-31-36 Banner-2025-10-06-16-31-36
âœ“ Contact created: b03b31d8-e25a-436d-8dcc-97603c431cbd

Creating contact: Diana-2025-10-06-16-31-36 Prince-2025-10-06-16-31-36
âœ“ Contact created: 8c0ca299-c100-494e-b15f-e16794496f9d

Creating contact: Peter-2025-10-06-16-31-36 Parker-2025-10-06-16-31-36
âœ“ Contact created: 53b6cf80-c537-4ee5-b20a-47b697ca10b5

Creating contact: Clark-2025-10-06-16-31-36 Kent-2025-10-06-16-31-36
âœ“ Contact created: 9bbc20a5-b96f-4d35-b9d5-8831c34f017b

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-36
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.765s
user    0m0.218s
sys     0m0.121s
Mon Oct  6 04:31:36 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-37

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-37
âœ“ Tag created: 36a4d4fa-2c2a-4ccd-9573-79ea4e0f8fc0
Creating tag: VIP-2025-10-06-16-31-37
âœ“ Tag created: 5d34645d-865e-4b13-82e0-29d171e3ec05
Creating tag: Follow-Up-2025-10-06-16-31-37
âœ“ Tag created: 652af711-0bfd-47da-a1f5-83463d80d446

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-37
âœ“ Group created: 05b229f4-298f-4a6c-88a8-a1565717872e
Creating group: Colleagues-2025-10-06-16-31-37
âœ“ Group created: 07b86123-62e3-47f3-92ea-889203f37222
Creating group: Friends-2025-10-06-16-31-37
âœ“ Group created: 8401749b-e1f7-4766-8972-36f39b864907

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-37 West-2025-10-06-16-31-37
âœ“ Contact created: 84bce9f9-540e-434f-881f-fa1fe251a1c3

Creating contact: Bruce-2025-10-06-16-31-37 Banner-2025-10-06-16-31-37
âœ“ Contact created: cb27b5f0-12af-4620-a7c5-c112d68943ec

Creating contact: Diana-2025-10-06-16-31-37 Prince-2025-10-06-16-31-37
âœ“ Contact created: 7e4dcead-139f-4d0c-ac76-ee255b279f21

Creating contact: Peter-2025-10-06-16-31-37 Parker-2025-10-06-16-31-37
âœ“ Contact created: c9dd57cf-2a7a-4fbe-b4f6-78e2b33b51e9

Creating contact: Clark-2025-10-06-16-31-37 Kent-2025-10-06-16-31-37
âœ“ Contact created: 999f4118-56aa-479a-b66f-992215103a1c

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-37
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.763s
user    0m0.231s
sys     0m0.105s
Mon Oct  6 04:31:38 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-39

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-39
âœ“ Tag created: 6c36f51c-5032-4857-a50d-1875c2535966
Creating tag: VIP-2025-10-06-16-31-39
âœ“ Tag created: 21d96683-2bbd-486f-b541-af9a62870f34
Creating tag: Follow-Up-2025-10-06-16-31-39
âœ“ Tag created: b46a7b32-34c7-453e-8ff2-c56373e3d3e6

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-39
âœ“ Group created: 778b3461-598c-4228-9b28-c57d1be3b598
Creating group: Colleagues-2025-10-06-16-31-39
âœ“ Group created: 9a86c8bd-892b-443a-869b-9e0f835ec802
Creating group: Friends-2025-10-06-16-31-39
âœ“ Group created: 8637739c-cce1-44a6-ac3f-93dbaaf38432

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-39 West-2025-10-06-16-31-39
âœ“ Contact created: 7450c130-2594-43ff-9b80-fa340bd0d9bf

Creating contact: Bruce-2025-10-06-16-31-39 Banner-2025-10-06-16-31-39
âœ“ Contact created: b52b2c44-bdf7-454c-a833-47fe96802eea

Creating contact: Diana-2025-10-06-16-31-39 Prince-2025-10-06-16-31-39
âœ“ Contact created: 3325f579-7fd2-46d1-85ee-e4a5b182dcba

Creating contact: Peter-2025-10-06-16-31-39 Parker-2025-10-06-16-31-39
âœ“ Contact created: 6d22d03d-eb45-4763-b001-7965286866c7

Creating contact: Clark-2025-10-06-16-31-39 Kent-2025-10-06-16-31-39
âœ“ Contact created: 6a7f02a5-c29c-4a5b-a99b-9a4d9b88fd81

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-39
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.755s
user    0m0.246s
sys     0m0.080s
Mon Oct  6 04:31:40 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-41

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-41
âœ“ Tag created: 2e00303e-ace8-402a-8c88-4dcb3bbae855
Creating tag: VIP-2025-10-06-16-31-41
âœ“ Tag created: 1699e5f7-19ba-4370-8979-1b389bfe5e0f
Creating tag: Follow-Up-2025-10-06-16-31-41
âœ“ Tag created: ab73a68c-25ae-4d3d-9cf8-32d83d25089c

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-41
âœ“ Group created: 5b89ebba-2f06-4543-8612-9eb314c92032
Creating group: Colleagues-2025-10-06-16-31-41
âœ“ Group created: 3016a7fd-b8e4-47c2-a640-91f31bbc07db
Creating group: Friends-2025-10-06-16-31-41
âœ“ Group created: 916486f6-f93c-4028-bb06-337b40929c59

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-41 West-2025-10-06-16-31-41
âœ“ Contact created: 5be7a7bf-e264-42c6-982b-99a2c15cd21f

Creating contact: Bruce-2025-10-06-16-31-41 Banner-2025-10-06-16-31-41
âœ“ Contact created: 9b945aaf-f58d-4725-8304-ec2583a69bb5

Creating contact: Diana-2025-10-06-16-31-41 Prince-2025-10-06-16-31-41
âœ“ Contact created: abaf8cc9-14b4-4214-99a1-e6c3ee088df6

Creating contact: Peter-2025-10-06-16-31-41 Parker-2025-10-06-16-31-41
âœ“ Contact created: 7da8c234-4973-44f9-9b25-328290c004c8

Creating contact: Clark-2025-10-06-16-31-41 Kent-2025-10-06-16-31-41
âœ“ Contact created: 91b4ac48-c5fa-4cab-a317-23a6cb7dd124

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-41
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.763s
user    0m0.220s
sys     0m0.124s
Mon Oct  6 04:31:42 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-43

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-43
âœ“ Tag created: 89a54706-900b-4938-a674-69bddc4d387b
Creating tag: VIP-2025-10-06-16-31-43
âœ“ Tag created: b53c6ba2-d40a-4f88-ad11-6021c1284977
Creating tag: Follow-Up-2025-10-06-16-31-43
âœ“ Tag created: bfdbb14d-028d-454c-981e-4e5438f795ba

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-43
âœ“ Group created: 49428f9b-78ae-4d84-96f3-d3d93cb5d350
Creating group: Colleagues-2025-10-06-16-31-43
âœ“ Group created: 09cffec8-be05-49fe-8eec-e1b764b178ff
Creating group: Friends-2025-10-06-16-31-43
âœ“ Group created: 62dcd58f-3f4f-458c-b0c9-cb75bb6947ff

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-43 West-2025-10-06-16-31-43
âœ“ Contact created: c1f7b27a-964c-4d0d-a64c-f28a7a9a2d09

Creating contact: Bruce-2025-10-06-16-31-43 Banner-2025-10-06-16-31-43
âœ“ Contact created: 0b105855-d4f0-48b2-b216-0af45f862e4a

Creating contact: Diana-2025-10-06-16-31-43 Prince-2025-10-06-16-31-43
âœ“ Contact created: d21bc4d1-389d-4b72-b13e-8cb77336e03f

Creating contact: Peter-2025-10-06-16-31-43 Parker-2025-10-06-16-31-43
âœ“ Contact created: a826017b-c9a6-4394-b544-4da0966eedb3

Creating contact: Clark-2025-10-06-16-31-43 Kent-2025-10-06-16-31-43
âœ“ Contact created: 1c259d65-1d22-4f73-a098-060ff6c0d630

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-43
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.779s
user    0m0.250s
sys     0m0.089s
Mon Oct  6 04:31:44 PM EDT 2025
=== Starting API Data Generation ===

Using timestamp: 2025-10-06-16-31-45

--- Creating Tags ---
Creating tag: Important-2025-10-06-16-31-45
âœ“ Tag created: 9b56a9d9-4917-4811-8e93-12857ec0b594
Creating tag: VIP-2025-10-06-16-31-45
âœ“ Tag created: cd909093-0c38-4be2-92b2-39f2c49ae247
Creating tag: Follow-Up-2025-10-06-16-31-45
âœ“ Tag created: d1fea501-8e3a-4a99-8e0d-24ec679a624f

--- Creating Groups ---
Creating group: Family-2025-10-06-16-31-45
âœ“ Group created: efe87f92-0965-46af-a38c-2c90a2c04371
Creating group: Colleagues-2025-10-06-16-31-45
âœ“ Group created: 759e686f-17d0-4f6a-bd0d-e0224831d68f
Creating group: Friends-2025-10-06-16-31-45
âœ“ Group created: 45efbd55-17c5-4e5c-bdd3-420240e47781

--- Creating Contacts ---
Creating contact: Adam-2025-10-06-16-31-45 West-2025-10-06-16-31-45
âœ“ Contact created: 6494fd36-7690-48fa-909c-2713802e9ca3

Creating contact: Bruce-2025-10-06-16-31-45 Banner-2025-10-06-16-31-45
âœ“ Contact created: dc62d273-b76e-4e88-bbea-caa2afa084d3

Creating contact: Diana-2025-10-06-16-31-45 Prince-2025-10-06-16-31-45
âœ“ Contact created: 1399d9c7-ddee-4206-b1dd-fd2ffa12189e

Creating contact: Peter-2025-10-06-16-31-45 Parker-2025-10-06-16-31-45
âœ“ Contact created: 2c9624dd-61b5-43e4-a3e3-21703388a0b8

Creating contact: Clark-2025-10-06-16-31-45 Kent-2025-10-06-16-31-45
âœ“ Contact created: ce3a69b3-7dc1-48c8-a60b-dfe167609a8d

=== Data Generation Complete ===

Summary:
Timestamp used: 2025-10-06-16-31-45
Tags created: 3
Groups created: 3
Contacts created: 5

All data has been inserted successfully!

real    0m0.786s
user    0m0.216s
sys     0m0.114s
Mon Oct  6 04:31:45 PM EDT 2025

real    0m17.723s
user    0m2.351s
sys     0m1.055s
kushal@texas:~$



Perfect! Your API is performing excellently on the freshly deployed Virginia server. Let's analyze these results:

## Performance Metrics

**Sustained Load Test (10 iterations):**
- **Average time per batch**: ~760-800ms
- **Consistency**: Extremely stable (755ms - 801ms range)
- **Operations per batch**: 11 API calls (3 tags + 3 groups + 5 contacts)
- **Total throughput**: ~14 operations/second sustained

**What This Proves:**
1. **Database warm-up is working** - No performance degradation over time
2. **Connection pooling is healthy** - Consistent response times
3. **Transaction handling is solid** - All creates succeeding with proper relationships
4. **Container stability** - Running smoothly after the fresh deployment

## Data Created

In just 17.7 seconds, you successfully created:
- **30 tags** (10 batches Ã— 3 tags)
- **30 groups** (10 batches Ã— 3 groups)
- **50 contacts** (10 batches Ã— 5 contacts with full details)
- **Each contact** includes 2 email addresses, 2 phone numbers, 2 physical addresses, plus group/tag associations

That's **110 database entities** with complex relationships, all created in under 18 seconds!

## What's Notable

1. **Sub-second batch processing** - Your API is handling complex nested object creation incredibly efficiently
2. **No timeouts or errors** - 100% success rate across all 110 operations
3. **Network latency is minimal** - Texas â†’ Virginia at ~760ms for 11 sequential API calls shows good network performance
4. **EF Core is performing well** - The relationship tracking and cascade saves are working properly

The freshly deployed containers from the 95-commit update are running like a champ! The centralized package management and updated configurations are clearly working well.









================================================================================
FILE: docs\log-sample.txt
SIZE: 27.34 KB
MODIFIED: 10/08/2025 14:22:44
================================================================================

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\kushal> git --version
git version 2.51.0.windows.1
PS C:\Users\kushal> winget
Windows Package Manager v1.11.510
Copyright (c) Microsoft Corporation. All rights reserved.

The winget command line utility enables installing applications and other packages from the command line.

usage: winget  [<command>] [<options>]

The following commands are available:
  install    Installs the given package
  show       Shows information about a package
  source     Manage sources of packages
  search     Find and show basic info of packages
  list       Display installed packages
  upgrade    Shows and performs available upgrades
  uninstall  Uninstalls the given package
  hash       Helper to hash installer files
  validate   Validates a manifest file
  settings   Open settings or set administrator settings
  features   Shows the status of experimental features
  export     Exports a list of the installed packages
  import     Installs all the packages in a file
  pin        Manage package pins
  configure  Configures the system into a desired state
  download   Downloads the installer from a given package
  repair     Repairs the selected package
  dscv3      DSC v3 resource commands

For more details on a specific command, pass it the help argument. [-?]

The following options are available:
  -v,--version                Display the version of the tool
  --info                      Display general info of the tool
  -?,--help                   Shows help about the selected command
  --wait                      Prompts the user to press any key before exiting
  --logs,--open-logs          Open the default logs location
  --verbose,--verbose-logs    Enables verbose logging for winget
  --nowarn,--ignore-warnings  Suppresses warning outputs
  --disable-interactivity     Disable interactive prompts
  --proxy                     Set a proxy to use for this execution
  --no-proxy                  Disable the use of proxy for this execution

More help can be found at: https://aka.ms/winget-command-help
PS C:\Users\kushal> winget search git
The `msstore` source requires that you view the following agreements before using.
Terms of Transaction: https://aka.ms/microsoft-store-terms-of-transaction
The source requires the current machine's 2-letter geographic region to be sent to the backend service to function properly (ex. "US").

Do you agree to all the source agreements terms?
[Y] Yes  [N] No: y
Name                                  Id                              Version      Match    Source
---------------------------------------------------------------------------------------------------
My Git                                9NLVK2SL2SSP                    Unknown               msstore
GitFiend                              9NMNKLTSZNKC                    Unknown               msstore
GitLooker                             9PK6TGX9T87P                    Unknown               msstore
Git                                   Git.Git                         2.51.0.2              winget
Git                                   Microsoft.Git                   2.51.0.0.3            winget
RepoZ                                 AndreasWascher.RepoZ            5.5          Tag: git winget
Araxis Merge                          Araxis.Merge                    2025.1       Tag: git winget
Sourcetree                            Atlassian.Sourcetree            3.4.26       Tag: git winget
GitKraken                             Axosoft.GitKraken               11.4.0       Tag: git winget
Commitly                              Commitly.Commitly               1.1.2        Tag: git winget
ä¸­æ–‡Git                               DuckStudio.ChineseGit           3.3          Tag: git winget
Fork - a fast and friendly git client Fork.Fork                       2.12.2       Tag: git winget
GLab                                  GLab.GLab                       1.73.0       Tag: git winget
MinGit                                Git.MinGit                      2.51.0.2     Tag: git winget
BusyBox-based MinGit                  Git.MinGit.BusyBox              2.50.1       Tag: git winget
GitButler                             GitButler.GitButler             0.16.8       Tag: git winget
Git Extensions                        GitExtensionsTeam.GitExtensions 5.2.1.18061  Tag: git winget
GitHub Desktop                        GitHub.GitHubDesktop            3.5.3        Tag: git winget
GitHub Desktop Beta                   GitHub.GitHubDesktop.Beta       3.4.17-beta3 Tag: git winget
Git LFS                               GitHub.GitLFS                   3.7.0        Tag: git winget
GitHub CLI                            GitHub.cli                      2.81.0       Tag: git winget
git-sizer                             GitHub.git-sizer                1.5.0        Tag: git winget
smimesign                             GitHub.smimesign                0.2.0-rc1    Tag: git winget
GitTools GitVersion                   GitTools.GitVersion             6.4.0        Tag: git winget
Gitleaks                              Gitleaks.Gitleaks               8.28.0       Tag: git winget
jreleaser                             JReleaser.jreleaser             1.20.0       Tag: git winget
Oh My Posh                            JanDeDobbeleer.OhMyPosh         27.1.2       Tag: git winget
lazygit                               JesseDuffield.lazygit           0.55.1       Tag: git winget
JetBrains Space                       JetBrains.Space                 2023.1.7     Tag: git winget
Gittyup                               Murmele.Gittyup                 1.4.0        Tag: git winget
GitBlade                              Pirinel.GitBlade                00.00.8.9    Tag: git winget
RelaGit                               Rela.RelaGit                    0.16.9       Tag: git winget
Tower                                 SaaSGroup.Tower                 9.3.532      Tag: git winget
PullWatch                             ShipDigital.PullWatch           1.7.13       Tag: git winget
gitui                                 StephanDilly.gitui              0.27.0       Tag: git winget
Sublime Merge                         SublimeHQ.SublimeMerge          2112         Tag: git winget
Sublime Merge (Dev)                   SublimeHQ.SublimeMerge.Dev      2057         Tag: git winget
Talisman                              Thoughtworks.Talisman           1.37.0       Tag: git winget
GitFiend                              TobySuggate.GitFiend            0.45.3       Tag: git winget
TortoiseGit                           TortoiseGit.TortoiseGit         2.17.0.2     Tag: git winget
TortoiseSVN                           TortoiseSVN.TortoiseSVN         1.14.9.29743 Tag: git winget
Agent Git                             Xidicone.AgentGit               1.88         Tag: git winget
Gource                                acaudwell.Gource                0.53         Tag: git winget
GitQL                                 amrdeveloper.gitql              0.37.0       Tag: git winget
soft-serve                            charmbracelet.soft-serve        0.10.0       Tag: git winget
delta                                 dandavison.delta                0.18.2       Tag: git winget
dev-sidecar                           docmirror.dev-sidecar           2.0.0        Tag: git winget
Lefthook                              evilmartians.lefthook           1.13.6       Tag: git winget
git-cola                              git-cola.git-cola               4.15.0       Tag: git winget
gittuf                                gittuf.gittuf                   0.12.0       Tag: git winget
git-credential-azure                  hickford.git-credential-azure   0.3.1        Tag: git winget
git-credential-oauth                  hickford.git-credential-oauth   0.16.0       Tag: git winget
jj                                    jj-vcs.jj                       0.34.0       Tag: git winget
BlastMerge                            ktsu.BlastMerge                 1.0.19       Tag: git winget
jj                                    martinvonz.jj                   0.30.0       Tag: git winget
onefetch                              o2sh.onefetch                   2.25.0       Tag: git winget
git-cliff                             orhun.git-cliff                 2.10.1       Tag: git winget
git-age                               prskr.git-age                   0.2.4        Tag: git winget
git-absorb                            tummychow.git-absorb            0.8.0        Tag: git winget
ghq                                   x-motemen.ghq                   1.8.0        Tag: git winget
GitNote                               zhaopengme.gitnote              3.1.0        Tag: git winget
Fundels                               CartamundiDigital.Fundels       3.2.8                 winget
FastGithub                            CoolPlayLin.FastGithub          2.1.4                 winget
MaxTo                                 DigitalCreations.MaxTo          2.2.1                 winget
DD-TV                                 DigitalDevices.DD-TV            1.15.0.0              winget
Soulframe                             DigitalExtremes.Soulframe       1.0.0                 winget
Warframe                              DigitalExtremes.Warframe        1.0.0                 winget
doctl                                 DigitalOcean.Doctl              1.145.0               winget
Tropy                                 DigitalScholar.Tropy            1.16.2                winget
Zotero                                DigitalScholar.Zotero           7.0.24                winget
Papers                                DigitalScience.Papers           4.37.2395             winget
Duplicate Cleaner Free 4              DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.2                 winget
Duplicate Cleaner Pro 4               DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.4                 winget
Duplicate Cleaner Pro 5               DigitalVolcanoSoftware.Duplicaâ€¦ 5.25.0.0              winget
Hash Tool                             DigitalVolcanoSoftware.HashTool 1.2.1                 winget
TaskCanvas                            DigitalVolcanoSoftware.TaskCanâ€¦ 1.4                   winget
TextCrawler Free                      DigitalVolcanoSoftware.TextCraâ€¦ 3.1.2                 winget
TextCrawler Pro                       DigitalVolcanoSoftware.TextCraâ€¦ 3.1.3                 winget
DQViewer                              DigiteqAutomotive.DQViewer      4.3                   winget
GitHub æ ‡ç­¾ç®¡ç†å™¨                     DuckStudio.GitHubLabelsManager  1.13                  winget
GitHubView                            DuckStudio.GitHubView           1.0.5                 winget
GitHubView (Nightly)                  DuckStudio.GitHubView.Nightly   2025.09.08.â€¦          winget
Git Credential Manager (User)         Git.GCM                         2.6.1                 winget
Git for Windows SDK                   Git.SDK                         1.0.8                 winget
GitAhead                              GitAhead.GitAhead               2.7.1                 winget
Atom                                  GitHub.Atom                     1.60.0                winget
Atom Beta                             GitHub.Atom.Beta                1.61.0-beta0          winget
classroom-assistant                   GitHub.ClassroomAssistant       2.0.4                 winget
hub                                   GitHub.hub                      2.14.2                winget
GitKraken CLI                         GitKraken.cli                   3.1.40                winget
tea                                   Gitea.tea                       0.9.2                 winget
Gitify                                Gitify.Gitify                   6.9.1                 winget
GitLab Runner                         Gitlab.Runner                   18.4.0                winget
AnimeBack                             LeGitHubDeTai.AnimeBack         8.0.9                 winget
Lingdys 4                             LingitAS.Lingdys4               4.5.149.0             winget
Logitech Camera Settings              Logitech.CameraSettings         2.12.20.0             winget
Logitech Gamepad F710 Connection Utiâ€¦ Logitech.F710ConnectUtility     2.15.264              winget
Logitech G HUB                        Logitech.GHUB                   2025.7.7683â€¦          winget
Logitech Gaming Software              Logitech.LGS                    9.04.49               winget
Logi Bolt                             Logitech.LogiBolt               1.2.6024.0            winget
Logi Tune                             Logitech.LogiTune               3.11.89.0             winget
MyHarmony                             Logitech.MyHarmony              1.0.308               winget
Logitech Onboard Memory Manager       Logitech.OnboardMemoryManager   2.5.358               winget
Logitech Options                      Logitech.Options                10.26.12              winget
Logi Options+                         Logitech.OptionsPlus            1.96.781095           winget
Logitech Presentation                 Logitech.Presentation           2.10.34               winget
Logitech SetPoint                     Logitech.SetPoint               6.90.66               winget
Logitech Solar App                    Logitech.Solar                  1.20.28               winget
Logitech Sync                         Logitech.Sync                   3.8.254.0             winget
Logitech Unifying Software            Logitech.UnifyingSoftware       2.52.33               winget
GitHub extension for Command Palette  Microsoft.CmdPalGitHubExtension 0.103.178.0           winget
GVFS                                  Microsoft.VFSforGit             1.0.25169.1           winget
Reduce Audio Latency                  MiniantGit.REAL                 0.2.0                 winget
ISY Linker                            NorconsultDigital.ISYLinker     11.6.0.0              winget
Igitt                                 Nstr.Igitt                      v0.1.13               winget
GitHubReleaseNotes                    StefHeyenrath.GitHubReleaseNotâ€¦ 1.0.10.1              winget
SmartGit                              Syntevo.SmartGit                24.1.3                winget
Snagit 2020                           TechSmith.Snagit.2020           20.1.8.16558          winget
Snagit 2021                           TechSmith.Snagit.2021           21.4.7                winget
Snagit 2022                           TechSmith.Snagit.2022           22.1.7                winget
Snagit 2023                           TechSmith.Snagit.2023           23.2.6                winget
Snagit 2024                           TechSmith.Snagit.2024           24.3.4                winget
Snagit 2025                           TechSmith.Snagit.2025           25.3.1                winget
Fusion Digital Power Designer         TexasInstruments.FusionDigitalâ€¦ 7.10.1                winget
Kitfox                                WesternDigital.Kitfox           1.1.1.1               winget
WD Security                           WesternDigital.Security         2.1.4.358             winget
WimyGit                               Wimysoft.WimyGit                1.2.0                 winget
gitsqlite                             danielsiegl.gitsqlite           0.8.0                 winget
poke-cli                              digitalghost-dev.poke-cli       1.5.2                 winget
Thermal                               gitthermal.thermal              0.0.4                 winget
gitg                                  gnome.gitg                      41                    winget
Upgit                                 pluveto.Upgit                   0.2.18                winget
Dragit                                sireliah.dragit                 0.7.1                 winget
SourceGit                             sourcegit-scm.SourceGit         2025.35               winget
git-grab                              wezm.git-grab                   3.0.0                 winget
regit                                 woaitsAryan.regit               0.4.2                 winget
WSJT-X: Digital Modes for Weak Signaâ€¦ JoeTaylor.WSJT-X                2.7.0                 winget
IPVTest                               Vipre.IPVTest                   1.0.0.0      Commandâ€¦ winget
Adobe DNG Converter                   Adobe.DNGConverter              17.5.1       Tag: diâ€¦ winget
ç™¾åº¦è¯­éŸ³è¾“å…¥                          Baidu.BaiduSpeechInput          2.0.0.33     Tag: loâ€¦ winget
CloudShow Launcher                    BinaryFortress.CloudShow        6.5.0.0      Tag: diâ€¦ winget
Dragonframe 2025                      DZEDSystems.Dragonframe         2025.05.4    Tag: diâ€¦ winget
NVC VHDL Simulator                    NickGasson.NVC                  1.18.0       Tag: diâ€¦ winget
Logisim-evolution                     logisim-evolution.logisim-evolâ€¦ 3.9.0        Tag: diâ€¦ winget
Bit4id - Firma4ng-InfoCamere          Bit4id.Firma4ng.InfoCamere      1.6.14       Tag: diâ€¦ winget
DigiDoc4 Client                       RIA.DigiDoc4                    4.8.2        Tag: diâ€¦ winget
eID software                          RIA.eIDsoftware                 25.8.18.8398 Tag: diâ€¦ winget
WSL Manager                           Bostrot.WSLManager              1.8.17       Tag: giâ€¦ winget
DRA                                   CosimoMatteini.DRA              0.9.0        Tag: giâ€¦ winget
Lepton                                CosmoX.Lepton                   1.10.0       Tag: giâ€¦ winget
AppInstaller File Builder(Preview)    Microsoft.AppInstallerFileBuilâ€¦ 1.2020.221.0 Tag: giâ€¦ winget
Cacher                                PenguinLabs.Cacher              2.43.2       Tag: giâ€¦ winget
Eget                                  ZacharyYedidia.Eget             1.3.4        Tag: giâ€¦ winget
MarkRight                             dvcrn.markright                 0.1.11       Tag: giâ€¦ winget
grp                                   feraxhp.grp                     0.7.4        Tag: giâ€¦ winget
act                                   nektos.act                      0.2.81       Tag: giâ€¦ winget
REAPER                                Cockos.REAPER                   7.48         Tag: diâ€¦ winget
LMMS                                  LMMS.LMMS                       1.2.2        Tag: diâ€¦ winget
Renoise                               Renoise.Renoise                 3.4.4        Tag: diâ€¦ winget
YYè°ƒéŸ³å°                              YY.YYAudio                      1.23.4.0     Tag: diâ€¦ winget
DAWG                                  dawg.dawg                       0.2.3        Tag: diâ€¦ winget
Corsair iCUE5 Software                Corsair.iCUE.5                  5.34.66      Tag: coâ€¦ winget
Dolt                                  DoltHub.Dolt                    1.59.18      Tag: giâ€¦ winget
Gridea                                EryouHao.Gridea                 0.9.3        Tag: giâ€¦ winget
Flux                                  FluxCD.Flux                     2.7.0        Tag: giâ€¦ winget
Cobalt SSG                            cobalt-org.cobalt               0.20.0       Tag: giâ€¦ winget
Ferium                                GorillaDevs.Ferium              4.7.1        Tag: giâ€¦ winget
VEC DigiLib                           LAVANJV.vecdigilib              1.0.0        Tag: diâ€¦ winget
HeadsetControl-GUI                    LeoKlaus.HeadsetControl-GUI     0.19.5       Tag: Loâ€¦ winget
OpenHantek6022                        OpenHantek.OpenHantek6022       3.4.0        Tag: diâ€¦ winget
ChanSort                              PredatH0r.ChanSort              2025-03-08   Tag: diâ€¦ winget
RescueTime                            RescueTime.DesktopApp           3.2.11.5     Tag: diâ€¦ winget
SatDump                               SatDump.SatDump                 1.2.2        Tag: diâ€¦ winget
ArtHub                                Tencent.ArtHub                  1.18.0       Tag: diâ€¦ winget
WK Radar                              WK.WKRadar                      7.16.0       Tag: Baâ€¦ winget
FileQL                                amrdeveloper.fileql             0.10.0       Tag: giâ€¦ winget
direnv                                direnv.direnv                   2.37.1       Tag: giâ€¦ winget
score                                 ossia.score                     3.7.1        Tag: diâ€¦ winget
actionlint                            rhysd.actionlint                1.7.7        Tag: giâ€¦ winget
PS3 Media Server                      shagrath.PS3MediaServer         1.90.1       Tag: diâ€¦ winget
SoX_ng                                sox_ng.sox_ng                   14.6.0.4     Tag: diâ€¦ winget
xploview                              xploview.xploview               3.3.31       Tag: diâ€¦ winget
PS C:\Users\kushal> winget list Git.Git
Name Id      Version Available Source
-------------------------------------
Git  Git.Git 2.51.0  2.51.0.2  winget
PS C:\Users\kushal> winget show Git.Git
Found Git [Git.Git]
Version: 2.51.0.2
Publisher: The Git Development Community
Publisher Url: https://gitforwindows.org/
Publisher Support Url: https://github.com/git-for-windows/git/issues
Moniker: git
Description:
  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
  Git for Windows focuses on offering a lightweight, native set of tools that bring the full feature set of the Git SCM to Windows while providing appropriate user interfaces for experienced Git users and novices alike.
Homepage: https://gitforwindows.org/
License: GPL-2.0
License Url: https://github.com/git-for-windows/build-extra/blob/HEAD/LICENSE.txt
Copyright: Copyright (C) 1989, 1991 Free Software Foundation, Inc.
Release Notes:
  Changes since Git for Windows v2.51.0 (August 19th 2025)
  New Features
  - Comes with PCRE2 v10.46.
  - Comes with cURL v8.16.0. This addresses a bug where fetches/pushes could fail with failed to read data from server: SEC_E_CONTEXT_EXPIRED (0x80090317) under certain circumstances. Also included: a back-port of a fix for a bug where connection failures were mistakenly reported as time-outs.
  - Comes with Tig v2.6.0.
  - Comes with MinTTY v3.8.1.
  - Comes with OpenSSL v3.5.3.
  Bug Fixes
  - The auto-updater now shows Git for Windows icon in the notification also on Windows/ARM64.
  - git clone/git fetch now deals more gracefully with directory / file conflicts when the files backend is used for ref storage, by failing only the ones that are involved in the conflict while allowing others. This is a regression in Git v2.51.0 that was reported in Git for Windows and independently also to the Git mailing list. This was fixed by merging Git's topic branch kn/refs-files-case-insensitive.
  - Support for pathspecs in diff --no-index was somewhat buggy, which has been fixed.
  - git sparse-checkout subcommand learned a new clean action to prune otherwise unused working-tree files that are outside the areas of interest. An earlier version of this had been integrated into MicrosoftGit already. This was fixed by merging Git's topic branch ds/sparse-checkout-clean.
  - git rebase -i failed to clean-up the commit log message when the command commits the final one in a chain of "fixup" commands, which has been corrected. Backported from Git's topic branch pw/rebase-i-cleanup-fix.
  - git subtree did not work correctly when splitting squashed subtrees, which has been improved. Backported from Git's topic branch cs/subtree-squash-split-fix.
  - Some among git add -p and friends ignored color.diff and/or color.ui configuration variables, which is an old regression, which has been corrected. This was fixed by merging Git's topic branch jk/add-i-color.
  - A corner-case bug in git log -L... has been corrected. This was fixed by merging Git's topic branch sg/line-log-boundary-fixes.
  - A broken or malicious git fetch can say that it has the same object for many many times, and the upload-pack serving it can exhaust memory storing them redundantly, which has been corrected. This was fixed by merging Git's topic branch ps/upload-pack-oom-protection.
  - Fixes multiple crashes around midx write-out codepaths. This was fixed by merging Git's topic branch ds/midx-write-fixes.
  - git repack --path-walk lost objects in some corner cases, which has been corrected. This was fixed by merging Git's topic branch ds/path-walk-repack-fix.
  - Under a race against another process that is repacking the repository, especially a partially cloned one, git fetch may mistakenly think some objects we do have are missing, which has been corrected. Thiswas fixed by merging Git's topic branch jk/fetch-check-graph-objects-fix.
  - Various options to git diff that makes comparison ignore certain aspects of the differences (like "space changes are ignored", "differences in lines that match these regular expressions are ignored") did not work well with --name-only and friends. This was fixed by merging Git's topic branch ly/diff-name-only-with-diff-from-content.
  - git diff --no-index run inside a subdirectory under control of a Git repository operated at the top of the working tree and stripped the prefix from the output, and oddballs like "-" (stdin) did not work correctly because of it. Correct the set-up by undoing what the set-up sequence did to the current working directory and prefix. This was fixed by merging Git's topic branch jc/diff-no-index-in-subdir.
  - Various bugs about rename handling in "ort" merge strategy have been fixed. This was fixed by merging Git's topic branch en/ort-rename-fixes.
  - git push had a code path that led to BUG() but it should have reported a regular failure, as it is a response to a usual but invalid end-user action to attempt pushing an object that does not exist. This was fixed by merging Git's topic branch dl/push-missing-object-error.
  - git refs migrate to migrate the reflog entries from a refs backend to another had a handful of bugs squashed. This was fixed by merging Git's topic branch ps/reflog-migrate-fixes.
  - During interactive rebase, using drop on a merge commit lead to an error, which was incorrect. This was fixed by merging Git's topic branch js/rebase-i-allow-drop-on-a-merge.
Release Notes Url: https://github.com/git-for-windows/git/releases/tag/v2.51.0.windows.2
Documentation:
  Wiki: https://github.com/git-for-windows/git/wiki
Tags:
  git
  vcs
Installer:
  Installer Type: inno
  Installer Url: https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  Installer SHA256: 5cf583441ccd8d98d3492936235b6ee30c6847d1b3f49365d6a025b3432094ad
  Release Date: 2025-09-29
  Offline Distribution Supported: true
PS C:\Users\kushal> winget install Git.Git
Found an existing package already installed. Trying to upgrade the installed package...
Found Git [Git.Git] Version 2.51.0.2
This application is licensed to you by its owner.
Microsoft is not responsible for, nor does it grant any licenses to, third-party packages.
Downloading https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  62.8 MB / 62.8 MB
Successfully verified installer hash
Starting package install...
The installer will request to run as administrator. Expect a prompt.
Successfully installed
PS C:\Users\kushal> git --version
git version 2.51.0.windows.2
PS C:\Users\kushal>


================================================================================
FILE: docs\scratch.md
SIZE: 459.92 KB
MODIFIED: 10/06/2025 12:44:27
================================================================================

? IMeterFactory is working!
LogRecord.Timestamp:               2025-10-06T16:33:34.4041174Z
LogRecord.CategoryName:            Program
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Checking for pending database migrations...
LogRecord.Body:                    Checking for pending database migrations...
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Checking for pending database migrations...

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.8501030Z
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (43ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 43
    parameters:
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.8987310Z
LogRecord.CategoryName:            Program
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Database is up to date - no migrations needed.
LogRecord.Body:                    Database is up to date - no migrations needed.
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Database is up to date - no migrations needed.

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.9026633Z
LogRecord.CategoryName:            MyOpenTelemetryApi.Api
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Starting MyOpenTelemetryApi version 1.0.0
LogRecord.Body:                    Starting {ServiceName} version {ServiceVersion}
LogRecord.Attributes (Key:Value):
    ServiceName: MyOpenTelemetryApi
    ServiceVersion: 1.0.0
    OriginalFormat (a.k.a Body): Starting {ServiceName} version {ServiceVersion}

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.9052545Z
LogRecord.CategoryName:            Microsoft.Extensions.Hosting.Internal.Host
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        Hosting starting
LogRecord.Body:                    Hosting starting
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Hosting starting
LogRecord.EventId:                 1
LogRecord.EventName:               Starting

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:35.9273056Z
LogRecord.CategoryName:            Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        User profile is available. Using 'C:\Users\kushal\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
LogRecord.Body:                    User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.
LogRecord.Attributes (Key:Value):
    FullName: C:\Users\kushal\AppData\Local\ASP.NET\DataProtection-Keys
    OriginalFormat (a.k.a Body): User profile is available. Using '{FullName}' as key repository and Windows DPAPI to encrypt keys at rest.
LogRecord.EventId:                 63
LogRecord.EventName:               UsingProfileAsKeyRepositoryWithDPAPI

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.0927627Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Now listening on: https://0.0.0.0:7034
LogRecord.Body:                    Now listening on: {address}
LogRecord.Attributes (Key:Value):
    address: https://0.0.0.0:7034
    OriginalFormat (a.k.a Body): Now listening on: {address}
LogRecord.EventId:                 14
LogRecord.EventName:               ListeningOnAddress

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.0944490Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Now listening on: http://0.0.0.0:5174
LogRecord.Body:                    Now listening on: {address}
LogRecord.Attributes (Key:Value):
    address: http://0.0.0.0:5174
    OriginalFormat (a.k.a Body): Now listening on: {address}
LogRecord.EventId:                 14
LogRecord.EventName:               ListeningOnAddress

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2265181Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Application started. Press Ctrl+C to shut down.
LogRecord.Body:                    Application started. Press Ctrl+C to shut down.
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Application started. Press Ctrl+C to shut down.

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2277895Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Hosting environment: Development
LogRecord.Body:                    Hosting environment: {EnvName}
LogRecord.Attributes (Key:Value):
    EnvName: Development
    OriginalFormat (a.k.a Body): Hosting environment: {EnvName}

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2290801Z
LogRecord.CategoryName:            Microsoft.Hosting.Lifetime
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Content root path: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\src\MyOpenTelemetryApi.Api
LogRecord.Body:                    Content root path: {ContentRoot}
LogRecord.Attributes (Key:Value):
    ContentRoot: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\src\MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Content root path: {ContentRoot}

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:33:36.2302167Z
LogRecord.CategoryName:            Microsoft.Extensions.Hosting.Internal.Host
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        Hosting started
LogRecord.Body:                    Hosting started
LogRecord.Attributes (Key:Value):
    OriginalFormat (a.k.a Body): Hosting started
LogRecord.EventId:                 2
LogRecord.EventName:               Started

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Resource associated with Metrics:
        service.name: MyOpenTelemetryApi
        service.version: 1.0.0
        service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
        telemetry.sdk.name: opentelemetry
        telemetry.sdk.language: dotnet
        telemetry.sdk.version: 1.13.0

Metric Name: process.memory.usage, Description: The amount of physical memory in use., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9639090Z, 2025-10-06T16:33:45.9803578Z]
Value: 144506880

Metric Name: process.memory.virtual, Description: The amount of committed virtual memory., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9649870Z, 2025-10-06T16:33:45.9804149Z]
Value: 2481056284672

Metric Name: process.cpu.time, Description: Total CPU seconds broken down by different states., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:33:45.9804481Z] process.cpu.state: user
Value: 2
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:33:45.9804481Z] process.cpu.state: system
Value: 0.328125

Metric Name: process.cpu.count, Description: The number of processors (CPU cores) available to the current process., Unit: {processors}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652277Z, 2025-10-06T16:33:45.9804485Z]
Value: 12

Metric Name: process.thread.count, Description: Process threads count., Unit: {thread}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652369Z, 2025-10-06T16:33:45.9804487Z]
Value: 36

Metric Name: dotnet.gc.collections, Description: The number of garbage collections that have occurred since the process has started., Unit: {collection}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:33:45.9804535Z] gc.heap.generation: gen2
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:33:45.9804535Z] gc.heap.generation: gen1
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:33:45.9804535Z] gc.heap.generation: gen0
Value: 2

Metric Name: dotnet.process.memory.working_set, Description: The number of bytes of physical memory mapped to the process context., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665548Z, 2025-10-06T16:33:45.9804541Z]
Value: 144031744

Metric Name: dotnet.gc.heap.total_allocated, Description: The approximate number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665597Z, 2025-10-06T16:33:45.9804549Z]
Value: 25792880

Metric Name: dotnet.gc.last_collection.memory.committed_size, Description: The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665650Z, 2025-10-06T16:33:45.9804550Z]
Value: 13565952

Metric Name: dotnet.gc.last_collection.heap.size, Description: The managed GC heap size (including fragmentation), as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: gen1
Value: 1042568
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: gen2
Value: 3800856
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: loh
Value: 3270784
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:33:45.9804553Z] gc.heap.generation: poh
Value: 58240

Metric Name: dotnet.gc.last_collection.heap.fragmentation.size, Description: The heap fragmentation, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: gen1
Value: 602336
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: gen2
Value: 176104
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: loh
Value: 736
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:33:45.9804560Z] gc.heap.generation: poh
Value: 0

Metric Name: dotnet.gc.pause.time, Description: The total amount of time paused in GC since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701062Z, 2025-10-06T16:33:45.9804561Z]
Value: 0.014596

Metric Name: dotnet.jit.compiled_il.size, Description: Count of bytes of intermediate language that have been compiled since the process has started., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701174Z, 2025-10-06T16:33:45.9804564Z]
Value: 916699

Metric Name: dotnet.jit.compiled_methods, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: {method}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701251Z, 2025-10-06T16:33:45.9804567Z]
Value: 12367

Metric Name: dotnet.jit.compilation.time, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701358Z, 2025-10-06T16:33:45.9804569Z]
Value: 1.993818

Metric Name: dotnet.monitor.lock_contentions, Description: The number of times there was contention when trying to acquire a monitor lock since the process has started., Unit: {contention}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701429Z, 2025-10-06T16:33:45.9804571Z]
Value: 0

Metric Name: dotnet.thread_pool.thread.count, Description: The number of thread pool threads that currently exist., Unit: {thread}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701527Z, 2025-10-06T16:33:45.9804573Z]
Value: 3

Metric Name: dotnet.thread_pool.work_item.count, Description: The number of work items that the thread pool has completed since the process has started., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701694Z, 2025-10-06T16:33:45.9804576Z]
Value: 55

Metric Name: dotnet.thread_pool.queue.length, Description: The number of work items that are currently queued to be processed by the thread pool., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701765Z, 2025-10-06T16:33:45.9804577Z]
Value: 0

Metric Name: dotnet.timer.count, Description: The number of timer instances that are currently active. An active timer is registered to tick at some point in the future and has not yet been canceled., Unit: {timer}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701834Z, 2025-10-06T16:33:45.9804579Z]
Value: 2

Metric Name: dotnet.assembly.count, Description: The number of .NET assemblies that are currently loaded., Unit: {assembly}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701915Z, 2025-10-06T16:33:45.9804581Z]
Value: 166

Metric Name: dotnet.process.cpu.count, Description: The number of processors available to the process., Unit: {cpu}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702055Z, 2025-10-06T16:33:45.9804585Z]
Value: 12

Metric Name: dotnet.process.cpu.time, Description: CPU time used by the process., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:33:45.9804587Z] cpu.mode: user
Value: 2
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:33:45.9804587Z] cpu.mode: system
Value: 0.328125




telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.6839161Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:09.6990249Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:09.7146467Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.7164605Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4c449f62eb5bc2bb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Clark-2025-10-06-12-34-08 Kent-2025-10-06-12-34-08
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Clark-2025-10-06-12-34-08
    LastName: Kent-2025-10-06-12-34-08
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4c449f62eb5bc2bb
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4224077fb37c326a
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.7568904Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  d5d024d06d8514c7
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d5d024d06d8514c7
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             d5d024d06d8514c7
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.7195725Z
Activity.Duration:           00:00:00.0393317
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.7962021Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  6069410fb8208d07
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 6069410fb8208d07
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             6069410fb8208d07
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.7604552Z
Activity.Duration:           00:00:00.0378957
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.8331042Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  dc16ab0ee4c15ea7
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: dc16ab0ee4c15ea7
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             dc16ab0ee4c15ea7
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.7999103Z
Activity.Duration:           00:00:00.0349990
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.8648049Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  78572cc5edb3e614
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78572cc5edb3e614
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             78572cc5edb3e614
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.8363253Z
Activity.Duration:           00:00:00.0306323
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9043119Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  23278b4467e8bdae
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 23278b4467e8bdae
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             23278b4467e8bdae
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.8684880Z
Activity.Duration:           00:00:00.0376292
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9450353Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  e37a7682b78d74e0
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e37a7682b78d74e0
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4c449f62eb5bc2bb
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             e37a7682b78d74e0
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4c449f62eb5bc2bb
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:09.9087772Z
Activity.Duration:           00:00:00.0387664
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9813362Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4c449f62eb5bc2bb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: a8d9b516-9cac-41a7-bc83-1aa2881914cb
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: a8d9b516-9cac-41a7-bc83-1aa2881914cb
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4c449f62eb5bc2bb
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 4224077fb37c326a
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             4c449f62eb5bc2bb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       4224077fb37c326a
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:09.7164456Z
Activity.Duration:           00:00:00.2667298
Activity.Tags:
    contact.id: a8d9b516-9cac-41a7-bc83-1aa2881914cb
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9839919Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 267.5585ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 267.5585
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9858624Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9877138Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 274.0214ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 274.0214
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:09.9894274Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            4b3564822ccf700b0381a54c1805afe9
Activity.SpanId:             4224077fb37c326a
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:09.6802572Z
Activity.Duration:           00:00:00.3383858
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1653
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:10.0199249Z
LogRecord.TraceId:                 4b3564822ccf700b0381a54c1805afe9
LogRecord.SpanId:                  4224077fb37c326a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 339.6959ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 339.6959
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4224077fb37c326a
[Scope.0]:TraceId: 4b3564822ccf700b0381a54c1805afe9
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FS
[Scope.2]:RequestId: 0HNG4UOLJ42FS:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.0656115Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Tags - application/json 70
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 70
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.0680831Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.0699798Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.0903279Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateTag", controller = "Tags"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto) on controller MyOpenTelemetryApi.Api.Controllers.TagsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateTag", controller = "Tags"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.TagsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.1049868Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1449385Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  651b1f1e76cdb1a8
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@ToLower='?'], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @ToLower='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 651b1f1e76cdb1a8
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 78f5eaaa0913ba39
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            db5fdbb9c07c46f1dc21fbc3c232fb80
Activity.SpanId:             651b1f1e76cdb1a8
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       78f5eaaa0913ba39
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.1077746Z
Activity.Duration:           00:00:00.0396427
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1852883Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  35c802f372ae001a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (35ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 35
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 35c802f372ae001a
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 78f5eaaa0913ba39
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            db5fdbb9c07c46f1dc21fbc3c232fb80
Activity.SpanId:             35c802f372ae001a
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       78f5eaaa0913ba39
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.1498660Z
Activity.Duration:           00:00:00.0373750
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1883871Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 81.7142ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 81.7142
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1901675Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.TagDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.TagDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1921255Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) in 87.8872ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 87.8872
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.1935876Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            db5fdbb9c07c46f1dc21fbc3c232fb80
Activity.SpanId:             78f5eaaa0913ba39
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.0655369Z
Activity.Duration:           00:00:00.1615848
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Tags
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 70
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2282421Z
LogRecord.TraceId:                 db5fdbb9c07c46f1dc21fbc3c232fb80
LogRecord.SpanId:                  78f5eaaa0913ba39
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Tags - 201 - application/json;+charset=utf-8 162.7393ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 162.7393
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 78f5eaaa0913ba39
[Scope.0]:TraceId: db5fdbb9c07c46f1dc21fbc3c232fb80
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FT
[Scope.2]:RequestId: 0HNG4UOLJ42FT:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2643889Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Tags - application/json 64
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 64
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2665379Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.2678249Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.2819281Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateTag", controller = "Tags"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto) on controller MyOpenTelemetryApi.Api.Controllers.TagsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateTag", controller = "Tags"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.TagsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.2955928Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3327119Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  d5187f7ff3e1f1e5
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (35ms) [Parameters=[@ToLower='?'], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 35
    parameters: @ToLower='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d5187f7ff3e1f1e5
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 421b614235180513
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            6fcbad8045a39b9b8037f618cd8b5b61
Activity.SpanId:             d5187f7ff3e1f1e5
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       421b614235180513
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.2980283Z
Activity.Duration:           00:00:00.0368509
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3693399Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  a4c36bf1a13ae21d
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: a4c36bf1a13ae21d
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 421b614235180513
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            6fcbad8045a39b9b8037f618cd8b5b61
Activity.SpanId:             a4c36bf1a13ae21d
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       421b614235180513
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.3363180Z
Activity.Duration:           00:00:00.0350569
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3728210Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 75.5427ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 75.5427
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3757415Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.TagDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.TagDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3785724Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) in 83.3405ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 83.3405
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.3803452Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            6fcbad8045a39b9b8037f618cd8b5b61
Activity.SpanId:             421b614235180513
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.2643275Z
Activity.Duration:           00:00:00.1463028
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Tags
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 64
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4129746Z
LogRecord.TraceId:                 6fcbad8045a39b9b8037f618cd8b5b61
LogRecord.SpanId:                  421b614235180513
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Tags - 201 - application/json;+charset=utf-8 148.6663ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 148.6663
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 421b614235180513
[Scope.0]:TraceId: 6fcbad8045a39b9b8037f618cd8b5b61
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FU
[Scope.2]:RequestId: 0HNG4UOLJ42FU:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4486610Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Tags - application/json 70
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 70
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4519730Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.4572056Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.4825831Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateTag", controller = "Tags"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto) on controller MyOpenTelemetryApi.Api.Controllers.TagsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateTag", controller = "Tags"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.TagDto]] CreateTag(MyOpenTelemetryApi.Application.DTOs.CreateTagDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.TagsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.5046610Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.5373121Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  1d6c0e899c0421c8
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (30ms) [Parameters=[@ToLower='?'], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 30
    parameters: @ToLower='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 1d6c0e899c0421c8
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: aadf37f55e526020
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f885f029c326eabaa10897aa1f4c7006
Activity.SpanId:             1d6c0e899c0421c8
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       aadf37f55e526020
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.5074837Z
Activity.Duration:           00:00:00.0353425
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE lower(t."Name") = @ToLower
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.5899896Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  4a3882155c03e349
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (41ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 41
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 4a3882155c03e349
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: aadf37f55e526020
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f885f029c326eabaa10897aa1f4c7006
Activity.SpanId:             4a3882155c03e349
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       aadf37f55e526020
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.5489362Z
Activity.Duration:           00:00:00.0505869
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Tags" ("Id", "ColorHex", "Name")
VALUES (@p0, @p1, @p2);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6037120Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 97.0085ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 97.0085
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6056763Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.TagDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.TagDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags
[Scope.3]:ActionId: 62f6f29f-d494-4e77-a8d5-4a409cfa0e80
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6090419Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api) in 104.7309ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 104.7309
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6108843Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.TagsController.CreateTag (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            f885f029c326eabaa10897aa1f4c7006
Activity.SpanId:             aadf37f55e526020
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.4486013Z
Activity.Duration:           00:00:00.1878070
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Tags
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 70
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6375856Z
LogRecord.TraceId:                 f885f029c326eabaa10897aa1f4c7006
LogRecord.SpanId:                  aadf37f55e526020
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Tags - 201 - application/json;+charset=utf-8 189.0047ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 189.0047
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Tags
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: aadf37f55e526020
[Scope.0]:TraceId: f885f029c326eabaa10897aa1f4c7006
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42FV
[Scope.2]:RequestId: 0HNG4UOLJ42FV:00000001
[Scope.2]:RequestPath: /api/Tags

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6723295Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Groups - application/json 97
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 97
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6744792Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.6758280Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.6925858Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateGroup", controller = "Groups"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto) on controller MyOpenTelemetryApi.Api.Controllers.GroupsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateGroup", controller = "Groups"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.GroupsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.7070046Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7454536Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  b55ca84adffb4a6f
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: b55ca84adffb4a6f
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 7db78b5accf72123
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            2b176c81879325abbe3af256b491661f
Activity.SpanId:             b55ca84adffb4a6f
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       7db78b5accf72123
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.7091241Z
Activity.Duration:           00:00:00.0384760
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7487326Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 40.3082ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 40.3082
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7504633Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.GroupDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.GroupDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7525521Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) in 45.8987ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 45.8987
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7542401Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            2b176c81879325abbe3af256b491661f
Activity.SpanId:             7db78b5accf72123
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.6722869Z
Activity.Duration:           00:00:00.1080068
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Groups
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 97
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.7814581Z
LogRecord.TraceId:                 2b176c81879325abbe3af256b491661f
LogRecord.SpanId:                  7db78b5accf72123
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Groups - 201 - application/json;+charset=utf-8 109.1910ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 109.191
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7db78b5accf72123
[Scope.0]:TraceId: 2b176c81879325abbe3af256b491661f
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G0
[Scope.2]:RequestId: 0HNG4UOLJ42G0:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8155177Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Groups - application/json 102
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 102
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8176742Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8192043Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.8343339Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateGroup", controller = "Groups"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto) on controller MyOpenTelemetryApi.Api.Controllers.GroupsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateGroup", controller = "Groups"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.GroupsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.8482438Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8823072Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  53a05d87ddbdf87e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (31ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 31
    parameters: @p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 53a05d87ddbdf87e
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: f0f02a5242946b80
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            43a3232968aafe4ccfaeb429e272aa0c
Activity.SpanId:             53a05d87ddbdf87e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       f0f02a5242946b80
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.8516455Z
Activity.Duration:           00:00:00.0323961
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8852256Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 34.4916ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 34.4916
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8868816Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.GroupDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.GroupDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8885982Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) in 40.739ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 40.739
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.8901127Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            43a3232968aafe4ccfaeb429e272aa0c
Activity.SpanId:             f0f02a5242946b80
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.8154690Z
Activity.Duration:           00:00:00.1005605
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Groups
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 102
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9180500Z
LogRecord.TraceId:                 43a3232968aafe4ccfaeb429e272aa0c
LogRecord.SpanId:                  f0f02a5242946b80
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Groups - 201 - application/json;+charset=utf-8 102.6177ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 102.6177
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f0f02a5242946b80
[Scope.0]:TraceId: 43a3232968aafe4ccfaeb429e272aa0c
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G1
[Scope.2]:RequestId: 0HNG4UOLJ42G1:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9534752Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Groups - application/json 97
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 97
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9557754Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:11.9573495Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:11.9724222Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateGroup", controller = "Groups"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto) on controller MyOpenTelemetryApi.Api.Controllers.GroupsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateGroup", controller = "Groups"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.GroupDto]] CreateGroup(MyOpenTelemetryApi.Application.DTOs.CreateGroupDto)
    Controller: MyOpenTelemetryApi.Api.Controllers.GroupsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:11.9879636Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0207489Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  8162065aebafca72
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (30ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 30
    parameters: @p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?', @p3='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 8162065aebafca72
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 42d42f2dcbf83858
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            cf4ae675c8a05f00941ce07ae8288f00
Activity.SpanId:             8162065aebafca72
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       42d42f2dcbf83858
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:11.9910252Z
Activity.Duration:           00:00:00.0316057
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Groups" ("Id", "CreatedAt", "Description", "Name")
VALUES (@p0, @p1, @p2, @p3);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0236045Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 33.4892ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 33.4892
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0250815Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.GroupDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.GroupDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups
[Scope.3]:ActionId: 4dc0a742-1b5e-4e7e-8df2-8aa831de1a51
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0265898Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api) in 39.0038ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 39.0038
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0286293Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.GroupsController.CreateGroup (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            cf4ae675c8a05f00941ce07ae8288f00
Activity.SpanId:             42d42f2dcbf83858
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:11.9534327Z
Activity.Duration:           00:00:00.1013390
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Groups
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 97
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0557765Z
LogRecord.TraceId:                 cf4ae675c8a05f00941ce07ae8288f00
LogRecord.SpanId:                  42d42f2dcbf83858
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Groups - 201 - application/json;+charset=utf-8 102.4080ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 102.408
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Groups
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42d42f2dcbf83858
[Scope.0]:TraceId: cf4ae675c8a05f00941ce07ae8288f00
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G2
[Scope.2]:RequestId: 0HNG4UOLJ42G2:00000001
[Scope.2]:RequestPath: /api/Groups

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0923944Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1616
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1616
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0943072Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.0957326Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:12.1118001Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:12.1274531Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.1292034Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  ac1e7498e755424e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Adam-2025-10-06-12-34-13 West-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Adam-2025-10-06-12-34-13
    LastName: West-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: ac1e7498e755424e
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: d18439f119443ea2
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.1689511Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  28c76bda558fea92
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 28c76bda558fea92
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             28c76bda558fea92
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.1321278Z
Activity.Duration:           00:00:00.0388728
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.2102378Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  46f290aea63d4175
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (38ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 38
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 46f290aea63d4175
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             46f290aea63d4175
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.1723526Z
Activity.Duration:           00:00:00.0401542
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.2488247Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  08f09ffc92a66dda
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (35ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 35
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 08f09ffc92a66dda
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             08f09ffc92a66dda
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.2138965Z
Activity.Duration:           00:00:00.0365970
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.2850306Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  42bfe443d825aa5a
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 42bfe443d825aa5a
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             42bfe443d825aa5a
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.2517213Z
Activity.Duration:           00:00:00.0352749
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3257097Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  f326f62830dc3abb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?', @p49='?' (DbType = Boolean), @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?', @p56='?' (DbType = Guid), @p57='?' (DbType = Guid), @p58='?' (DbType = Boolean), @p59='?', @p60='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p56, @p57, @p58, @p59, @p60);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?', @p49='?' (DbType = Boolean), @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?', @p56='?' (DbType = Guid), @p57='?' (DbType = Guid), @p58='?' (DbType = Boolean), @p59='?', @p60='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p56, @p57, @p58, @p59, @p60);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: f326f62830dc3abb
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: ac1e7498e755424e
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             f326f62830dc3abb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       ac1e7498e755424e
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.2894166Z
Activity.Duration:           00:00:00.0392422
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p56, @p57, @p58, @p59, @p60);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3652088Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  ac1e7498e755424e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: bd591cae-7d7d-4bde-b0af-463ca6bd353f
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: bd591cae-7d7d-4bde-b0af-463ca6bd353f
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: ac1e7498e755424e
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: d18439f119443ea2
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             ac1e7498e755424e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       d18439f119443ea2
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:12.1291869Z
Activity.Duration:           00:00:00.2379897
Activity.Tags:
    contact.id: bd591cae-7d7d-4bde-b0af-463ca6bd353f
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3680806Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 238.8976ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 238.8976
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3698411Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3717797Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 244.9098ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 244.9098
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.3732578Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            448d601dd740e9bae9a81faef78af471
Activity.SpanId:             d18439f119443ea2
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:12.0923252Z
Activity.Duration:           00:00:00.3070819
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1616
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4005170Z
LogRecord.TraceId:                 448d601dd740e9bae9a81faef78af471
LogRecord.SpanId:                  d18439f119443ea2
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 308.2161ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 308.2161
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d18439f119443ea2
[Scope.0]:TraceId: 448d601dd740e9bae9a81faef78af471
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G3
[Scope.2]:RequestId: 0HNG4UOLJ42G3:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4363632Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1585
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1585
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4383667Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4396433Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:12.4542298Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:12.4695954Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.4709852Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  df5139b3a7775643
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Bruce-2025-10-06-12-34-13 Banner-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Bruce-2025-10-06-12-34-13
    LastName: Banner-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: df5139b3a7775643
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 15785f98f0829884
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.5041625Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  8a0b9006059f34ac
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (31ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 31
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 8a0b9006059f34ac
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             8a0b9006059f34ac
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.4734433Z
Activity.Duration:           00:00:00.0328639
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.5409383Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  99bb9043ddb2611f
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 99bb9043ddb2611f
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             99bb9043ddb2611f
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.5078330Z
Activity.Duration:           00:00:00.0349085
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.5721584Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  600efc56f5652414
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 600efc56f5652414
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             600efc56f5652414
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.5441396Z
Activity.Duration:           00:00:00.0299753
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6137830Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  1f393dddee813e7b
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?', @p41='?' (DbType = Boolean), @p42='?', @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?' (DbType = Boolean), @p51='?', @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p36, @p37);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p38, @p39, @p40, @p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?', @p41='?' (DbType = Boolean), @p42='?', @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?' (DbType = Boolean), @p51='?', @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p36, @p37);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p38, @p39, @p40, @p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 1f393dddee813e7b
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: df5139b3a7775643
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             1f393dddee813e7b
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       df5139b3a7775643
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.5762331Z
Activity.Duration:           00:00:00.0406158
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p36, @p37);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p38, @p39, @p40, @p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6501057Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  df5139b3a7775643
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: e70b8ada-7a2e-4096-9d8a-441d2f85c13c
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: e70b8ada-7a2e-4096-9d8a-441d2f85c13c
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: df5139b3a7775643
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 15785f98f0829884
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             df5139b3a7775643
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       15785f98f0829884
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:12.4709701Z
Activity.Duration:           00:00:00.1808524
Activity.Tags:
    contact.id: e70b8ada-7a2e-4096-9d8a-441d2f85c13c
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6527404Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 181.7754ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 181.7754
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6545264Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6561681Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 187.065ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 187.065
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6576886Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            deadb0e292bb7d3a3ab104b48c3c4044
Activity.SpanId:             15785f98f0829884
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:12.4363078Z
Activity.Duration:           00:00:00.2453667
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1585
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.6829426Z
LogRecord.TraceId:                 deadb0e292bb7d3a3ab104b48c3c4044
LogRecord.SpanId:                  15785f98f0829884
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 246.6557ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 246.6557
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 15785f98f0829884
[Scope.0]:TraceId: deadb0e292bb7d3a3ab104b48c3c4044
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G4
[Scope.2]:RequestId: 0HNG4UOLJ42G4:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7207933Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1583
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1583
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7229348Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7242246Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:12.7378456Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:12.7514988Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7528734Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  3a087ae501957987
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Diana-2025-10-06-12-34-13 Prince-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Diana-2025-10-06-12-34-13
    LastName: Prince-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3a087ae501957987
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: fb2c9b866e53db2c
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.7889456Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fa348c97c5ef024e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (34ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 34
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fa348c97c5ef024e
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             fa348c97c5ef024e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.7552885Z
Activity.Duration:           00:00:00.0353741
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.8289569Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  7347b3251c9622eb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 7347b3251c9622eb
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             7347b3251c9622eb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.7919541Z
Activity.Duration:           00:00:00.0387444
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.8690899Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  e157ec374aaa33b7
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (37ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 37
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e157ec374aaa33b7
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             e157ec374aaa33b7
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.8321904Z
Activity.Duration:           00:00:00.0389019
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9066457Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  5b15e3a1688fdc66
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?', @p42='?' (DbType = Boolean), @p43='?', @p44='?' (DbType = Guid), @p45='?' (DbType = Guid), @p46='?', @p47='?' (DbType = Boolean), @p48='?', @p49='?' (DbType = Guid), @p50='?' (DbType = Guid), @p51='?' (DbType = Boolean), @p52='?', @p53='?', @p54='?' (DbType = Guid), @p55='?' (DbType = Guid), @p56='?' (DbType = Boolean), @p57='?', @p58='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p39, @p40, @p41, @p42, @p43);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p44, @p45, @p46, @p47, @p48);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p49, @p50, @p51, @p52, @p53);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p54, @p55, @p56, @p57, @p58);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?', @p42='?' (DbType = Boolean), @p43='?', @p44='?' (DbType = Guid), @p45='?' (DbType = Guid), @p46='?', @p47='?' (DbType = Boolean), @p48='?', @p49='?' (DbType = Guid), @p50='?' (DbType = Guid), @p51='?' (DbType = Boolean), @p52='?', @p53='?', @p54='?' (DbType = Guid), @p55='?' (DbType = Guid), @p56='?' (DbType = Boolean), @p57='?', @p58='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p39, @p40, @p41, @p42, @p43);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p44, @p45, @p46, @p47, @p48);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p49, @p50, @p51, @p52, @p53);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p54, @p55, @p56, @p57, @p58);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 5b15e3a1688fdc66
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 3a087ae501957987
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             5b15e3a1688fdc66
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3a087ae501957987
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:12.8733254Z
Activity.Duration:           00:00:00.0359468
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p39, @p40, @p41, @p42, @p43);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p44, @p45, @p46, @p47, @p48);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p49, @p50, @p51, @p52, @p53);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p54, @p55, @p56, @p57, @p58);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9453506Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  3a087ae501957987
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: f400e560-e40d-43a3-b569-669eacc307cc
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: f400e560-e40d-43a3-b569-669eacc307cc
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3a087ae501957987
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: fb2c9b866e53db2c
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             3a087ae501957987
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       fb2c9b866e53db2c
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:12.7528571Z
Activity.Duration:           00:00:00.1943567
Activity.Tags:
    contact.id: f400e560-e40d-43a3-b569-669eacc307cc
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9480489Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 195.2059ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 195.2059
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9496618Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9513503Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 200.3283ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 200.3283
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9527508Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            9716350896d952015b5cdc794f5d920a
Activity.SpanId:             fb2c9b866e53db2c
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:12.7207456Z
Activity.Duration:           00:00:00.2547932
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1583
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:12.9765093Z
LogRecord.TraceId:                 9716350896d952015b5cdc794f5d920a
LogRecord.SpanId:                  fb2c9b866e53db2c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 255.7897ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 255.7897
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: fb2c9b866e53db2c
[Scope.0]:TraceId: 9716350896d952015b5cdc794f5d920a
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G5
[Scope.2]:RequestId: 0HNG4UOLJ42G5:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0161188Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1541
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1541
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0180394Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0192969Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:13.0339667Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:13.0479244Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0496621Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  acb44f05ccb2ccd6
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Peter-2025-10-06-12-34-13 Parker-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Peter-2025-10-06-12-34-13
    LastName: Parker-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: acb44f05ccb2ccd6
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 56a06c87af489d15
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.0843945Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  d913c226c035d42e
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (32ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 32
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d913c226c035d42e
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: acb44f05ccb2ccd6
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             d913c226c035d42e
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       acb44f05ccb2ccd6
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.0526400Z
Activity.Duration:           00:00:00.0335270
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.1251951Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  a84a456e04e1ae6c
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (38ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 38
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: a84a456e04e1ae6c
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: acb44f05ccb2ccd6
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             a84a456e04e1ae6c
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       acb44f05ccb2ccd6
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.0874217Z
Activity.Duration:           00:00:00.0396717
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.1635453Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  30669c4d2935150f
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (34ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?', @p39='?' (DbType = Boolean), @p40='?', @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?' (DbType = Boolean), @p49='?', @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p36, @p37, @p38, @p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 34
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = Guid), @p37='?' (DbType = Guid), @p38='?', @p39='?' (DbType = Boolean), @p40='?', @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?', @p44='?' (DbType = Boolean), @p45='?', @p46='?' (DbType = Guid), @p47='?' (DbType = Guid), @p48='?' (DbType = Boolean), @p49='?', @p50='?', @p51='?' (DbType = Guid), @p52='?' (DbType = Guid), @p53='?' (DbType = Boolean), @p54='?', @p55='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p36, @p37, @p38, @p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 30669c4d2935150f
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: acb44f05ccb2ccd6
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             30669c4d2935150f
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       acb44f05ccb2ccd6
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.1290953Z
Activity.Duration:           00:00:00.0368611
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p34, @p35);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p36, @p37, @p38, @p39, @p40);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p41, @p42, @p43, @p44, @p45);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p46, @p47, @p48, @p49, @p50);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p51, @p52, @p53, @p54, @p55);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2013864Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  acb44f05ccb2ccd6
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: 8de7114d-e2ba-4033-b9c7-6879e4bc0c63
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: 8de7114d-e2ba-4033-b9c7-6879e4bc0c63
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: acb44f05ccb2ccd6
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 56a06c87af489d15
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             acb44f05ccb2ccd6
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       56a06c87af489d15
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:13.0496435Z
Activity.Duration:           00:00:00.1534487
Activity.Tags:
    contact.id: 8de7114d-e2ba-4033-b9c7-6879e4bc0c63
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2038471Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 154.209ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 154.209
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2057378Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2075792Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 160.2127ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 160.2127
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2092288Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            f2a5fa3f1dc8e410c70655014eb209b7
Activity.SpanId:             56a06c87af489d15
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:13.0160775Z
Activity.Duration:           00:00:00.2204168
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1541
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2376012Z
LogRecord.TraceId:                 f2a5fa3f1dc8e410c70655014eb209b7
LogRecord.SpanId:                  56a06c87af489d15
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 221.5412ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 221.5412
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 56a06c87af489d15
[Scope.0]:TraceId: f2a5fa3f1dc8e410c70655014eb209b7
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G6
[Scope.2]:RequestId: 0HNG4UOLJ42G6:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2814723Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request starting HTTP/2 POST https://192.168.0.80:7034/api/Contacts - application/json 1653
LogRecord.Body:                    Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.Attributes (Key:Value):
    Protocol: HTTP/2
    Method: POST
    ContentType: application/json
    ContentLength: 1653
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}
LogRecord.EventId:                 1
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2836832Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Api.Authentication.ApiKeyAuthenticationHandler
LogRecord.Severity:                Debug
LogRecord.SeverityText:            Debug
LogRecord.FormattedMessage:        AuthenticationScheme: ApiKey was not authenticated.
LogRecord.Body:                    AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.Attributes (Key:Value):
    AuthenticationScheme: ApiKey
    OriginalFormat (a.k.a Body): AuthenticationScheme: {AuthenticationScheme} was not authenticated.
LogRecord.EventId:                 9
LogRecord.EventName:               AuthenticationSchemeNotAuthenticated
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.2851123Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executing endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executing endpoint '{EndpointName}'
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
LogRecord.Timestamp:               2025-10-06T16:34:13.3004509Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Route matched with {action = "CreateContact", controller = "Contacts"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken) on controller MyOpenTelemetryApi.Api.Controllers.ContactsController (MyOpenTelemetryApi.Api).
LogRecord.Body:                    Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.Attributes (Key:Value):
    RouteData: {action = "CreateContact", controller = "Contacts"}
    MethodInfo: System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[MyOpenTelemetryApi.Application.DTOs.ContactDto]] CreateContact(MyOpenTelemetryApi.Application.DTOs.CreateContactDto, System.Threading.CancellationToken)
    Controller: MyOpenTelemetryApi.Api.Controllers.ContactsController
    AssemblyName: MyOpenTelemetryApi.Api
    OriginalFormat (a.k.a Body): Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).
LogRecord.EventId:                 102
LogRecord.EventName:               ControllerActionExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.Reflection.RuntimeMethodInfo' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.
LogRecord.Timestamp:               2025-10-06T16:34:13.3153234Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) - Validation state: Valid
LogRecord.Body:                    Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ValidationState: Valid
    OriginalFormat (a.k.a Body): Executing action method {ActionName} - Validation state: {ValidationState}
LogRecord.EventId:                 101
LogRecord.EventName:               ActionMethodExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.3170458Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  e6e5c42e55f62f92
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Creating new contact: Clark-2025-10-06-12-34-13 Kent-2025-10-06-12-34-13
LogRecord.Body:                    Creating new contact: {FirstName} {LastName}
LogRecord.Attributes (Key:Value):
    FirstName: Clark-2025-10-06-12-34-13
    LastName: Kent-2025-10-06-12-34-13
    OriginalFormat (a.k.a Body): Creating new contact: {FirstName} {LastName}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e6e5c42e55f62f92
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 3997fdcfca3fe3fa
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.3484504Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  d519751380d4acd8
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (29ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 29
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: d519751380d4acd8
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             d519751380d4acd8
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.3195894Z
Activity.Duration:           00:00:00.0310990
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.3804700Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3d341d9c52257206
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3d341d9c52257206
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             3d341d9c52257206
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.3521244Z
Activity.Duration:           00:00:00.0304816
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT g."Id", g."CreatedAt", g."Description", g."Name"
FROM "Groups" AS g
WHERE g."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.4172697Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  0caed7080ed2d074
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (33ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 33
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 0caed7080ed2d074
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             0caed7080ed2d074
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.3839982Z
Activity.Duration:           00:00:00.0352570
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.4491414Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  ce4e72741262e6fb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (28ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 28
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: ce4e72741262e6fb
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             ce4e72741262e6fb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.4206694Z
Activity.Duration:           00:00:00.0305565
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.4885095Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  20f1a6e5d457ca36
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p='?' (DbType = Guid)
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 20f1a6e5d457ca36
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             20f1a6e5d457ca36
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.4527746Z
Activity.Duration:           00:00:00.0377558
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: SELECT t."Id", t."ColorHex", t."Name"
FROM "Tags" AS t
WHERE t."Id" = @p
LIMIT 1
Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5292147Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  582d834bff9af7bb
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.EntityFrameworkCore.Database.Command
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed DbCommand (36ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'], CommandType='Text', CommandTimeout='30']
INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
LogRecord.Body:                    Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.Attributes (Key:Value):
    elapsed: 36
    parameters: @p0='?' (DbType = Guid), @p1='?', @p2='?' (DbType = DateTime), @p3='?' (DbType = DateTime), @p4='?', @p5='?', @p6='?', @p7='?', @p8='?', @p9='?', @p10='?' (DbType = DateTime), @p11='?' (DbType = Guid), @p12='?', @p13='?' (DbType = Guid), @p14='?', @p15='?' (DbType = Boolean), @p16='?', @p17='?', @p18='?', @p19='?', @p20='?', @p21='?' (DbType = Guid), @p22='?', @p23='?' (DbType = Guid), @p24='?', @p25='?' (DbType = Boolean), @p26='?', @p27='?', @p28='?', @p29='?', @p30='?', @p31='?' (DbType = Guid), @p32='?' (DbType = Guid), @p33='?' (DbType = DateTime), @p34='?' (DbType = Guid), @p35='?' (DbType = Guid), @p36='?' (DbType = DateTime), @p37='?' (DbType = Guid), @p38='?' (DbType = Guid), @p39='?' (DbType = Guid), @p40='?' (DbType = Guid), @p41='?' (DbType = Guid), @p42='?' (DbType = Guid), @p43='?' (DbType = Guid), @p44='?' (DbType = Guid), @p45='?', @p46='?' (DbType = Boolean), @p47='?', @p48='?' (DbType = Guid), @p49='?' (DbType = Guid), @p50='?', @p51='?' (DbType = Boolean), @p52='?', @p53='?' (DbType = Guid), @p54='?' (DbType = Guid), @p55='?' (DbType = Boolean), @p56='?', @p57='?', @p58='?' (DbType = Guid), @p59='?' (DbType = Guid), @p60='?' (DbType = Boolean), @p61='?', @p62='?'
    commandType: Text
    commandTimeout: 30
    newLine:

    commandText: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);
    OriginalFormat (a.k.a Body): Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
LogRecord.EventId:                 20101
LogRecord.EventName:               Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 582d834bff9af7bb
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: e6e5c42e55f62f92
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             582d834bff9af7bb
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       e6e5c42e55f62f92
Activity.DisplayName:        neondb
Activity.Kind:               Client
Activity.StartTime:          2025-10-06T16:34:13.4931254Z
Activity.Duration:           00:00:00.0386299
Activity.Tags:
    db.system: postgresql
    server.address: tcp://ep-late-dawn-aerv42ii-pooler.c-2.us-east-2.aws.neon.tech:5432
    db.name: neondb
    db.statement: INSERT INTO "Contacts" ("Id", "Company", "CreatedAt", "DateOfBirth", "FirstName", "JobTitle", "LastName", "MiddleName", "Nickname", "Notes", "UpdatedAt")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20);
INSERT INTO "Addresses" ("Id", "City", "ContactId", "Country", "IsPrimary", "PostalCode", "StateProvince", "StreetLine1", "StreetLine2", "Type")
VALUES (@p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p31, @p32, @p33);
INSERT INTO "ContactGroups" ("ContactId", "GroupId", "AddedAt")
VALUES (@p34, @p35, @p36);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p37, @p38);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p39, @p40);
INSERT INTO "ContactTags" ("ContactId", "TagId")
VALUES (@p41, @p42);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p43, @p44, @p45, @p46, @p47);
INSERT INTO "EmailAddresses" ("Id", "ContactId", "Email", "IsPrimary", "Type")
VALUES (@p48, @p49, @p50, @p51, @p52);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p53, @p54, @p55, @p56, @p57);
INSERT INTO "PhoneNumbers" ("Id", "ContactId", "IsPrimary", "Number", "Type")
VALUES (@p58, @p59, @p60, @p61, @p62);

Instrumentation scope (ActivitySource):
    Name: OpenTelemetry.Instrumentation.EntityFrameworkCore
    Version: 1.12.0-beta.2
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5654131Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  e6e5c42e55f62f92
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            MyOpenTelemetryApi.Application.Services.ContactService
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Contact created successfully: f08fb20e-bdaa-4c1c-9f62-6639e3e35813
LogRecord.Body:                    Contact created successfully: {ContactId}
LogRecord.Attributes (Key:Value):
    ContactId: f08fb20e-bdaa-4c1c-9f62-6639e3e35813
    OriginalFormat (a.k.a Body): Contact created successfully: {ContactId}
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: e6e5c42e55f62f92
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 3997fdcfca3fe3fa
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             e6e5c42e55f62f92
Activity.TraceFlags:         Recorded
Activity.ParentSpanId:       3997fdcfca3fe3fa
Activity.DisplayName:        CreateContact
Activity.Kind:               Internal
Activity.StartTime:          2025-10-06T16:34:13.3170322Z
Activity.Duration:           00:00:00.2498006
Activity.Tags:
    contact.id: f08fb20e-bdaa-4c1c-9f62-6639e3e35813
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5675247Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action method MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api), returned result Microsoft.AspNetCore.Mvc.CreatedAtActionResult in 250.5039ms.
LogRecord.Body:                    Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ActionResult: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    ElapsedMilliseconds: 250.5039
    OriginalFormat (a.k.a Body): Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.
LogRecord.EventId:                 103
LogRecord.EventName:               ActionMethodExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5688811Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executing CreatedAtActionResult, writing value of type 'MyOpenTelemetryApi.Application.DTOs.ContactDto'.
LogRecord.Body:                    Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.Attributes (Key:Value):
    ObjectResultType: CreatedAtActionResult
    Type: MyOpenTelemetryApi.Application.DTOs.ContactDto
    OriginalFormat (a.k.a Body): Executing {ObjectResultType}, writing value of type '{Type}'.
LogRecord.EventId:                 1
LogRecord.EventName:               ObjectResultExecuting
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts
[Scope.3]:ActionId: 3b45e7d1-de35-41e8-9ab6-b159817daecc
[Scope.3]:ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5703443Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed action MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api) in 255.5099ms
LogRecord.Body:                    Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ActionName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    ElapsedMilliseconds: 255.5099
    OriginalFormat (a.k.a Body): Executed action {ActionName} in {ElapsedMilliseconds}ms
LogRecord.EventId:                 105
LogRecord.EventName:               ActionExecuted
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5715806Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Routing.EndpointMiddleware
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Executed endpoint 'MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)'
LogRecord.Body:                    Executed endpoint '{EndpointName}'
LogRecord.Attributes (Key:Value):
    EndpointName: MyOpenTelemetryApi.Api.Controllers.ContactsController.CreateContact (MyOpenTelemetryApi.Api)
    OriginalFormat (a.k.a Body): Executed endpoint '{EndpointName}'
LogRecord.EventId:                 1
LogRecord.EventName:               ExecutedEndpoint
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Error exporting logs to file: Serialization and deserialization of 'System.RuntimeType' instances is not supported. The unsupported member type is located on type 'System.Object'. Path: $.Attributes.Metadata.TypeId.
Activity.TraceId:            e57aeca417daf3523305a967c2592760
Activity.SpanId:             3997fdcfca3fe3fa
Activity.TraceFlags:         Recorded
Activity.DisplayName:        POST
Activity.Kind:               Server
Activity.StartTime:          2025-10-06T16:34:13.2814308Z
Activity.Duration:           00:00:00.3123653
Activity.Tags:
    server.address: 192.168.0.80
    server.port: 7034
    http.request.method: POST
    url.scheme: https
    url.path: /api/Contacts
    network.protocol.version: 2
    user_agent.original: curl/8.14.1
    http.request.body.size: 1653
    user.agent: curl/8.14.1
    client.ip: 192.168.0.120
    http.response.body.size: 0
Instrumentation scope (ActivitySource):
    Name: Microsoft.AspNetCore
Resource associated with Activity:
    service.name: MyOpenTelemetryApi
    service.version: 1.0.0
    service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.13.0

LogRecord.Timestamp:               2025-10-06T16:34:13.5947536Z
LogRecord.TraceId:                 e57aeca417daf3523305a967c2592760
LogRecord.SpanId:                  3997fdcfca3fe3fa
LogRecord.TraceFlags:              Recorded
LogRecord.CategoryName:            Microsoft.AspNetCore.Hosting.Diagnostics
LogRecord.Severity:                Info
LogRecord.SeverityText:            Information
LogRecord.FormattedMessage:        Request finished HTTP/2 POST https://192.168.0.80:7034/api/Contacts - 201 - application/json;+charset=utf-8 313.3415ms
LogRecord.Body:                    Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.Attributes (Key:Value):
    ElapsedMilliseconds: 313.3415
    StatusCode: 201
    ContentType: application/json; charset=utf-8
    ContentLength:
    Protocol: HTTP/2
    Method: POST
    Scheme: https
    Host: 192.168.0.80:7034
    PathBase:
    Path: /api/Contacts
    QueryString:
    OriginalFormat (a.k.a Body): Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms
LogRecord.EventId:                 2
LogRecord.ScopeValues (Key:Value):
[Scope.0]:SpanId: 3997fdcfca3fe3fa
[Scope.0]:TraceId: e57aeca417daf3523305a967c2592760
[Scope.0]:ParentId: 0000000000000000
[Scope.1]:ConnectionId: 0HNG4UOLJ42G7
[Scope.2]:RequestId: 0HNG4UOLJ42G7:00000001
[Scope.2]:RequestPath: /api/Contacts

Resource associated with LogRecord:
service.name: MyOpenTelemetryApi
service.version: 1.0.0
service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
environment: Development
deployment.environment: Development
host.name: DESKTOP-3J5HTD8
telemetry.sdk.name: opentelemetry
telemetry.sdk.language: dotnet
telemetry.sdk.version: 1.13.0

Resource associated with Metrics:
        service.name: MyOpenTelemetryApi
        service.version: 1.0.0
        service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
        telemetry.sdk.name: opentelemetry
        telemetry.sdk.language: dotnet
        telemetry.sdk.version: 1.13.0

Metric Name: process.memory.usage, Description: The amount of physical memory in use., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9639090Z, 2025-10-06T16:34:16.0554457Z]
Value: 218050560

Metric Name: process.memory.virtual, Description: The amount of committed virtual memory., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9649870Z, 2025-10-06T16:34:16.0554461Z]
Value: 2481115238400

Metric Name: process.cpu.time, Description: Total CPU seconds broken down by different states., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:16.0554465Z] process.cpu.state: user
Value: 6.484375
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:16.0554465Z] process.cpu.state: system
Value: 0.859375

Metric Name: process.cpu.count, Description: The number of processors (CPU cores) available to the current process., Unit: {processors}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652277Z, 2025-10-06T16:34:16.0554467Z]
Value: 12

Metric Name: process.thread.count, Description: Process threads count., Unit: {thread}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652369Z, 2025-10-06T16:34:16.0554468Z]
Value: 41

Metric Name: kestrel.active_connections, Description: Number of connections that are currently active on the server., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9652531Z, 2025-10-06T16:34:16.0554473Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.connection.duration, Description: The duration of connections on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9657932Z, 2025-10-06T16:34:16.0554480Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 5.3863993 Count: 22 Min: 0.1107307 Max: 0.711793
(-Infinity,0.01]:0
(0.01,0.02]:0
(0.02,0.05]:0
(0.05,0.1]:0
(0.1,0.2]:10
(0.2,0.5]:10
(0.5,1]:2
(1,2]:0
(2,5]:0
(5,10]:0
(10,30]:0
(30,60]:0
(60,120]:0
(120,300]:0
(300,+Infinity]:0


Metric Name: kestrel.queued_connections, Description: Number of connections that are currently queued and are waiting to start., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658179Z, 2025-10-06T16:34:16.0554487Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.queued_requests, Description: Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658271Z, 2025-10-06T16:34:16.0554490Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.tls_handshake.duration, Description: The duration of TLS handshakes on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658578Z, 2025-10-06T16:34:16.0554500Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 0.14036469999999998 Count: 22 Min: 0.0055879 Max: 0.0095863
(-Infinity,0.005]:0
(0.005,0.01]:22
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:0
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: kestrel.active_tls_handshakes, Description: Number of TLS handshakes that are currently in progress on the server., Unit: {handshake}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658712Z, 2025-10-06T16:34:16.0554503Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: http.server.active_requests, Description: Number of active HTTP server requests., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665295Z, 2025-10-06T16:34:16.0554509Z] http.request.method: POST url.scheme: https
Value: 0

Metric Name: http.server.request.duration, Description: Duration of HTTP server requests., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:16.0554523Z] http.request.method: POST http.response.status_code: 201 http.route: api/Tags network.protocol.version: 2 url.scheme: https
Value: Sum: 1.5320976999999998 Count: 6 Min: 0.1486663 Max: 0.6729304
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:5
(0.25,0.5]:0
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:16.0554523Z] http.request.method: POST http.response.status_code: 201 http.route: api/Groups network.protocol.version: 2 url.scheme: https
Value: Sum: 0.6624161 Count: 6 Min: 0.102408 Max: 0.1323369
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:6
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:16.0554523Z] http.request.method: POST http.response.status_code: 201 http.route: api/Contacts network.protocol.version: 2 url.scheme: https
Value: Sum: 2.9588364 Count: 10 Min: 0.2215412 Max: 0.5106006
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:3
(0.25,0.5]:6
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: dotnet.gc.collections, Description: The number of garbage collections that have occurred since the process has started., Unit: {collection}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:16.0554525Z] gc.heap.generation: gen2
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:16.0554525Z] gc.heap.generation: gen1
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:16.0554525Z] gc.heap.generation: gen0
Value: 2

Metric Name: dotnet.process.memory.working_set, Description: The number of bytes of physical memory mapped to the process context., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665548Z, 2025-10-06T16:34:16.0554527Z]
Value: 218079232

Metric Name: dotnet.gc.heap.total_allocated, Description: The approximate number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665597Z, 2025-10-06T16:34:16.0554528Z]
Value: 50581512

Metric Name: dotnet.gc.last_collection.memory.committed_size, Description: The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665650Z, 2025-10-06T16:34:16.0554529Z]
Value: 13565952

Metric Name: dotnet.gc.last_collection.heap.size, Description: The managed GC heap size (including fragmentation), as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: gen1
Value: 1042568
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: gen2
Value: 3800856
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: loh
Value: 3270784
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:16.0554530Z] gc.heap.generation: poh
Value: 58240

Metric Name: dotnet.gc.last_collection.heap.fragmentation.size, Description: The heap fragmentation, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: gen1
Value: 602336
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: gen2
Value: 176104
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: loh
Value: 736
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:16.0554533Z] gc.heap.generation: poh
Value: 0

Metric Name: dotnet.gc.pause.time, Description: The total amount of time paused in GC since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701062Z, 2025-10-06T16:34:16.0554534Z]
Value: 0.014596

Metric Name: dotnet.jit.compiled_il.size, Description: Count of bytes of intermediate language that have been compiled since the process has started., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701174Z, 2025-10-06T16:34:16.0554538Z]
Value: 2332434

Metric Name: dotnet.jit.compiled_methods, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: {method}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701251Z, 2025-10-06T16:34:16.0554539Z]
Value: 29983

Metric Name: dotnet.jit.compilation.time, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701358Z, 2025-10-06T16:34:16.0554540Z]
Value: 6.7026968

Metric Name: dotnet.monitor.lock_contentions, Description: The number of times there was contention when trying to acquire a monitor lock since the process has started., Unit: {contention}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701429Z, 2025-10-06T16:34:16.0554543Z]
Value: 3

Metric Name: dotnet.thread_pool.thread.count, Description: The number of thread pool threads that currently exist., Unit: {thread}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701527Z, 2025-10-06T16:34:16.0554544Z]
Value: 6

Metric Name: dotnet.thread_pool.work_item.count, Description: The number of work items that the thread pool has completed since the process has started., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701694Z, 2025-10-06T16:34:16.0554546Z]
Value: 1197

Metric Name: dotnet.thread_pool.queue.length, Description: The number of work items that are currently queued to be processed by the thread pool., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701765Z, 2025-10-06T16:34:16.0554547Z]
Value: 0

Metric Name: dotnet.timer.count, Description: The number of timer instances that are currently active. An active timer is registered to tick at some point in the future and has not yet been canceled., Unit: {timer}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701834Z, 2025-10-06T16:34:16.0554548Z]
Value: 2

Metric Name: dotnet.assembly.count, Description: The number of .NET assemblies that are currently loaded., Unit: {assembly}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701915Z, 2025-10-06T16:34:16.0554549Z]
Value: 171

Metric Name: dotnet.exceptions, Description: The number of exceptions that have been thrown in managed code., Unit: {exception}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701984Z, 2025-10-06T16:34:16.0554553Z] error.type: NotSupportedException
Value: 132

Metric Name: dotnet.process.cpu.count, Description: The number of processors available to the process., Unit: {cpu}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702055Z, 2025-10-06T16:34:16.0554555Z]
Value: 12

Metric Name: dotnet.process.cpu.time, Description: CPU time used by the process., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:16.0554557Z] cpu.mode: user
Value: 6.484375
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:16.0554557Z] cpu.mode: system
Value: 0.859375

Metric Name: aspnetcore.routing.match_attempts, Description: Number of requests that were attempted to be matched to an endpoint., Unit: {match_attempt}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Routing
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:16.0554560Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Tags
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:16.0554560Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Groups
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:16.0554560Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Contacts
Value: 10

Metric Name: contacts.created, Description: Number of contacts created, Unit: contacts, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: MyOpenTelemetryApi.Contacts
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Wayne Enterprises-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Stark Industries-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Themyscira Inc-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Bugle-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Planet-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Wayne Enterprises-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Stark Industries-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Themyscira Inc-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Bugle-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:16.0554568Z] company: Daily Planet-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
Resource associated with Metrics:
        service.name: MyOpenTelemetryApi
        service.version: 1.0.0
        service.instance.id: 160b2c6c-5d28-4087-8074-d4fd984e27a2
        telemetry.sdk.name: opentelemetry
        telemetry.sdk.language: dotnet
        telemetry.sdk.version: 1.13.0

Metric Name: process.memory.usage, Description: The amount of physical memory in use., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9639090Z, 2025-10-06T16:34:25.9604053Z]
Value: 208486400

Metric Name: process.memory.virtual, Description: The amount of committed virtual memory., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9649870Z, 2025-10-06T16:34:25.9604058Z]
Value: 2481115238400

Metric Name: process.cpu.time, Description: Total CPU seconds broken down by different states., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:25.9604061Z] process.cpu.state: user
Value: 6.5
(2025-10-06T16:33:35.9652033Z, 2025-10-06T16:34:25.9604061Z] process.cpu.state: system
Value: 0.875

Metric Name: process.cpu.count, Description: The number of processors (CPU cores) available to the current process., Unit: {processors}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652277Z, 2025-10-06T16:34:25.9604063Z]
Value: 12

Metric Name: process.thread.count, Description: Process threads count., Unit: {thread}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: OpenTelemetry.Instrumentation.Process
        Version: 1.12.0-beta.1
(2025-10-06T16:33:35.9652369Z, 2025-10-06T16:34:25.9604065Z]
Value: 41

Metric Name: kestrel.active_connections, Description: Number of connections that are currently active on the server., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9652531Z, 2025-10-06T16:34:25.9604088Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.connection.duration, Description: The duration of connections on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9657932Z, 2025-10-06T16:34:25.9604094Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 5.3863993 Count: 22 Min: 0.1107307 Max: 0.711793
(-Infinity,0.01]:0
(0.01,0.02]:0
(0.02,0.05]:0
(0.05,0.1]:0
(0.1,0.2]:10
(0.2,0.5]:10
(0.5,1]:2
(1,2]:0
(2,5]:0
(5,10]:0
(10,30]:0
(30,60]:0
(60,120]:0
(120,300]:0
(300,+Infinity]:0


Metric Name: kestrel.queued_connections, Description: Number of connections that are currently queued and are waiting to start., Unit: {connection}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658179Z, 2025-10-06T16:34:25.9604101Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.queued_requests, Description: Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658271Z, 2025-10-06T16:34:25.9604106Z] network.protocol.name: http network.protocol.version: 2 network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: kestrel.tls_handshake.duration, Description: The duration of TLS handshakes on the server., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658578Z, 2025-10-06T16:34:25.9604115Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034 tls.protocol.version: 1.3
Value: Sum: 0.14036469999999998 Count: 22 Min: 0.0055879 Max: 0.0095863
(-Infinity,0.005]:0
(0.005,0.01]:22
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:0
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: kestrel.active_tls_handshakes, Description: Number of TLS handshakes that are currently in progress on the server., Unit: {handshake}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Server.Kestrel
(2025-10-06T16:33:35.9658712Z, 2025-10-06T16:34:25.9604119Z] network.transport: tcp network.type: ipv4 server.address: 192.168.0.80 server.port: 7034
Value: 0

Metric Name: http.server.active_requests, Description: Number of active HTTP server requests., Unit: {request}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665295Z, 2025-10-06T16:34:25.9604124Z] http.request.method: POST url.scheme: https
Value: 0

Metric Name: http.server.request.duration, Description: Duration of HTTP server requests., Unit: s, Metric Type: Histogram
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Hosting
(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:25.9604135Z] http.request.method: POST http.response.status_code: 201 http.route: api/Tags network.protocol.version: 2 url.scheme: https
Value: Sum: 1.5320976999999998 Count: 6 Min: 0.1486663 Max: 0.6729304
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:5
(0.25,0.5]:0
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:25.9604135Z] http.request.method: POST http.response.status_code: 201 http.route: api/Groups network.protocol.version: 2 url.scheme: https
Value: Sum: 0.6624161 Count: 6 Min: 0.102408 Max: 0.1323369
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:6
(0.25,0.5]:0
(0.5,0.75]:0
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0

(2025-10-06T16:33:35.9665404Z, 2025-10-06T16:34:25.9604135Z] http.request.method: POST http.response.status_code: 201 http.route: api/Contacts network.protocol.version: 2 url.scheme: https
Value: Sum: 2.9588364 Count: 10 Min: 0.2215412 Max: 0.5106006
(-Infinity,0.005]:0
(0.005,0.01]:0
(0.01,0.025]:0
(0.025,0.05]:0
(0.05,0.075]:0
(0.075,0.1]:0
(0.1,0.25]:3
(0.25,0.5]:6
(0.5,0.75]:1
(0.75,1]:0
(1,2.5]:0
(2.5,5]:0
(5,7.5]:0
(7.5,10]:0
(10,+Infinity]:0


Metric Name: dotnet.gc.collections, Description: The number of garbage collections that have occurred since the process has started., Unit: {collection}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:25.9604136Z] gc.heap.generation: gen2
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:25.9604136Z] gc.heap.generation: gen1
Value: 1
(2025-10-06T16:33:35.9665473Z, 2025-10-06T16:34:25.9604136Z] gc.heap.generation: gen0
Value: 2

Metric Name: dotnet.process.memory.working_set, Description: The number of bytes of physical memory mapped to the process context., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665548Z, 2025-10-06T16:34:25.9604138Z]
Value: 208629760

Metric Name: dotnet.gc.heap.total_allocated, Description: The approximate number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665597Z, 2025-10-06T16:34:25.9604139Z]
Value: 50907872

Metric Name: dotnet.gc.last_collection.memory.committed_size, Description: The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665650Z, 2025-10-06T16:34:25.9604140Z]
Value: 13565952

Metric Name: dotnet.gc.last_collection.heap.size, Description: The managed GC heap size (including fragmentation), as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: gen1
Value: 1042568
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: gen2
Value: 3800856
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: loh
Value: 3270784
(2025-10-06T16:33:35.9665712Z, 2025-10-06T16:34:25.9604142Z] gc.heap.generation: poh
Value: 58240

Metric Name: dotnet.gc.last_collection.heap.fragmentation.size, Description: The heap fragmentation, as observed during the latest garbage collection., Unit: By, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: gen0
Value: 0
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: gen1
Value: 602336
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: gen2
Value: 176104
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: loh
Value: 736
(2025-10-06T16:33:35.9700709Z, 2025-10-06T16:34:25.9604144Z] gc.heap.generation: poh
Value: 0

Metric Name: dotnet.gc.pause.time, Description: The total amount of time paused in GC since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701062Z, 2025-10-06T16:34:25.9604145Z]
Value: 0.014596

Metric Name: dotnet.jit.compiled_il.size, Description: Count of bytes of intermediate language that have been compiled since the process has started., Unit: By, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701174Z, 2025-10-06T16:34:25.9604146Z]
Value: 2336179

Metric Name: dotnet.jit.compiled_methods, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: {method}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701251Z, 2025-10-06T16:34:25.9604148Z]
Value: 30034

Metric Name: dotnet.jit.compilation.time, Description: The number of times the JIT compiler (re)compiled methods since the process has started., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701358Z, 2025-10-06T16:34:25.9604149Z]
Value: 6.7128693

Metric Name: dotnet.monitor.lock_contentions, Description: The number of times there was contention when trying to acquire a monitor lock since the process has started., Unit: {contention}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701429Z, 2025-10-06T16:34:25.9604152Z]
Value: 3

Metric Name: dotnet.thread_pool.thread.count, Description: The number of thread pool threads that currently exist., Unit: {thread}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701527Z, 2025-10-06T16:34:25.9604153Z]
Value: 6

Metric Name: dotnet.thread_pool.work_item.count, Description: The number of work items that the thread pool has completed since the process has started., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701694Z, 2025-10-06T16:34:25.9604155Z]
Value: 1224

Metric Name: dotnet.thread_pool.queue.length, Description: The number of work items that are currently queued to be processed by the thread pool., Unit: {work_item}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701765Z, 2025-10-06T16:34:25.9604156Z]
Value: 0

Metric Name: dotnet.timer.count, Description: The number of timer instances that are currently active. An active timer is registered to tick at some point in the future and has not yet been canceled., Unit: {timer}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701834Z, 2025-10-06T16:34:25.9604157Z]
Value: 2

Metric Name: dotnet.assembly.count, Description: The number of .NET assemblies that are currently loaded., Unit: {assembly}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701915Z, 2025-10-06T16:34:25.9604161Z]
Value: 171

Metric Name: dotnet.exceptions, Description: The number of exceptions that have been thrown in managed code., Unit: {exception}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9701984Z, 2025-10-06T16:34:25.9604164Z] error.type: NotSupportedException
Value: 132

Metric Name: dotnet.process.cpu.count, Description: The number of processors available to the process., Unit: {cpu}, Metric Type: LongSumNonMonotonic
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702055Z, 2025-10-06T16:34:25.9604165Z]
Value: 12

Metric Name: dotnet.process.cpu.time, Description: CPU time used by the process., Unit: s, Metric Type: DoubleSum
Instrumentation scope (Meter):
        Name: System.Runtime
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:25.9604166Z] cpu.mode: user
Value: 6.5
(2025-10-06T16:33:35.9702132Z, 2025-10-06T16:34:25.9604166Z] cpu.mode: system
Value: 0.875

Metric Name: aspnetcore.routing.match_attempts, Description: Number of requests that were attempted to be matched to an endpoint., Unit: {match_attempt}, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: Microsoft.AspNetCore.Routing
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:25.9604169Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Tags
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:25.9604169Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Groups
Value: 6
(2025-10-06T16:33:36.0222280Z, 2025-10-06T16:34:25.9604169Z] aspnetcore.routing.is_fallback: false aspnetcore.routing.match_status: success http.route: api/Contacts
Value: 10

Metric Name: contacts.created, Description: Number of contacts created, Unit: contacts, Metric Type: LongSum
Instrumentation scope (Meter):
        Name: MyOpenTelemetryApi.Contacts
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Wayne Enterprises-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Stark Industries-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Themyscira Inc-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Bugle-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Planet-2025-10-06-12-34-08 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Wayne Enterprises-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Stark Industries-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Themyscira Inc-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Bugle-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1
(2025-10-06T16:34:08.3000691Z, 2025-10-06T16:34:25.9604176Z] company: Daily Planet-2025-10-06-12-34-13 has.email: true has.phone: true
Value: 1



================================================================================
FILE: docs\Windows PowerShell.txt
SIZE: 47.53 KB
MODIFIED: 10/08/2025 14:22:44
================================================================================

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\kushal> git --version
git version 2.51.0.windows.1
PS C:\Users\kushal> winget
Windows Package Manager v1.11.510
Copyright (c) Microsoft Corporation. All rights reserved.

The winget command line utility enables installing applications and other packages from the command line.

usage: winget  [<command>] [<options>]

The following commands are available:
  install    Installs the given package
  show       Shows information about a package
  source     Manage sources of packages
  search     Find and show basic info of packages
  list       Display installed packages
  upgrade    Shows and performs available upgrades
  uninstall  Uninstalls the given package
  hash       Helper to hash installer files
  validate   Validates a manifest file
  settings   Open settings or set administrator settings
  features   Shows the status of experimental features
  export     Exports a list of the installed packages
  import     Installs all the packages in a file
  pin        Manage package pins
  configure  Configures the system into a desired state
  download   Downloads the installer from a given package
  repair     Repairs the selected package
  dscv3      DSC v3 resource commands

For more details on a specific command, pass it the help argument. [-?]

The following options are available:
  -v,--version                Display the version of the tool
  --info                      Display general info of the tool
  -?,--help                   Shows help about the selected command
  --wait                      Prompts the user to press any key before exiting
  --logs,--open-logs          Open the default logs location
  --verbose,--verbose-logs    Enables verbose logging for winget
  --nowarn,--ignore-warnings  Suppresses warning outputs
  --disable-interactivity     Disable interactive prompts
  --proxy                     Set a proxy to use for this execution
  --no-proxy                  Disable the use of proxy for this execution

More help can be found at: https://aka.ms/winget-command-help
PS C:\Users\kushal> winget search git
The `msstore` source requires that you view the following agreements before using.
Terms of Transaction: https://aka.ms/microsoft-store-terms-of-transaction
The source requires the current machine's 2-letter geographic region to be sent to the backend service to function properly (ex. "US").

Do you agree to all the source agreements terms?
[Y] Yes  [N] No: y
Name                                  Id                              Version      Match    Source
---------------------------------------------------------------------------------------------------
My Git                                9NLVK2SL2SSP                    Unknown               msstore
GitFiend                              9NMNKLTSZNKC                    Unknown               msstore
GitLooker                             9PK6TGX9T87P                    Unknown               msstore
Git                                   Git.Git                         2.51.0.2              winget
Git                                   Microsoft.Git                   2.51.0.0.3            winget
RepoZ                                 AndreasWascher.RepoZ            5.5          Tag: git winget
Araxis Merge                          Araxis.Merge                    2025.1       Tag: git winget
Sourcetree                            Atlassian.Sourcetree            3.4.26       Tag: git winget
GitKraken                             Axosoft.GitKraken               11.4.0       Tag: git winget
Commitly                              Commitly.Commitly               1.1.2        Tag: git winget
ä¸­æ–‡Git                               DuckStudio.ChineseGit           3.3          Tag: git winget
Fork - a fast and friendly git client Fork.Fork                       2.12.2       Tag: git winget
GLab                                  GLab.GLab                       1.73.0       Tag: git winget
MinGit                                Git.MinGit                      2.51.0.2     Tag: git winget
BusyBox-based MinGit                  Git.MinGit.BusyBox              2.50.1       Tag: git winget
GitButler                             GitButler.GitButler             0.16.8       Tag: git winget
Git Extensions                        GitExtensionsTeam.GitExtensions 5.2.1.18061  Tag: git winget
GitHub Desktop                        GitHub.GitHubDesktop            3.5.3        Tag: git winget
GitHub Desktop Beta                   GitHub.GitHubDesktop.Beta       3.4.17-beta3 Tag: git winget
Git LFS                               GitHub.GitLFS                   3.7.0        Tag: git winget
GitHub CLI                            GitHub.cli                      2.81.0       Tag: git winget
git-sizer                             GitHub.git-sizer                1.5.0        Tag: git winget
smimesign                             GitHub.smimesign                0.2.0-rc1    Tag: git winget
GitTools GitVersion                   GitTools.GitVersion             6.4.0        Tag: git winget
Gitleaks                              Gitleaks.Gitleaks               8.28.0       Tag: git winget
jreleaser                             JReleaser.jreleaser             1.20.0       Tag: git winget
Oh My Posh                            JanDeDobbeleer.OhMyPosh         27.1.2       Tag: git winget
lazygit                               JesseDuffield.lazygit           0.55.1       Tag: git winget
JetBrains Space                       JetBrains.Space                 2023.1.7     Tag: git winget
Gittyup                               Murmele.Gittyup                 1.4.0        Tag: git winget
GitBlade                              Pirinel.GitBlade                00.00.8.9    Tag: git winget
RelaGit                               Rela.RelaGit                    0.16.9       Tag: git winget
Tower                                 SaaSGroup.Tower                 9.3.532      Tag: git winget
PullWatch                             ShipDigital.PullWatch           1.7.13       Tag: git winget
gitui                                 StephanDilly.gitui              0.27.0       Tag: git winget
Sublime Merge                         SublimeHQ.SublimeMerge          2112         Tag: git winget
Sublime Merge (Dev)                   SublimeHQ.SublimeMerge.Dev      2057         Tag: git winget
Talisman                              Thoughtworks.Talisman           1.37.0       Tag: git winget
GitFiend                              TobySuggate.GitFiend            0.45.3       Tag: git winget
TortoiseGit                           TortoiseGit.TortoiseGit         2.17.0.2     Tag: git winget
TortoiseSVN                           TortoiseSVN.TortoiseSVN         1.14.9.29743 Tag: git winget
Agent Git                             Xidicone.AgentGit               1.88         Tag: git winget
Gource                                acaudwell.Gource                0.53         Tag: git winget
GitQL                                 amrdeveloper.gitql              0.37.0       Tag: git winget
soft-serve                            charmbracelet.soft-serve        0.10.0       Tag: git winget
delta                                 dandavison.delta                0.18.2       Tag: git winget
dev-sidecar                           docmirror.dev-sidecar           2.0.0        Tag: git winget
Lefthook                              evilmartians.lefthook           1.13.6       Tag: git winget
git-cola                              git-cola.git-cola               4.15.0       Tag: git winget
gittuf                                gittuf.gittuf                   0.12.0       Tag: git winget
git-credential-azure                  hickford.git-credential-azure   0.3.1        Tag: git winget
git-credential-oauth                  hickford.git-credential-oauth   0.16.0       Tag: git winget
jj                                    jj-vcs.jj                       0.34.0       Tag: git winget
BlastMerge                            ktsu.BlastMerge                 1.0.19       Tag: git winget
jj                                    martinvonz.jj                   0.30.0       Tag: git winget
onefetch                              o2sh.onefetch                   2.25.0       Tag: git winget
git-cliff                             orhun.git-cliff                 2.10.1       Tag: git winget
git-age                               prskr.git-age                   0.2.4        Tag: git winget
git-absorb                            tummychow.git-absorb            0.8.0        Tag: git winget
ghq                                   x-motemen.ghq                   1.8.0        Tag: git winget
GitNote                               zhaopengme.gitnote              3.1.0        Tag: git winget
Fundels                               CartamundiDigital.Fundels       3.2.8                 winget
FastGithub                            CoolPlayLin.FastGithub          2.1.4                 winget
MaxTo                                 DigitalCreations.MaxTo          2.2.1                 winget
DD-TV                                 DigitalDevices.DD-TV            1.15.0.0              winget
Soulframe                             DigitalExtremes.Soulframe       1.0.0                 winget
Warframe                              DigitalExtremes.Warframe        1.0.0                 winget
doctl                                 DigitalOcean.Doctl              1.145.0               winget
Tropy                                 DigitalScholar.Tropy            1.16.2                winget
Zotero                                DigitalScholar.Zotero           7.0.24                winget
Papers                                DigitalScience.Papers           4.37.2395             winget
Duplicate Cleaner Free 4              DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.2                 winget
Duplicate Cleaner Pro 4               DigitalVolcanoSoftware.Duplicaâ€¦ 4.1.4                 winget
Duplicate Cleaner Pro 5               DigitalVolcanoSoftware.Duplicaâ€¦ 5.25.0.0              winget
Hash Tool                             DigitalVolcanoSoftware.HashTool 1.2.1                 winget
TaskCanvas                            DigitalVolcanoSoftware.TaskCanâ€¦ 1.4                   winget
TextCrawler Free                      DigitalVolcanoSoftware.TextCraâ€¦ 3.1.2                 winget
TextCrawler Pro                       DigitalVolcanoSoftware.TextCraâ€¦ 3.1.3                 winget
DQViewer                              DigiteqAutomotive.DQViewer      4.3                   winget
GitHub æ ‡ç­¾ç®¡ç†å™¨                     DuckStudio.GitHubLabelsManager  1.13                  winget
GitHubView                            DuckStudio.GitHubView           1.0.5                 winget
GitHubView (Nightly)                  DuckStudio.GitHubView.Nightly   2025.09.08.â€¦          winget
Git Credential Manager (User)         Git.GCM                         2.6.1                 winget
Git for Windows SDK                   Git.SDK                         1.0.8                 winget
GitAhead                              GitAhead.GitAhead               2.7.1                 winget
Atom                                  GitHub.Atom                     1.60.0                winget
Atom Beta                             GitHub.Atom.Beta                1.61.0-beta0          winget
classroom-assistant                   GitHub.ClassroomAssistant       2.0.4                 winget
hub                                   GitHub.hub                      2.14.2                winget
GitKraken CLI                         GitKraken.cli                   3.1.40                winget
tea                                   Gitea.tea                       0.9.2                 winget
Gitify                                Gitify.Gitify                   6.9.1                 winget
GitLab Runner                         Gitlab.Runner                   18.4.0                winget
AnimeBack                             LeGitHubDeTai.AnimeBack         8.0.9                 winget
Lingdys 4                             LingitAS.Lingdys4               4.5.149.0             winget
Logitech Camera Settings              Logitech.CameraSettings         2.12.20.0             winget
Logitech Gamepad F710 Connection Utiâ€¦ Logitech.F710ConnectUtility     2.15.264              winget
Logitech G HUB                        Logitech.GHUB                   2025.7.7683â€¦          winget
Logitech Gaming Software              Logitech.LGS                    9.04.49               winget
Logi Bolt                             Logitech.LogiBolt               1.2.6024.0            winget
Logi Tune                             Logitech.LogiTune               3.11.89.0             winget
MyHarmony                             Logitech.MyHarmony              1.0.308               winget
Logitech Onboard Memory Manager       Logitech.OnboardMemoryManager   2.5.358               winget
Logitech Options                      Logitech.Options                10.26.12              winget
Logi Options+                         Logitech.OptionsPlus            1.96.781095           winget
Logitech Presentation                 Logitech.Presentation           2.10.34               winget
Logitech SetPoint                     Logitech.SetPoint               6.90.66               winget
Logitech Solar App                    Logitech.Solar                  1.20.28               winget
Logitech Sync                         Logitech.Sync                   3.8.254.0             winget
Logitech Unifying Software            Logitech.UnifyingSoftware       2.52.33               winget
GitHub extension for Command Palette  Microsoft.CmdPalGitHubExtension 0.103.178.0           winget
GVFS                                  Microsoft.VFSforGit             1.0.25169.1           winget
Reduce Audio Latency                  MiniantGit.REAL                 0.2.0                 winget
ISY Linker                            NorconsultDigital.ISYLinker     11.6.0.0              winget
Igitt                                 Nstr.Igitt                      v0.1.13               winget
GitHubReleaseNotes                    StefHeyenrath.GitHubReleaseNotâ€¦ 1.0.10.1              winget
SmartGit                              Syntevo.SmartGit                24.1.3                winget
Snagit 2020                           TechSmith.Snagit.2020           20.1.8.16558          winget
Snagit 2021                           TechSmith.Snagit.2021           21.4.7                winget
Snagit 2022                           TechSmith.Snagit.2022           22.1.7                winget
Snagit 2023                           TechSmith.Snagit.2023           23.2.6                winget
Snagit 2024                           TechSmith.Snagit.2024           24.3.4                winget
Snagit 2025                           TechSmith.Snagit.2025           25.3.1                winget
Fusion Digital Power Designer         TexasInstruments.FusionDigitalâ€¦ 7.10.1                winget
Kitfox                                WesternDigital.Kitfox           1.1.1.1               winget
WD Security                           WesternDigital.Security         2.1.4.358             winget
WimyGit                               Wimysoft.WimyGit                1.2.0                 winget
gitsqlite                             danielsiegl.gitsqlite           0.8.0                 winget
poke-cli                              digitalghost-dev.poke-cli       1.5.2                 winget
Thermal                               gitthermal.thermal              0.0.4                 winget
gitg                                  gnome.gitg                      41                    winget
Upgit                                 pluveto.Upgit                   0.2.18                winget
Dragit                                sireliah.dragit                 0.7.1                 winget
SourceGit                             sourcegit-scm.SourceGit         2025.35               winget
git-grab                              wezm.git-grab                   3.0.0                 winget
regit                                 woaitsAryan.regit               0.4.2                 winget
WSJT-X: Digital Modes for Weak Signaâ€¦ JoeTaylor.WSJT-X                2.7.0                 winget
IPVTest                               Vipre.IPVTest                   1.0.0.0      Commandâ€¦ winget
Adobe DNG Converter                   Adobe.DNGConverter              17.5.1       Tag: diâ€¦ winget
ç™¾åº¦è¯­éŸ³è¾“å…¥                          Baidu.BaiduSpeechInput          2.0.0.33     Tag: loâ€¦ winget
CloudShow Launcher                    BinaryFortress.CloudShow        6.5.0.0      Tag: diâ€¦ winget
Dragonframe 2025                      DZEDSystems.Dragonframe         2025.05.4    Tag: diâ€¦ winget
NVC VHDL Simulator                    NickGasson.NVC                  1.18.0       Tag: diâ€¦ winget
Logisim-evolution                     logisim-evolution.logisim-evolâ€¦ 3.9.0        Tag: diâ€¦ winget
Bit4id - Firma4ng-InfoCamere          Bit4id.Firma4ng.InfoCamere      1.6.14       Tag: diâ€¦ winget
DigiDoc4 Client                       RIA.DigiDoc4                    4.8.2        Tag: diâ€¦ winget
eID software                          RIA.eIDsoftware                 25.8.18.8398 Tag: diâ€¦ winget
WSL Manager                           Bostrot.WSLManager              1.8.17       Tag: giâ€¦ winget
DRA                                   CosimoMatteini.DRA              0.9.0        Tag: giâ€¦ winget
Lepton                                CosmoX.Lepton                   1.10.0       Tag: giâ€¦ winget
AppInstaller File Builder(Preview)    Microsoft.AppInstallerFileBuilâ€¦ 1.2020.221.0 Tag: giâ€¦ winget
Cacher                                PenguinLabs.Cacher              2.43.2       Tag: giâ€¦ winget
Eget                                  ZacharyYedidia.Eget             1.3.4        Tag: giâ€¦ winget
MarkRight                             dvcrn.markright                 0.1.11       Tag: giâ€¦ winget
grp                                   feraxhp.grp                     0.7.4        Tag: giâ€¦ winget
act                                   nektos.act                      0.2.81       Tag: giâ€¦ winget
REAPER                                Cockos.REAPER                   7.48         Tag: diâ€¦ winget
LMMS                                  LMMS.LMMS                       1.2.2        Tag: diâ€¦ winget
Renoise                               Renoise.Renoise                 3.4.4        Tag: diâ€¦ winget
YYè°ƒéŸ³å°                              YY.YYAudio                      1.23.4.0     Tag: diâ€¦ winget
DAWG                                  dawg.dawg                       0.2.3        Tag: diâ€¦ winget
Corsair iCUE5 Software                Corsair.iCUE.5                  5.34.66      Tag: coâ€¦ winget
Dolt                                  DoltHub.Dolt                    1.59.18      Tag: giâ€¦ winget
Gridea                                EryouHao.Gridea                 0.9.3        Tag: giâ€¦ winget
Flux                                  FluxCD.Flux                     2.7.0        Tag: giâ€¦ winget
Cobalt SSG                            cobalt-org.cobalt               0.20.0       Tag: giâ€¦ winget
Ferium                                GorillaDevs.Ferium              4.7.1        Tag: giâ€¦ winget
VEC DigiLib                           LAVANJV.vecdigilib              1.0.0        Tag: diâ€¦ winget
HeadsetControl-GUI                    LeoKlaus.HeadsetControl-GUI     0.19.5       Tag: Loâ€¦ winget
OpenHantek6022                        OpenHantek.OpenHantek6022       3.4.0        Tag: diâ€¦ winget
ChanSort                              PredatH0r.ChanSort              2025-03-08   Tag: diâ€¦ winget
RescueTime                            RescueTime.DesktopApp           3.2.11.5     Tag: diâ€¦ winget
SatDump                               SatDump.SatDump                 1.2.2        Tag: diâ€¦ winget
ArtHub                                Tencent.ArtHub                  1.18.0       Tag: diâ€¦ winget
WK Radar                              WK.WKRadar                      7.16.0       Tag: Baâ€¦ winget
FileQL                                amrdeveloper.fileql             0.10.0       Tag: giâ€¦ winget
direnv                                direnv.direnv                   2.37.1       Tag: giâ€¦ winget
score                                 ossia.score                     3.7.1        Tag: diâ€¦ winget
actionlint                            rhysd.actionlint                1.7.7        Tag: giâ€¦ winget
PS3 Media Server                      shagrath.PS3MediaServer         1.90.1       Tag: diâ€¦ winget
SoX_ng                                sox_ng.sox_ng                   14.6.0.4     Tag: diâ€¦ winget
xploview                              xploview.xploview               3.3.31       Tag: diâ€¦ winget
PS C:\Users\kushal> winget list Git.Git
Name Id      Version Available Source
-------------------------------------
Git  Git.Git 2.51.0  2.51.0.2  winget
PS C:\Users\kushal> winget show Git.Git
Found Git [Git.Git]
Version: 2.51.0.2
Publisher: The Git Development Community
Publisher Url: https://gitforwindows.org/
Publisher Support Url: https://github.com/git-for-windows/git/issues
Moniker: git
Description:
  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
  Git for Windows focuses on offering a lightweight, native set of tools that bring the full feature set of the Git SCM to Windows while providing appropriate user interfaces for experienced Git users and novices alike.
Homepage: https://gitforwindows.org/
License: GPL-2.0
License Url: https://github.com/git-for-windows/build-extra/blob/HEAD/LICENSE.txt
Copyright: Copyright (C) 1989, 1991 Free Software Foundation, Inc.
Release Notes:
  Changes since Git for Windows v2.51.0 (August 19th 2025)
  New Features
  - Comes with PCRE2 v10.46.
  - Comes with cURL v8.16.0. This addresses a bug where fetches/pushes could fail with failed to read data from server: SEC_E_CONTEXT_EXPIRED (0x80090317) under certain circumstances. Also included: a back-port of a fix for a bug where connection failures were mistakenly reported as time-outs.
  - Comes with Tig v2.6.0.
  - Comes with MinTTY v3.8.1.
  - Comes with OpenSSL v3.5.3.
  Bug Fixes
  - The auto-updater now shows Git for Windows icon in the notification also on Windows/ARM64.
  - git clone/git fetch now deals more gracefully with directory / file conflicts when the files backend is used for ref storage, by failing only the ones that are involved in the conflict while allowing others. This is a regression in Git v2.51.0 that was reported in Git for Windows and independently also to the Git mailing list. This was fixed by merging Git's topic branch kn/refs-files-case-insensitive.
  - Support for pathspecs in diff --no-index was somewhat buggy, which has been fixed.
  - git sparse-checkout subcommand learned a new clean action to prune otherwise unused working-tree files that are outside the areas of interest. An earlier version of this had been integrated into MicrosoftGit already. This was fixed by merging Git's topic branch ds/sparse-checkout-clean.
  - git rebase -i failed to clean-up the commit log message when the command commits the final one in a chain of "fixup" commands, which has been corrected. Backported from Git's topic branch pw/rebase-i-cleanup-fix.
  - git subtree did not work correctly when splitting squashed subtrees, which has been improved. Backported from Git's topic branch cs/subtree-squash-split-fix.
  - Some among git add -p and friends ignored color.diff and/or color.ui configuration variables, which is an old regression, which has been corrected. This was fixed by merging Git's topic branch jk/add-i-color.
  - A corner-case bug in git log -L... has been corrected. This was fixed by merging Git's topic branch sg/line-log-boundary-fixes.
  - A broken or malicious git fetch can say that it has the same object for many many times, and the upload-pack serving it can exhaust memory storing them redundantly, which has been corrected. This was fixed by merging Git's topic branch ps/upload-pack-oom-protection.
  - Fixes multiple crashes around midx write-out codepaths. This was fixed by merging Git's topic branch ds/midx-write-fixes.
  - git repack --path-walk lost objects in some corner cases, which has been corrected. This was fixed by merging Git's topic branch ds/path-walk-repack-fix.
  - Under a race against another process that is repacking the repository, especially a partially cloned one, git fetch may mistakenly think some objects we do have are missing, which has been corrected. Thiswas fixed by merging Git's topic branch jk/fetch-check-graph-objects-fix.
  - Various options to git diff that makes comparison ignore certain aspects of the differences (like "space changes are ignored", "differences in lines that match these regular expressions are ignored") did not work well with --name-only and friends. This was fixed by merging Git's topic branch ly/diff-name-only-with-diff-from-content.
  - git diff --no-index run inside a subdirectory under control of a Git repository operated at the top of the working tree and stripped the prefix from the output, and oddballs like "-" (stdin) did not work correctly because of it. Correct the set-up by undoing what the set-up sequence did to the current working directory and prefix. This was fixed by merging Git's topic branch jc/diff-no-index-in-subdir.
  - Various bugs about rename handling in "ort" merge strategy have been fixed. This was fixed by merging Git's topic branch en/ort-rename-fixes.
  - git push had a code path that led to BUG() but it should have reported a regular failure, as it is a response to a usual but invalid end-user action to attempt pushing an object that does not exist. This was fixed by merging Git's topic branch dl/push-missing-object-error.
  - git refs migrate to migrate the reflog entries from a refs backend to another had a handful of bugs squashed. This was fixed by merging Git's topic branch ps/reflog-migrate-fixes.
  - During interactive rebase, using drop on a merge commit lead to an error, which was incorrect. This was fixed by merging Git's topic branch js/rebase-i-allow-drop-on-a-merge.
Release Notes Url: https://github.com/git-for-windows/git/releases/tag/v2.51.0.windows.2
Documentation:
  Wiki: https://github.com/git-for-windows/git/wiki
Tags:
  git
  vcs
Installer:
  Installer Type: inno
  Installer Url: https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  Installer SHA256: 5cf583441ccd8d98d3492936235b6ee30c6847d1b3f49365d6a025b3432094ad
  Release Date: 2025-09-29
  Offline Distribution Supported: true
PS C:\Users\kushal> winget install Git.Git
Found an existing package already installed. Trying to upgrade the installed package...
Found Git [Git.Git] Version 2.51.0.2
This application is licensed to you by its owner.
Microsoft is not responsible for, nor does it grant any licenses to, third-party packages.
Downloading https://github.com/git-for-windows/git/releases/download/v2.51.0.windows.2/Git-2.51.0.2-64-bit.exe
  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  62.8 MB / 62.8 MB
Successfully verified installer hash
Starting package install...
The installer will request to run as administrator. Expect a prompt.
Successfully installed
PS C:\Users\kushal> git --version
git version 2.51.0.windows.2
PS C:\Users\kushal> dotnet --info
.NET SDK:
 Version:           10.0.100-rc.1.25451.107
 Commit:            2db1f5ee2b
 Workload version:  10.0.100-manifests.a6e8bec0
 MSBuild version:   17.15.0-preview-25451-107+2db1f5ee2

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.26100
 OS Platform: Windows
 RID:         win-x64
 Base Path:   C:\Program Files\dotnet\sdk\10.0.100-rc.1.25451.107\

.NET workloads installed:
There are no installed workloads to display.
Configured to use workload sets when installing new manifests.
No workload sets are installed. Run "dotnet workload restore" to install a workload set.

Host:
  Version:      10.0.0-rc.1.25451.107
  Architecture: x64
  Commit:       2db1f5ee2b

.NET SDKs installed:
  9.0.305 [C:\Program Files\dotnet\sdk]
  10.0.100-rc.1.25451.107 [C:\Program Files\dotnet\sdk]

.NET runtimes installed:
  Microsoft.AspNetCore.App 8.0.20 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 9.0.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 10.0.0-rc.1.25451.107 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 8.0.20 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 9.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 10.0.0-rc.1.25451.107 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 8.0.20 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 9.0.9 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 10.0.0-rc.1.25451.107 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

Other architectures found:
  x86   [C:\Program Files (x86)\dotnet]
    registered at [HKLM\SOFTWARE\dotnet\Setup\InstalledVersions\x86\InstallLocation]

Environment variables:
  Not set

global.json file:
  Not found

Learn more:
  https://aka.ms/dotnet/info

Download .NET:
  https://aka.ms/dotnet/download
PS C:\Users\kushal>
PS C:\Users\kushal> Set-Location "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet build; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet test; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";  git commit --message "add existing files"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git remote show origin; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git fetch; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git pull; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git clean -dfx; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; .\Export-Project.ps1 -ProjectPath "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\" -OutputFile "my_project_export.txt"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git commit --message "add all files" --message "update project"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git push origin --all; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated --pre-release Always --upgrade; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy

Build succeeded in 0.5s
2025-10-08-13-27-18
Restore complete (0.8s)
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  MyOpenTelemetryApi.Domain succeeded (0.1s) â†’ src\MyOpenTelemetryApi.Domain\bin\Debug\net10.0\MyOpenTelemetryApi.Domain.dll
  MyOpenTelemetryApi.Application succeeded (0.3s) â†’ src\MyOpenTelemetryApi.Application\bin\Debug\net10.0\MyOpenTelemetryApi.Application.dll
  MyOpenTelemetryApi.Infrastructure succeeded (0.4s) â†’ src\MyOpenTelemetryApi.Infrastructure\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.dll
  MyOpenTelemetryApi.Api succeeded (1.0s) â†’ src\MyOpenTelemetryApi.Api\bin\Debug\net10.0\MyOpenTelemetryApi.Api.dll
  MyOpenTelemetryApi.Application.Tests succeeded (0.4s) â†’ tests\MyOpenTelemetryApi.Application.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Application.Tests.dll
  MyOpenTelemetryApi.Infrastructure.Tests succeeded (0.4s) â†’ tests\MyOpenTelemetryApi.Infrastructure.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.Tests.dll
  MyOpenTelemetryApi.Api.Tests succeeded (0.4s) â†’ tests\MyOpenTelemetryApi.Api.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Api.Tests.dll

Build succeeded in 2.7s
2025-10-08-13-27-21
Restore complete (0.6s)
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  MyOpenTelemetryApi.Domain succeeded (0.0s) â†’ src\MyOpenTelemetryApi.Domain\bin\Debug\net10.0\MyOpenTelemetryApi.Domain.dll
  MyOpenTelemetryApi.Application succeeded (0.0s) â†’ src\MyOpenTelemetryApi.Application\bin\Debug\net10.0\MyOpenTelemetryApi.Application.dll
  MyOpenTelemetryApi.Infrastructure succeeded (0.1s) â†’ src\MyOpenTelemetryApi.Infrastructure\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.dll
  MyOpenTelemetryApi.Api succeeded (0.3s) â†’ src\MyOpenTelemetryApi.Api\bin\Debug\net10.0\MyOpenTelemetryApi.Api.dll
  MyOpenTelemetryApi.Api.Tests succeeded (0.1s) â†’ tests\MyOpenTelemetryApi.Api.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Api.Tests.dll
  MyOpenTelemetryApi.Application.Tests succeeded (0.1s) â†’ tests\MyOpenTelemetryApi.Application.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Application.Tests.dll
  MyOpenTelemetryApi.Infrastructure.Tests succeeded (0.1s) â†’ tests\MyOpenTelemetryApi.Infrastructure.Tests\bin\Debug\net10.0\MyOpenTelemetryApi.Infrastructure.Tests.dll
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.5+1b188a7b0a (64-bit .NET 10.0.0-rc.1.25451.107)
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.5+1b188a7b0a (64-bit .NET 10.0.0-rc.1.25451.107)
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.5+1b188a7b0a (64-bit .NET 10.0.0-rc.1.25451.107)
[xUnit.net 00:00:00.28]   Discovering: MyOpenTelemetryApi.Application.Tests
[xUnit.net 00:00:00.28]   Discovering: MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.28]   Discovering: MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.32]   Discovered:  MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.33]   Discovered:  MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.35]   Discovered:  MyOpenTelemetryApi.Application.Tests
[xUnit.net 00:00:00.34]   Starting:    MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.35]   Starting:    MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.37]   Starting:    MyOpenTelemetryApi.Application.Tests
[xUnit.net 00:00:00.53]   Finished:    MyOpenTelemetryApi.Api.Tests
[xUnit.net 00:00:00.54]   Finished:    MyOpenTelemetryApi.Infrastructure.Tests
[xUnit.net 00:00:00.57]   Finished:    MyOpenTelemetryApi.Application.Tests
  MyOpenTelemetryApi.Api.Tests test succeeded (1.5s)
  MyOpenTelemetryApi.Infrastructure.Tests test succeeded (1.5s)
  MyOpenTelemetryApi.Application.Tests test succeeded (1.5s)

Test summary: total: 44, failed: 0, succeeded: 44, skipped: 0, duration: 1.5s
Build succeeded in 2.9s
2025-10-08-13-27-24
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy

Build succeeded in 0.6s
2025-10-08-13-27-25
2025-10-08-13-27-25
[main e22138b] add existing files
 2 files changed, 614 insertions(+), 6376 deletions(-)
2025-10-08-13-27-25
* remote origin
  Fetch URL: https://github.com/collabskus/MyOpenTelemetryApi.git
  Push  URL: https://github.com/collabskus/MyOpenTelemetryApi.git
  HEAD branch: main
  Remote branches:
    main                                                                                             tracked
    refs/remotes/origin/dependabot/github_actions/actions/checkout-5                                 stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/actions/setup-dotnet-5                             stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.12   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.13   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.14   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/github_actions/danielpalme/ReportGenerator-GitHub-Action-5.4.16   stale (use 'git remote prune' to remove)
    refs/remotes/origin/dependabot/nuget/tests/MyOpenTelemetryApi.Api.Tests/test-packages-d1750de658 stale (use 'git remote prune' to remove)
    refs/remotes/origin/feat/dotnet-10                                                               stale (use 'git remote prune' to remove)
  Local branch configured for 'git pull':
    main merges with remote main
  Local ref configured for 'git push':
    main pushes to main (fast-forwardable)
2025-10-08-13-27-26
2025-10-08-13-27-26
Current branch main is up to date.
2025-10-08-13-27-26
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
2025-10-08-13-27-26
Removing src/MyOpenTelemetryApi.Api/bin/
Removing src/MyOpenTelemetryApi.Api/obj/
Removing src/MyOpenTelemetryApi.Application/bin/
Removing src/MyOpenTelemetryApi.Application/obj/
Removing src/MyOpenTelemetryApi.Domain/bin/
Removing src/MyOpenTelemetryApi.Domain/obj/
Removing src/MyOpenTelemetryApi.Infrastructure/bin/
Removing src/MyOpenTelemetryApi.Infrastructure/obj/
Removing tests/MyOpenTelemetryApi.Api.Tests/bin/
Removing tests/MyOpenTelemetryApi.Api.Tests/obj/
Removing tests/MyOpenTelemetryApi.Application.Tests/bin/
Removing tests/MyOpenTelemetryApi.Application.Tests/obj/
Removing tests/MyOpenTelemetryApi.Infrastructure.Tests/bin/
Removing tests/MyOpenTelemetryApi.Infrastructure.Tests/obj/
2025-10-08-13-27-26
Starting project export...
Project Path: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\
Output File: my_project_export.txt
Generating directory structure...
Collecting files...
Found 92 files to export
Processing (1/92): .github\dependabot.yml
Processing (2/92): .github\workflows\ci.yml
Processing (3/92): .github\workflows\codeql.yml
Processing (4/92): appsettings.Container.json
Processing (5/92): CONTAINER_SETUP.md
Processing (6/92): docker-compose.yml
Processing (7/92): docs\contact-manager-specification-sheet.md
Processing (8/92): docs\contact-manager-specification-sheet-backend.md
Processing (9/92): docs\llm.md
Processing (10/92): docs\log-sample.txt
Processing (11/92): docs\scratch.md
Processing (12/92): docs\Windows PowerShell.txt
Processing (13/92): LICENSE.txt
Processing (14/92): my_project_export.txt
Processing (15/92): MyOpenTelemetryApi.sln
Processing (16/92): podman-compose.yml
Processing (17/92): README.md
Processing (18/92): src\MyOpenTelemetryApi.Api\appsettings.Development.json
Processing (19/92): src\MyOpenTelemetryApi.Api\appsettings.json
Processing (20/92): src\MyOpenTelemetryApi.Api\appsettings.Production.json
Processing (21/92): src\MyOpenTelemetryApi.Api\Authentication\ApiKeyAuthenticationHandler.cs
Processing (22/92): src\MyOpenTelemetryApi.Api\Controllers\ContactsController.cs
Processing (23/92): src\MyOpenTelemetryApi.Api\Controllers\GroupsController.cs
Processing (24/92): src\MyOpenTelemetryApi.Api\Controllers\HealthController.cs
Processing (25/92): src\MyOpenTelemetryApi.Api\Controllers\TagsController.cs
Processing (26/92): src\MyOpenTelemetryApi.Api\dependencies.json
Processing (27/92): src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj
Processing (28/92): src\MyOpenTelemetryApi.Api\Program.cs
Processing (29/92): src\MyOpenTelemetryApi.Api\Properties\launchSettings.json
Processing (30/92): src\MyOpenTelemetryApi.Api\Telemetry\FileExporter.cs
Processing (31/92): src\MyOpenTelemetryApi.Api\Telemetry\TelemetryConstants.cs
Processing (32/92): src\MyOpenTelemetryApi.Api\Telemetry\TelemetryExtensions.cs
Processing (33/92): src\MyOpenTelemetryApi.Application\DTOs\AddressDto.cs
Processing (34/92): src\MyOpenTelemetryApi.Application\DTOs\ContactDto.cs
Processing (35/92): src\MyOpenTelemetryApi.Application\DTOs\ContactSummaryDto.cs
Processing (36/92): src\MyOpenTelemetryApi.Application\DTOs\CreateContactDto.cs
Processing (37/92): src\MyOpenTelemetryApi.Application\DTOs\EmailAddressDto.cs
Processing (38/92): src\MyOpenTelemetryApi.Application\DTOs\GroupDto.cs
Processing (39/92): src\MyOpenTelemetryApi.Application\DTOs\PaginatedResultDto.cs
Processing (40/92): src\MyOpenTelemetryApi.Application\DTOs\PhoneNumberDto.cs
Processing (41/92): src\MyOpenTelemetryApi.Application\DTOs\TagDto.cs
Processing (42/92): src\MyOpenTelemetryApi.Application\DTOs\UpdateContactDto.cs
Processing (43/92): src\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj
Processing (44/92): src\MyOpenTelemetryApi.Application\Services\ContactService.cs
Processing (45/92): src\MyOpenTelemetryApi.Application\Services\GroupService.cs
Processing (46/92): src\MyOpenTelemetryApi.Application\Services\IContactService.cs
Processing (47/92): src\MyOpenTelemetryApi.Application\Services\IGroupService.cs
Processing (48/92): src\MyOpenTelemetryApi.Application\Services\ITagService.cs
Processing (49/92): src\MyOpenTelemetryApi.Application\Services\TagService.cs
Processing (50/92): src\MyOpenTelemetryApi.Domain\Entities\Address.cs
Processing (51/92): src\MyOpenTelemetryApi.Domain\Entities\AddressType.cs
Processing (52/92): src\MyOpenTelemetryApi.Domain\Entities\Contact.cs
Processing (53/92): src\MyOpenTelemetryApi.Domain\Entities\ContactGroup.cs
Processing (54/92): src\MyOpenTelemetryApi.Domain\Entities\ContactTag.cs
Processing (55/92): src\MyOpenTelemetryApi.Domain\Entities\EmailAddress.cs
Processing (56/92): src\MyOpenTelemetryApi.Domain\Entities\EmailType.cs
Processing (57/92): src\MyOpenTelemetryApi.Domain\Entities\Group.cs
Processing (58/92): src\MyOpenTelemetryApi.Domain\Entities\PhoneNumber.cs
Processing (59/92): src\MyOpenTelemetryApi.Domain\Entities\PhoneType.cs
Processing (60/92): src\MyOpenTelemetryApi.Domain\Entities\Tag.cs
Processing (61/92): src\MyOpenTelemetryApi.Domain\Interfaces\IContactRepository.cs
Processing (62/92): src\MyOpenTelemetryApi.Domain\Interfaces\IGroupRepository.cs
Processing (63/92): src\MyOpenTelemetryApi.Domain\Interfaces\IRepository.cs
Processing (64/92): src\MyOpenTelemetryApi.Domain\Interfaces\ITagRepository.cs
Processing (65/92): src\MyOpenTelemetryApi.Domain\Interfaces\IUnitOfWork.cs
Processing (66/92): src\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj
Processing (67/92): src\MyOpenTelemetryApi.Infrastructure\Data\AppDbContext.cs
Processing (68/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\AddressConfiguration.cs
Processing (69/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactConfiguration.cs
Processing (70/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactGroupConfiguration.cs
Processing (71/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactTagConfiguration.cs
Processing (72/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\EmailAddressConfiguration.cs
Processing (73/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\GroupConfiguration.cs
Processing (74/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\PhoneNumberConfiguration.cs
Processing (75/92): src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\TagConfiguration.cs
Processing (76/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.cs
Processing (77/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.Designer.cs
Processing (78/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.cs
Processing (79/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.Designer.cs
Processing (80/92): src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\AppDbContextModelSnapshot.cs
Processing (81/92): src\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj
Processing (82/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\ContactRepository.cs
Processing (83/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\GroupRepository.cs
Processing (84/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\Repository.cs
Processing (85/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\TagRepository.cs
Processing (86/92): src\MyOpenTelemetryApi.Infrastructure\Repositories\UnitOfWork.cs
Processing (87/92): tests\MyOpenTelemetryApi.Api.Tests\MyOpenTelemetryApi.Api.Tests.csproj
Processing (88/92): tests\MyOpenTelemetryApi.Api.Tests\UnitTest1.cs
Processing (89/92): tests\MyOpenTelemetryApi.Application.Tests\MyOpenTelemetryApi.Application.Tests.csproj
Processing (90/92): tests\MyOpenTelemetryApi.Application.Tests\UnitTest1.cs
Processing (91/92): tests\MyOpenTelemetryApi.Infrastructure.Tests\MyOpenTelemetryApi.Infrastructure.Tests.csproj
Processing (92/92): tests\MyOpenTelemetryApi.Infrastructure.Tests\UnitTest1.cs

Export completed successfully!
Output file: C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\my_project_export.txt
Total files exported: 92
Output file size: 1.73 MB
2025-10-08-13-27-27
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   my_project_export.txt

no changes added to commit (use "git add" and/or "git commit -a")
2025-10-08-13-27-27
warning: in the working copy of 'my_project_export.txt', LF will be replaced by CRLF the next time Git touches it
2025-10-08-13-27-27
[main ac73311] add all files
 1 file changed, 18393 insertions(+), 29921 deletions(-)
2025-10-08-13-27-27
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 12 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (8/8), 18.68 KiB | 1006.00 KiB/s, done.
Total 8 (delta 5), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (5/5), completed with 3 local objects.
To https://github.com/collabskus/MyOpenTelemetryApi.git
   acb734e..ac73311  main -> main
2025-10-08-13-27-28
Discovering projects...
Analyzing project(s)...
Analyzing dependencies...
No outdated dependencies were detected
Elapsed: 00:00:02.4340628
2025-10-08-13-27-31
Discovering projects...
Analyzing project(s)...
Analyzing dependencies...
No outdated dependencies were detected
Elapsed: 00:00:02.0199565
2025-10-08-13-27-33
PS C:\Users\kushal\Source\Repos\MyOpenTelemetryApi>
PS C:\Users\kushal\Source\Repos\MyOpenTelemetryApi> Set-Location "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet build; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet test; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet clean; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";  git commit --message "add existing files"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git remote show origin; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git fetch; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git pull; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git clean -dfx; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; .\Export-Project.ps1 -ProjectPath "C:\Users\kushal\Source\Repos\MyOpenTelemetryApi\" -OutputFile "my_project_export.txt"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git status; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git add .; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git commit --message "add all files" --message "update project"; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; git push origin --all; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated; Get-Date -Format "yyyy-MM-dd-HH-mm-ss"; dotnet outdated --pre-release Always --upgrade; Get-Date -Format "yyyy-MM-dd-HH-mm-ss";



================================================================================
FILE: LICENSE.txt
SIZE: 34.36 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

                    GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.



================================================================================
FILE: my_project_export.txt
SIZE: 803.26 KB
MODIFIED: 10/09/2025 07:20:57
================================================================================




================================================================================
FILE: MyOpenTelemetryApi.sln
SIZE: 9.79 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================


Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.0.31903.59
MinimumVisualStudioVersion = 10.0.40219.1
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "src", "src", "{827E0CD3-B72D-47B6-A68D-7590B98EB39B}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Api", "src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj", "{B9DF766D-71BB-40EB-9A6D-51DF524CA899}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Application", "src\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj", "{1FF8AB76-1400-42A6-8C31-7959DC9A713C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Domain", "src\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj", "{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Infrastructure", "src\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj", "{37B7F2CB-6E46-4A19-A247-10730E4F2685}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "tests", "tests", "{0AB3BF05-4346-4AA6-1389-037BE0695223}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Api.Tests", "tests\MyOpenTelemetryApi.Api.Tests\MyOpenTelemetryApi.Api.Tests.csproj", "{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Application.Tests", "tests\MyOpenTelemetryApi.Application.Tests\MyOpenTelemetryApi.Application.Tests.csproj", "{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyOpenTelemetryApi.Infrastructure.Tests", "tests\MyOpenTelemetryApi.Infrastructure.Tests\MyOpenTelemetryApi.Infrastructure.Tests.csproj", "{7330F9A2-4397-4D0C-B280-CA0666A87CAD}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{8EC462FD-D22E-90A8-E5CE-7E832BA40C5D}"
	ProjectSection(SolutionItems) = preProject
		README.md = README.md
	EndProjectSection
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x64.ActiveCfg = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x64.Build.0 = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x86.ActiveCfg = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Debug|x86.Build.0 = Debug|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|Any CPU.Build.0 = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x64.ActiveCfg = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x64.Build.0 = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x86.ActiveCfg = Release|Any CPU
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899}.Release|x86.Build.0 = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x64.ActiveCfg = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x64.Build.0 = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x86.ActiveCfg = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Debug|x86.Build.0 = Debug|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|Any CPU.Build.0 = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x64.ActiveCfg = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x64.Build.0 = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x86.ActiveCfg = Release|Any CPU
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C}.Release|x86.Build.0 = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x64.ActiveCfg = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x64.Build.0 = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x86.ActiveCfg = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Debug|x86.Build.0 = Debug|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|Any CPU.Build.0 = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x64.ActiveCfg = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x64.Build.0 = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x86.ActiveCfg = Release|Any CPU
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648}.Release|x86.Build.0 = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x64.ActiveCfg = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x64.Build.0 = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x86.ActiveCfg = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Debug|x86.Build.0 = Debug|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|Any CPU.Build.0 = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x64.ActiveCfg = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x64.Build.0 = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x86.ActiveCfg = Release|Any CPU
		{37B7F2CB-6E46-4A19-A247-10730E4F2685}.Release|x86.Build.0 = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x64.ActiveCfg = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x64.Build.0 = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x86.ActiveCfg = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Debug|x86.Build.0 = Debug|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|Any CPU.Build.0 = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x64.ActiveCfg = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x64.Build.0 = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x86.ActiveCfg = Release|Any CPU
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3}.Release|x86.Build.0 = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x64.ActiveCfg = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x64.Build.0 = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x86.ActiveCfg = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Debug|x86.Build.0 = Debug|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|Any CPU.Build.0 = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x64.ActiveCfg = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x64.Build.0 = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x86.ActiveCfg = Release|Any CPU
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8}.Release|x86.Build.0 = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x64.ActiveCfg = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x64.Build.0 = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x86.ActiveCfg = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Debug|x86.Build.0 = Debug|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|Any CPU.Build.0 = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x64.ActiveCfg = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x64.Build.0 = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x86.ActiveCfg = Release|Any CPU
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD}.Release|x86.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{B9DF766D-71BB-40EB-9A6D-51DF524CA899} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{1FF8AB76-1400-42A6-8C31-7959DC9A713C} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{84EB8983-F4DB-4DA5-9AE8-6174CF1AE648} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{37B7F2CB-6E46-4A19-A247-10730E4F2685} = {827E0CD3-B72D-47B6-A68D-7590B98EB39B}
		{8FCC8F25-E1B7-431F-936A-19585ED0D2C3} = {0AB3BF05-4346-4AA6-1389-037BE0695223}
		{1AB7BB35-83DB-4262-85C3-4F19265B6CD8} = {0AB3BF05-4346-4AA6-1389-037BE0695223}
		{7330F9A2-4397-4D0C-B280-CA0666A87CAD} = {0AB3BF05-4346-4AA6-1389-037BE0695223}
	EndGlobalSection
EndGlobal



================================================================================
FILE: podman-compose.yml
SIZE: 3.52 KB
MODIFIED: 10/01/2025 21:33:56
================================================================================

# podman-compose.yml - Alternative compose file optimized for Podman
version: '3.8'
services:
  db:
    image: docker.io/library/postgres:16-alpine
    container_name: myotel-postgres
    environment:
      POSTGRES_DB: myoteldb
      POSTGRES_USER: myoteluser
      POSTGRES_PASSWORD: myotelpass123
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./init-db:/docker-entrypoint-initdb.d:Z
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myoteluser", "-d", "myoteldb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - myotel-network
    restart: unless-stopped
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myotel-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - ASPNETCORE_HTTP_PORTS=8080
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=myoteldb;Username=myoteluser;Password=myotelpass123;Include Error Detail=true;
      - OpenTelemetry__ServiceName=MyOpenTelemetryApi-Podman
      - OpenTelemetry__ServiceVersion=1.0.0-podman
      - OpenTelemetry__Exporter__Console__Enabled=true
      - OpenTelemetry__Exporter__File__Enabled=false
      - OpenTelemetry__Exporter__File__LogPath=/app/logs/otel-logs.json
      - OpenTelemetry__Exporter__OTLP__Enabled=false
      - OpenTelemetry__Sampling__AlwaysOn=true
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command=Warning
      - Logging__LogLevel__MyOpenTelemetryApi=Information
    ports:
      - "0.0.0.0:5174:8080"
    depends_on:
      db:
        condition: service_healthy
    # volumes:
    #   - ./logs:/app/logs:Z
    networks:
      - myotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
  # Optional: Jaeger for OpenTelemetry tracing (uncomment if needed)
  # jaeger:
  #   image: docker.io/jaegertracing/all-in-one:latest
  #   container_name: myotel-jaeger
  #   ports:
  #     - "16686:16686"
  #     - "14250:14250"
  #     - "14268:14268"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true
  #   networks:
  #     - myotel-network
  #   profiles:
  #     - observability
  # Optional: Prometheus for metrics collection (uncomment if needed)
  # prometheus:
  #   image: docker.io/prom/prometheus:latest
  #   container_name: myotel-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:Z
  #   networks:
  #     - myotel-network
  #   profiles:
  #     - observability
  # Optional: Grafana for visualization (uncomment if needed)
  # grafana:
  #   image: docker.io/grafana/grafana:latest
  #   container_name: myotel-grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin123
  #   volumes:
  #     - grafana_data:/var/lib/grafana:Z
  #   networks:
  #     - myotel-network
  #   profiles:
  #     - observability
volumes:
  postgres_data:
    driver: local
  # grafana_data:
  #   driver: local
networks:
  myotel-network:
    driver: bridge



================================================================================
FILE: README.md
SIZE: 7.04 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

# MyOpenTelemetryApi

A RESTful API for managing personal contacts, built with .NET 10, Entity Framework Core, PostgreSQL, and comprehensive OpenTelemetry observability. This project demonstrates clean architecture principles, repository pattern, and modern API development practices with full telemetry integration.

## Features

- **Contact Management**: Full CRUD operations for contacts with detailed information
- **Organization**: Group contacts and apply tags for better organization
- **Search**: Search contacts by name, email, phone, or company
- **Pagination**: Efficient data retrieval with pagination support
- **Clean Architecture**: Separation of concerns with Domain, Application, Infrastructure, and API layers
- **Repository Pattern**: Abstracted data access with Unit of Work pattern
- **PostgreSQL Database**: Using Npgsql provider with Entity Framework Core
- **OpenTelemetry Integration**: Full observability with logs, traces, and metrics
- **Health Checks**: Built-in health and readiness endpoints
- **OpenAPI Documentation**: Built-in API specification generation

## Technology Stack

- **.NET 10.0**: Latest framework with native OpenAPI support
- **Entity Framework Core 10.0**: Code-first ORM with migrations
- **PostgreSQL**: Open-source relational database
- **OpenTelemetry**: Comprehensive observability and monitoring
- **xUnit**: Unit testing framework
- **C# 13**: With nullable reference types enabled

## Project Structure

```
MyOpenTelemetryApi/
├── src/
│   ├── MyOpenTelemetryApi.Api/          # Web API controllers and configuration
│   ├── MyOpenTelemetryApi.Domain/       # Domain entities and interfaces
│   ├── MyOpenTelemetryApi.Application/  # Business logic and DTOs
│   └── MyOpenTelemetryApi.Infrastructure/ # Data access and external services
├── tests/
│   ├── MyOpenTelemetryApi.Api.Tests/
│   ├── MyOpenTelemetryApi.Application.Tests/
│   └── MyOpenTelemetryApi.Infrastructure.Tests/
└── MyOpenTelemetryApi.sln
```

## Prerequisites

- .NET 10.0 SDK or later
- PostgreSQL database
- Entity Framework Core tools: `dotnet tool install --global dotnet-ef`

## Getting Started

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd MyOpenTelemetryApi
   ```

2. **Configure the database connection**
   
   For development, use user secrets to store the connection string:
   ```bash
   cd src/MyOpenTelemetryApi.Api
   dotnet user-secrets init
   dotnet user-secrets set "ConnectionStrings:DefaultConnection" "Host=your-host;Database=your-db;Username=your-user;Password=your-password;SSL Mode=Require"
   cd ../..
   ```
   
   For production, use environment variables:
   ```bash
   export ConnectionStrings__DefaultConnection="Host=your-host;Database=your-db;Username=your-user;Password=your-password;SSL Mode=Require"
   ```

3. **Apply database migrations**
   ```bash
   dotnet ef database update --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api
   ```

4. **Run the API**
   ```bash
   dotnet run --project src/MyOpenTelemetryApi.Api
   ```

## OpenTelemetry Configuration

The application includes comprehensive OpenTelemetry integration for observability. Configure exporters in `appsettings.json`:

```json
{
  "OpenTelemetry": {
    "ServiceName": "MyOpenTelemetryApi",
    "ServiceVersion": "1.0.0",
    "Exporter": {
      "Console": { "Enabled": true },
      "OTLP": { "Enabled": false, "Endpoint": "http://localhost:4317" },
      "File": { "Enabled": true, "LogPath": "logs/otel-logs.json" }
    },
    "Sampling": { "AlwaysOn": true, "Ratio": 1.0 }
  }
}
```

### Available Telemetry Features

- **Distributed Tracing**: ASP.NET Core, HTTP Client, and Entity Framework Core instrumentation
- **Metrics**: Runtime, process, and custom application metrics
- **Structured Logging**: JSON-formatted logs with correlation IDs
- **Multiple Exporters**: Console, file, and OTLP (OpenTelemetry Protocol) support

## API Endpoints

### Contacts
- `GET /api/contacts?pageNumber=1&pageSize=20` - Get paginated contacts
- `GET /api/contacts/{id}` - Get contact with full details
- `GET /api/contacts/search?q=searchterm` - Search contacts
- `GET /api/contacts/group/{groupId}` - Get contacts by group
- `GET /api/contacts/tag/{tagId}` - Get contacts by tag
- `POST /api/contacts` - Create new contact
- `PUT /api/contacts/{id}` - Update contact
- `DELETE /api/contacts/{id}` - Delete contact

### Groups
- `GET /api/groups` - Get all groups
- `GET /api/groups/{id}` - Get group by ID
- `POST /api/groups` - Create new group
- `PUT /api/groups/{id}` - Update group
- `DELETE /api/groups/{id}` - Delete group

### Tags
- `GET /api/tags` - Get all tags
- `GET /api/tags/{id}` - Get tag by ID
- `POST /api/tags` - Create new tag
- `PUT /api/tags/{id}` - Update tag
- `DELETE /api/tags/{id}` - Delete tag

### Health
- `GET /api/health` - Basic health check
- `GET /api/health/ready` - Readiness check with migration status

### API Documentation
- `GET /openapi/v1.json` - OpenAPI specification document

## Example Requests

### Create a Contact
```http
POST /api/contacts
{
  "firstName": "John",
  "lastName": "Doe",
  "company": "Acme Corp",
  "emailAddresses": [
    {
      "email": "john.doe@example.com",
      "type": "Work",
      "isPrimary": true
    }
  ],
  "phoneNumbers": [
    {
      "number": "+1-555-123-4567",
      "type": "Mobile",
      "isPrimary": true
    }
  ]
}
```

### Create a Group
```http
POST /api/groups
{
  "name": "Friends",
  "description": "Personal friends and family"
}
```

### Create a Tag
```http
POST /api/tags
{
  "name": "VIP",
  "colorHex": "#FF0000"
}
```

## Development

### Running Tests
```bash
dotnet test
```

### Adding Migrations
```bash
dotnet ef migrations add MigrationName --project src/MyOpenTelemetryApi.Infrastructure --startup-project src/MyOpenTelemetryApi.Api --output-dir Data/Migrations
```

### Building for Production
```bash
dotnet publish -c Release -o ./publish
```

## Architecture Decisions

- **Clean Architecture**: Ensures separation of concerns and testability
- **Repository Pattern with Unit of Work**: Provides abstraction over data access
- **DTOs**: Separate data transfer objects from domain entities
- **Manual Mapping**: No dependency on AutoMapper for simple, explicit mapping
- **FOSS Only**: Uses only free and open-source libraries
- **Minimal Dependencies**: Avoids unnecessary packages to reduce complexity

## 🤖 AI-Assisted Development

This project includes code generated and assisted by large language models (LLMs) such as Claude. While all code has been reviewed and tested, please be aware that some portions were created with AI assistance.

## License
This project is open source and available under the AGPL license.

---
*Notice: This project contains code generated by Large Language Models such as Claude and Gemini. All code is experimental whether explicitly stated or not.*



================================================================================
FILE: src\MyOpenTelemetryApi.Api\appsettings.Development.json
SIZE: 0.5 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Api/appsettings.Development.json - Updated
{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.AspNetCore": "Information",
      "Microsoft.EntityFrameworkCore.Database.Command": "Information",
      "MyOpenTelemetryApi": "Debug"
    }
  },
  "OpenTelemetry": {
    "Exporter": {
      "Console": {
        "Enabled": true
      },
      "OTLP": {
        "Enabled": false
      },
      "File": {
        "Enabled": true
      }
    }
  }
}


================================================================================
FILE: src\MyOpenTelemetryApi.Api\appsettings.json
SIZE: 1.22 KB
MODIFIED: 09/17/2025 14:33:44
================================================================================

// src/MyOpenTelemetryApi.Api/appsettings.json - Updated with OpenTelemetry settings
{
    "Auth": {
        "ApiKey": "your-super-secret-key-here-use-guid-or-random-string"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning",
            "Microsoft.EntityFrameworkCore": "Warning"
        }
    },
    "ConnectionStrings": {
        "DefaultConnection": "CONFIGURED_IN_USER_SECRETS_OR_ENVIRONMENT_VARIABLES"
    },
    "OpenTelemetry": {
        "ServiceName": "MyOpenTelemetryApi",
        "ServiceVersion": "1.0.0",
        "Exporter": {
            "Console": {
                "Enabled": true
            },
            "OTLP": {
                "Enabled": false,
                "Endpoint": "http://localhost:4317",
                "Protocol": "Grpc"
            },
            "File": {
                "Enabled": true,
                "LogPath": "logs/otel-logs.json",
                "TracePath": "logs/otel-traces.json",
                "MetricsPath": "logs/otel-metrics.json"
            }
        },
        "Sampling": {
            "AlwaysOn": true,
            "Ratio": 1.0
        }
    },
    "AllowedHosts": "*"
}


================================================================================
FILE: src\MyOpenTelemetryApi.Api\appsettings.Production.json
SIZE: 0.55 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Api/appsettings.Production.json - New file
{
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "Microsoft.AspNetCore": "Warning",
      "MyOpenTelemetryApi": "Information"
    }
  },
  "OpenTelemetry": {
    "Exporter": {
      "Console": {
        "Enabled": false
      },
      "OTLP": {
        "Enabled": true,
        "Endpoint": "http://localhost:4317"
      },
      "File": {
        "Enabled": false
      }
    },
    "Sampling": {
      "AlwaysOn": false,
      "Ratio": 0.1
    }
  }
}


================================================================================
FILE: src\MyOpenTelemetryApi.Api\Authentication\ApiKeyAuthenticationHandler.cs
SIZE: 1.87 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// Api/Authentication/ApiKeyAuthenticationHandler.cs
using System.Security.Claims;
using System.Text.Encodings.Web;
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Options;

namespace MyOpenTelemetryApi.Api.Authentication;

public class ApiKeyAuthenticationHandler : AuthenticationHandler<ApiKeyAuthenticationOptions>
{
    private const string ApiKeyHeaderName = "X-API-Key";
    private readonly IConfiguration _configuration;

    public ApiKeyAuthenticationHandler(
        IOptionsMonitor<ApiKeyAuthenticationOptions> options,
        ILoggerFactory logger,
        UrlEncoder encoder,
        IConfiguration configuration)
        : base(options, logger, encoder)
    {
        _configuration = configuration;
    }

    protected override Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        if (!Request.Headers.TryGetValue(ApiKeyHeaderName, out var apiKeyHeaderValues))
        {
            return Task.FromResult(AuthenticateResult.NoResult());
        }

        var providedApiKey = apiKeyHeaderValues.FirstOrDefault();
        var configuredApiKey = _configuration["Auth:ApiKey"];

        if (string.IsNullOrEmpty(providedApiKey) ||
            !string.Equals(providedApiKey, configuredApiKey, StringComparison.Ordinal))
        {
            return Task.FromResult(AuthenticateResult.Fail("Invalid API Key"));
        }

        var claims = new[]
        {
            new Claim(ClaimTypes.Name, "ApiUser"),
            new Claim("ApiKey", "Valid")
        };

        var identity = new ClaimsIdentity(claims, Scheme.Name);
        var principal = new ClaimsPrincipal(identity);
        var ticket = new AuthenticationTicket(principal, Scheme.Name);

        return Task.FromResult(AuthenticateResult.Success(ticket));
    }
}

public class ApiKeyAuthenticationOptions : AuthenticationSchemeOptions { }



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\ContactsController.cs
SIZE: 3.29 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/ContactsController.cs
using Microsoft.AspNetCore.Mvc;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Application.Services;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ContactsController : ControllerBase
{
    private readonly IContactService _contactService;

    public ContactsController(IContactService contactService)
    {
        _contactService = contactService;
    }

    [HttpGet]
    public async Task<ActionResult<PaginatedResultDto<ContactSummaryDto>>> GetContacts(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.GetPaginatedAsync(pageNumber, pageSize, cancellationToken);
        return Ok(contacts);
    }

    [HttpGet("{id:guid}")]
    public async Task<ActionResult<ContactDto>> GetContact(Guid id, CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.GetWithDetailsAsync(id, cancellationToken);
        if (contact == null)
        {
            return NotFound();
        }
        return Ok(contact);
    }

    [HttpPost]
    public async Task<ActionResult<ContactDto>> CreateContact(
        CreateContactDto dto,
        CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.CreateAsync(dto, cancellationToken);
        return CreatedAtAction(nameof(GetContact), new { id = contact.Id }, contact);
    }

    [HttpPut("{id:guid}")]
    public async Task<ActionResult<ContactDto>> UpdateContact(
        Guid id,
        UpdateContactDto dto,
        CancellationToken cancellationToken = default)
    {
        var contact = await _contactService.UpdateAsync(id, dto, cancellationToken);
        if (contact == null)
        {
            return NotFound();
        }
        return Ok(contact);
    }

    [HttpDelete("{id:guid}")]
    public async Task<IActionResult> DeleteContact(Guid id, CancellationToken cancellationToken = default)
    {
        var success = await _contactService.DeleteAsync(id, cancellationToken);
        if (!success)
        {
            return NotFound();
        }
        return NoContent();
    }

    [HttpGet("search")]
    public async Task<ActionResult<List<ContactSummaryDto>>> SearchContacts(
        [FromQuery] string query,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.SearchAsync(query, cancellationToken);
        return Ok(contacts);
    }

    [HttpGet("group/{groupId:guid}")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetContactsByGroup(
        Guid groupId,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.GetByGroupAsync(groupId, cancellationToken);
        return Ok(contacts);
    }

    [HttpGet("tag/{tagId:guid}")]
    public async Task<ActionResult<List<ContactSummaryDto>>> GetContactsByTag(
        Guid tagId,
        CancellationToken cancellationToken = default)
    {
        var contacts = await _contactService.GetByTagAsync(tagId, cancellationToken);
        return Ok(contacts);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\GroupsController.cs
SIZE: 2.15 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/GroupsController.cs
using Microsoft.AspNetCore.Mvc;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Application.Services;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class GroupsController(IGroupService groupService, ILogger<GroupsController> logger) : ControllerBase
{
    [HttpGet]
    public async Task<ActionResult<List<GroupDto>>> GetGroups()
    {
        List<GroupDto> groups = await groupService.GetAllAsync();
        return Ok(groups);
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<GroupDto>> GetGroup(Guid id)
    {
        GroupDto? group = await groupService.GetByIdAsync(id);
        if (group == null)
        {
            return NotFound();
        }
        return Ok(group);
    }

    [HttpPost]
    public async Task<ActionResult<GroupDto>> CreateGroup(CreateGroupDto dto)
    {
        try
        {
            GroupDto group = await groupService.CreateAsync(dto);
            return CreatedAtAction(nameof(GetGroup), new { id = group.Id }, group);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error creating group");
            return StatusCode(500, "An error occurred while creating the group.");
        }
    }

    [HttpPut("{id}")]
    public async Task<ActionResult<GroupDto>> UpdateGroup(Guid id, UpdateGroupDto dto)
    {
        try
        {
            GroupDto? group = await groupService.UpdateAsync(id, dto);
            if (group == null)
            {
                return NotFound();
            }
            return Ok(group);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error updating group {GroupId}", id);
            return StatusCode(500, "An error occurred while updating the group.");
        }
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteGroup(Guid id)
    {
        bool deleted = await groupService.DeleteAsync(id);
        if (!deleted)
        {
            return NotFound();
        }
        return NoContent();
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\HealthController.cs
SIZE: 2.27 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/HealthController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class HealthController(AppDbContext dbContext, ILogger<HealthController> logger) : ControllerBase
{
    [HttpGet]
    public async Task<IActionResult> GetHealth()
    {
        var health = new
        {
            Status = "Healthy",
            Timestamp = DateTime.UtcNow,
            Service = "MyOpenTelemetryApi"
        };

        try
        {
            // Test database connectivity
            await dbContext.Database.CanConnectAsync();
            return Ok(health);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Health check failed");
            return StatusCode(503, new
            {
                Status = "Unhealthy",
                Timestamp = DateTime.UtcNow,
                Service = "MyOpenTelemetryApi",
                Error = "Database connection failed"
            });
        }
    }

    [HttpGet("ready")]
    public async Task<IActionResult> GetReadiness()
    {
        try
        {
            // Check if database is accessible and migrations are applied
            await dbContext.Database.CanConnectAsync();
            IEnumerable<string> pendingMigrations = await dbContext.Database.GetPendingMigrationsAsync();

            if (pendingMigrations.Any())
            {
                return StatusCode(503, new
                {
                    Status = "Not Ready",
                    Reason = "Database has pending migrations",
                    PendingMigrations = pendingMigrations
                });
            }

            return Ok(new
            {
                Status = "Ready",
                Timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Readiness check failed");
            return StatusCode(503, new
            {
                Status = "Not Ready",
                Reason = "Database check failed",
                Error = ex.Message
            });
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Controllers\TagsController.cs
SIZE: 2.28 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Api/Controllers/TagsController.cs
using Microsoft.AspNetCore.Mvc;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Application.Services;

namespace MyOpenTelemetryApi.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class TagsController(ITagService tagService, ILogger<TagsController> logger) : ControllerBase
{
    [HttpGet]
    public async Task<ActionResult<List<TagDto>>> GetTags()
    {
        List<TagDto> tags = await tagService.GetAllAsync();
        return Ok(tags);
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<TagDto>> GetTag(Guid id)
    {
        TagDto? tag = await tagService.GetByIdAsync(id);
        if (tag == null)
        {
            return NotFound();
        }
        return Ok(tag);
    }

    [HttpPost]
    public async Task<ActionResult<TagDto>> CreateTag(CreateTagDto dto)
    {
        try
        {
            TagDto tag = await tagService.CreateAsync(dto);
            return CreatedAtAction(nameof(GetTag), new { id = tag.Id }, tag);
        }
        catch (InvalidOperationException ex)
        {
            return Conflict(ex.Message);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error creating tag");
            return StatusCode(500, "An error occurred while creating the tag.");
        }
    }

    [HttpPut("{id}")]
    public async Task<ActionResult<TagDto>> UpdateTag(Guid id, CreateTagDto dto)
    {
        try
        {
            TagDto? tag = await tagService.UpdateAsync(id, dto);
            if (tag == null)
            {
                return NotFound();
            }
            return Ok(tag);
        }
        catch (InvalidOperationException ex)
        {
            return Conflict(ex.Message);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error updating tag {TagId}", id);
            return StatusCode(500, "An error occurred while updating the tag.");
        }
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteTag(Guid id)
    {
        bool deleted = await tagService.DeleteAsync(id);
        if (!deleted)
        {
            return NotFound();
        }
        return NoContent();
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\dependencies.json
SIZE: 5.83 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

{
  "version": 1,
  "parameters": "--include-transitive",
  "projects": [
    {
      "path": "C:/code/MyOpenTelemetryApi/src/MyOpenTelemetryApi.Api/MyOpenTelemetryApi.Api.csproj",
      "frameworks": [
        {
          "framework": "net9.0",
          "topLevelPackages": [
            {
              "id": "Microsoft.AspNetCore.OpenApi",
              "requestedVersion": "9.0.8",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Design",
              "requestedVersion": "9.0.8",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Npgsql.EntityFrameworkCore.PostgreSQL",
              "requestedVersion": "9.0.4",
              "resolvedVersion": "9.0.4"
            },
            {
              "id": "OpenTelemetry",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Exporter.Console",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Exporter.OpenTelemetryProtocol",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Extensions.Hosting",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Instrumentation.AspNetCore",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Instrumentation.EntityFrameworkCore",
              "requestedVersion": "1.12.0-beta.2",
              "resolvedVersion": "1.12.0-beta.2"
            },
            {
              "id": "OpenTelemetry.Instrumentation.Http",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Instrumentation.Process",
              "requestedVersion": "1.12.0-beta.1",
              "resolvedVersion": "1.12.0-beta.1"
            },
            {
              "id": "OpenTelemetry.Instrumentation.Runtime",
              "requestedVersion": "1.12.0",
              "resolvedVersion": "1.12.0"
            }
          ],
          "transitivePackages": [
            {
              "id": "Humanizer.Core",
              "resolvedVersion": "2.14.1"
            },
            {
              "id": "Microsoft.Bcl.AsyncInterfaces",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "Microsoft.Build.Framework",
              "resolvedVersion": "17.8.3"
            },
            {
              "id": "Microsoft.Build.Locator",
              "resolvedVersion": "1.7.8"
            },
            {
              "id": "Microsoft.CodeAnalysis.Analyzers",
              "resolvedVersion": "3.3.4"
            },
            {
              "id": "Microsoft.CodeAnalysis.Common",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.CSharp",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.CSharp.Workspaces",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.Workspaces.Common",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.CodeAnalysis.Workspaces.MSBuild",
              "resolvedVersion": "4.8.0"
            },
            {
              "id": "Microsoft.EntityFrameworkCore",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Abstractions",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Analyzers",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.EntityFrameworkCore.Relational",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.Extensions.DependencyModel",
              "resolvedVersion": "9.0.8"
            },
            {
              "id": "Microsoft.OpenApi",
              "resolvedVersion": "1.6.17"
            },
            {
              "id": "Mono.TextTemplating",
              "resolvedVersion": "3.0.0"
            },
            {
              "id": "Npgsql",
              "resolvedVersion": "9.0.3"
            },
            {
              "id": "OpenTelemetry.Api",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "OpenTelemetry.Api.ProviderBuilderExtensions",
              "resolvedVersion": "1.12.0"
            },
            {
              "id": "System.CodeDom",
              "resolvedVersion": "6.0.0"
            },
            {
              "id": "System.Composition",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.AttributedModel",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.Convention",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.Hosting",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.Runtime",
              "resolvedVersion": "7.0.0"
            },
            {
              "id": "System.Composition.TypedParts",
              "resolvedVersion": "7.0.0"
            }
          ]
        }
      ]
    }
  ]
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj
SIZE: 2.48 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <UserSecretsId>8932c83d-67db-4264-b312-6e638ad396db</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Humanizer.Core" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
    <PackageReference Include="Microsoft.Build.Framework">
      <ExcludeAssets>runtime</ExcludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Build.Locator" />
    <PackageReference Include="Microsoft.Build.Tasks.Core">
      <ExcludeAssets>runtime</ExcludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Build.Utilities.Core">
      <ExcludeAssets>runtime</ExcludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.OpenApi" />
    <PackageReference Include="Newtonsoft.Json" />
    <PackageReference Include="Npgsql" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL"/>
    <PackageReference Include="OpenTelemetry"/>
    <PackageReference Include="OpenTelemetry.Exporter.Console" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol"/>
    <PackageReference Include="OpenTelemetry.Extensions.Hosting"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.EntityFrameworkCore"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Http"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Process"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime"/>
    <PackageReference Include="System.CodeDom"/>
    <PackageReference Include="System.Configuration.ConfigurationManager"/>
    <PackageReference Include="System.Formats.Nrbf"/>
    <PackageReference Include="System.Resources.Extensions"/>
    <PackageReference Include="System.Security.Cryptography.Pkcs"/>
    <PackageReference Include="System.Security.Cryptography.ProtectedData"/>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference
      Include="..\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj" />
    <ProjectReference
      Include="..\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj" />
  </ItemGroup>

</Project>


================================================================================
FILE: src\MyOpenTelemetryApi.Api\Program.cs
SIZE: 17.5 KB
MODIFIED: 10/07/2025 12:27:06
================================================================================

// src/MyOpenTelemetryApi.Api/Program.cs - Updated version with configuration-based setup
using System.Diagnostics;
using System.Reflection;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Api.Authentication;
using MyOpenTelemetryApi.Api.Telemetry;
using MyOpenTelemetryApi.Application.Services;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;
using MyOpenTelemetryApi.Infrastructure.Repositories;
using OpenTelemetry.Exporter;
using OpenTelemetry.Logs;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;

WebApplicationBuilder builder = WebApplication.CreateBuilder(args);

// Add authentication
builder.Services.AddAuthentication("ApiKey")
    .AddScheme<ApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler>("ApiKey", null);


// Define service name and version for OpenTelemetry
string serviceName = builder.Configuration.GetValue<string>("OpenTelemetry:ServiceName") ?? "MyOpenTelemetryApi";
string serviceVersion = builder.Configuration.GetValue<string>("OpenTelemetry:ServiceVersion") ??
                    Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "1.0.0";

// Configure OpenTelemetry Resource
ResourceBuilder resourceBuilder = ResourceBuilder.CreateDefault()
    .AddService(serviceName: serviceName, serviceVersion: serviceVersion)
    .AddTelemetrySdk()
    .AddAttributes(new Dictionary<string, object>
    {
        ["environment"] = builder.Environment.EnvironmentName,
        ["deployment.environment"] = builder.Environment.EnvironmentName,
        ["host.name"] = Environment.MachineName
    });

// Configure OpenTelemetry Logging
builder.Logging.ClearProviders();
builder.Logging.AddOpenTelemetry(options =>
{
    options.SetResourceBuilder(resourceBuilder);
    options.IncludeFormattedMessage = true;
    options.IncludeScopes = true;

    // Console exporter
    if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:Console:Enabled"))
    {
        options.AddConsoleExporter();
    }

    // File exporter
    if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:File:Enabled"))
    {
        string logPath = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:File:LogPath")
                     ?? "logs/otel-logs.json";
        options.AddFileExporter(logPath);
    }

    // OTLP exporter
    if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:OTLP:Enabled"))
    {
        options.AddOtlpExporter(otlpOptions =>
        {
            otlpOptions.Endpoint = new Uri(builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Endpoint")
                                          ?? "http://localhost:4317");
            string protocol = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Protocol") ?? "Grpc";
            otlpOptions.Protocol = protocol == "Grpc" ? OtlpExportProtocol.Grpc : OtlpExportProtocol.HttpProtobuf;
        });
    }
});

// Configure OpenTelemetry Tracing
builder.Services.AddOpenTelemetry()
    .ConfigureResource(resource => resource.AddService(serviceName: serviceName, serviceVersion: serviceVersion))
    .WithTracing(tracing =>
    {
        tracing
            .AddAspNetCoreInstrumentation(options =>
            {
                options.RecordException = true;
                options.Filter = (httpContext) => !httpContext.Request.Path.StartsWithSegments("/health");
            })
            .AddHttpClientInstrumentation(options =>
            {
                options.RecordException = true;
            })
            .AddEntityFrameworkCoreInstrumentation(options =>
            {
                options.SetDbStatementForText = true;
                options.SetDbStatementForStoredProcedure = true;
            })
            .AddSource("MyOpenTelemetryApi.*"); // Add custom activity sources

        // Configure sampling
        bool alwaysOn = builder.Configuration.GetValue<bool>("OpenTelemetry:Sampling:AlwaysOn");
        if (alwaysOn)
        {
            tracing.SetSampler(new AlwaysOnSampler());
        }
        else
        {
            double ratio = builder.Configuration.GetValue<double>("OpenTelemetry:Sampling:Ratio");
            tracing.SetSampler(new TraceIdRatioBasedSampler(ratio));
        }

        // Configure exporters
        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:Console:Enabled"))
        {
            tracing.AddConsoleExporter();
        }

        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:OTLP:Enabled"))
        {
            tracing.AddOtlpExporter(options =>
            {
                options.Endpoint = new Uri(builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Endpoint")
                                          ?? "http://localhost:4317");
                string protocol = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Protocol") ?? "Grpc";
                options.Protocol = protocol == "Grpc" ? OtlpExportProtocol.Grpc : OtlpExportProtocol.HttpProtobuf;
            });
        }
    })
    .WithMetrics(metrics =>
    {
        metrics
            .AddAspNetCoreInstrumentation()
            .AddHttpClientInstrumentation()
            .AddRuntimeInstrumentation()
            .AddProcessInstrumentation()
            .AddMeter("MyOpenTelemetryApi.*"); // Add custom meters

        // Configure exporters
        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:Console:Enabled"))
        {
            metrics.AddConsoleExporter();
        }

        if (builder.Configuration.GetValue<bool>("OpenTelemetry:Exporter:OTLP:Enabled"))
        {
            metrics.AddOtlpExporter(options =>
            {
                options.Endpoint = new Uri(builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Endpoint")
                                          ?? "http://localhost:4317");
                string protocol = builder.Configuration.GetValue<string>("OpenTelemetry:Exporter:OTLP:Protocol") ?? "Grpc";
                options.Protocol = protocol == "Grpc" ? OtlpExportProtocol.Grpc : OtlpExportProtocol.HttpProtobuf;
            });
        }
    });

// Add services to the container.
builder.Services.AddControllers();

// Configure PostgreSQL
//builder.Services.AddDbContext<AppDbContext>(options =>
//    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));
// Program.cs - Add retry policies for database operations
builder.Services.AddDbContext<AppDbContext>(options =>
{
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"), npgsqlOptions =>
    {
        npgsqlOptions.EnableRetryOnFailure(
            maxRetryCount: 3,
            maxRetryDelay: TimeSpan.FromSeconds(30),
            errorCodesToAdd: null);
    });
});

// Register repositories and unit of work
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IContactRepository, ContactRepository>();
builder.Services.AddScoped<IGroupRepository, GroupRepository>();
builder.Services.AddScoped<ITagRepository, TagRepository>();

// Register application services
builder.Services.AddScoped<IContactService, ContactService>();
builder.Services.AddScoped<IGroupService, GroupService>();
builder.Services.AddScoped<ITagService, TagService>();

// Add HTTP context accessor for tracing context
builder.Services.AddHttpContextAccessor();

// Add this to your Program.cs
builder.Services.AddOpenApi(); // Built-in OpenAPI support

WebApplication app = builder.Build();

// Add OpenAPI endpoint
//if (app.Environment.IsDevelopment())
//{
app.MapOpenApi(); // Serves OpenAPI JSON at /openapi/v1.json
//}

// Configure the HTTP request pipeline.
app.UseHttpsRedirection();

// Add custom middleware for request tracing
app.Use(async (context, next) =>
{
    using Activity? activity = Activity.Current;
    if (activity != null)
    {
        activity.SetTag("http.request.body.size", context.Request.ContentLength ?? 0);
        activity.SetTag("user.agent", context.Request.Headers.UserAgent.ToString());
        activity.SetTag("client.ip", context.Connection.RemoteIpAddress?.ToString());
    }

    await next();

    activity?.SetTag("http.response.body.size", context.Response.ContentLength ?? 0);
});

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

// Replace the migration section in src/MyOpenTelemetryApi.Api/Program.cs
// Find this section (around line 140-160) and replace it with this code:

// Apply migrations on startup - safe for educational/small production deployments
using (IServiceScope scope = app.Services.CreateScope())
{
    AppDbContext dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    ILogger<Program> logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();

    using Activity? activity = Activity.Current?.Source.StartActivity("DatabaseMigration");
    try
    {
        if (logger.IsEnabled(LogLevel.Information))
        {
            logger.LogInformation("Checking for pending database migrations...");
        }
        var pendingMigrations = await dbContext.Database.GetPendingMigrationsAsync();

        if (pendingMigrations.Any())
        {
            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Found {Count} pending migrations: {Migrations}",
                    pendingMigrations.Count(),
                    string.Join(", ", pendingMigrations));
            }

            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Applying database migrations...");
            }
            await dbContext.Database.MigrateAsync();
            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Database migrations applied successfully.");
            }
        }
        else
        {
            if (logger.IsEnabled(LogLevel.Information))
            {
                logger.LogInformation("Database is up to date - no migrations needed.");
            }
        }
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Error applying database migrations");
        activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
        throw; // Fail startup if migrations fail
    }
}
if (app.Logger.IsEnabled(LogLevel.Information))
{
    app.Logger.LogInformation("Starting {ServiceName} version {ServiceVersion}", serviceName, serviceVersion);
}

// Add a friendly landing page at the root
app.MapGet("/", () => Results.Content("""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Manager API</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 40px;
            max-width: 600px;
            width: 100%;
            animation: fadeIn 0.6s ease-out;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        h1 {
            color: #333;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 1.2em;
        }
        
        .welcome {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 20px;
        }
        
        p {
            color: #555;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        
        .endpoints {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin: 30px 0;
        }
        
        .endpoints h2 {
            color: #333;
            font-size: 1.3em;
            margin-bottom: 15px;
        }
        
        .endpoint-list {
            list-style: none;
        }
        
        .endpoint-list li {
            margin-bottom: 12px;
        }
        
        .endpoint-list a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            transition: all 0.3s ease;
            padding: 8px 12px;
            border-radius: 6px;
            background: white;
        }
        
        .endpoint-list a:hover {
            background: #667eea;
            color: white;
            transform: translateX(5px);
        }
        
        .method {
            background: #28a745;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.85em;
            margin-right: 10px;
            font-weight: bold;
        }
        
        .coming-soon {
            background: #fff3cd;
            border: 1px solid #ffc107;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
        }
        
        .coming-soon strong {
            display: block;
            margin-bottom: 5px;
        }
        
        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
            text-align: center;
            color: #888;
            font-size: 0.9em;
        }
        
        .tech-stack {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .tech-badge {
            background: #f0f0f0;
            padding: 4px 10px;
            border-radius: 15px;
            font-size: 0.85em;
            color: #555;
        }
        
        @media (max-width: 480px) {
            h1 {
                font-size: 2em;
            }
            
            .container {
                padding: 30px 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>📞 Contact Manager API</h1>
        <p class="subtitle">Personal Information Management System</p>
        
        <p class="welcome">Hello, friend! Thank you for checking out this website. 👋</p>
        
        <p>
            This is an API server for managing contacts, groups, and tags. 
            It's built with modern .NET and provides a RESTful interface for 
            personal information management.
        </p>
        
        <div class="endpoints">
            <h2>🔗 Available Endpoints</h2>
            <ul class="endpoint-list">
                <li>
                    <a href="/api/health">
                        <span class="method">GET</span>
                        /api/health - Check service health
                    </a>
                </li>
                <li>
                    <a href="/api/health/ready">
                        <span class="method">GET</span>
                        /api/health/ready - Check service readiness
                    </a>
                </li>
                <li>
                    <a href="/openapi/v1.json">
                        <span class="method">GET</span>
                        /openapi/v1.json - OpenAPI specification
                    </a>
                </li>
            </ul>
        </div>
        
        <div class="coming-soon">
            <strong>🚀 Available Now:</strong>
            The OpenAPI specification is available at /openapi/v1.json. 
            Interactive Swagger UI documentation coming soon!
        </div>
        
        <div class="footer">
            <p>Built with ❤️ using modern technologies</p>
            <div class="tech-stack">
                <span class="tech-badge">.NET 10</span>
                <span class="tech-badge">PostgreSQL</span>
                <span class="tech-badge">OpenTelemetry</span>
                <span class="tech-badge">Docker</span>
            </div>
        </div>
    </div>
</body>
</html>
""", "text/html"));

app.UseExceptionHandler("/error");

app.Map("/error", (HttpContext context) =>
{
    var feature = context.Features.Get<IExceptionHandlerFeature>();
    var logger = context.RequestServices.GetRequiredService<ILogger<Program>>();

    logger.LogError(feature?.Error, "Unhandled exception occurred");

    return Results.Problem(
        detail: "An error occurred processing your request",
        statusCode: 500);
});

app.Run();



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Properties\launchSettings.json
SIZE: 0.73 KB
MODIFIED: 10/06/2025 12:44:28
================================================================================

{
    "$schema": "https://json.schemastore.org/launchsettings.json",
    "profiles": {
        "http": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": false,
            "applicationUrl": "http://0.0.0.0:5174",
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
        },
        "https": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": false,
            "applicationUrl": "https://0.0.0.0:7034;http://0.0.0.0:5174",
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Telemetry\FileExporter.cs
SIZE: 3.06 KB
MODIFIED: 09/17/2025 12:34:45
================================================================================

// src/MyOpenTelemetryApi.Api/Telemetry/FileExporter.cs
using System.Text.Json;
using OpenTelemetry;
using OpenTelemetry.Logs;

namespace MyOpenTelemetryApi.Api.Telemetry;

public class FileLogExporter : BaseExporter<LogRecord>
{
    private readonly string _filePath;
    private readonly Lock _lockObject = new();
    private readonly JsonSerializerOptions _jsonOptions;

    public FileLogExporter(string filePath)
    {
        _filePath = filePath;
        _jsonOptions = new JsonSerializerOptions
        {
            WriteIndented = false,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        // Ensure directory exists
        string? directory = Path.GetDirectoryName(_filePath);
        if (!string.IsNullOrEmpty(directory))
        {
            Directory.CreateDirectory(directory);
        }
    }

    public override ExportResult Export(in Batch<LogRecord> batch)
    {
        try
        {
            lock (_lockObject)
            {
                using StreamWriter writer = new(_filePath, append: true);

                foreach (LogRecord logRecord in batch)
                {
                    var logEntry = new
                    {
                        logRecord.Timestamp,
                        TraceId = logRecord.TraceId.ToString(),
                        SpanId = logRecord.SpanId.ToString(),
                        TraceFlags = logRecord.TraceFlags.ToString(),
                        logRecord.CategoryName,
                        LogLevel = logRecord.LogLevel.ToString(),
                        logRecord.FormattedMessage,
                        logRecord.Body,
                        ScopeValues = ExtractScopeValues(logRecord),
                        Exception = logRecord.Exception?.ToString(),
                        Attributes = ExtractAttributes(logRecord)
                    };

                    string json = JsonSerializer.Serialize(logEntry, _jsonOptions);
                    writer.WriteLine(json);
                }
            }

            return ExportResult.Success;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting logs to file: {ex.Message}");
            return ExportResult.Failure;
        }
    }

    private static List<object> ExtractScopeValues(LogRecord logRecord)
    {
        List<object> scopes = [];

        logRecord.ForEachScope((scope, state) =>
        {
            if (!scope.Equals(default(LogRecordScope)))
            {
                scopes.Add(scope.ToString() ?? "null");
            }
        }, scopes);

        return scopes;
    }

    private static Dictionary<string, object?> ExtractAttributes(LogRecord logRecord)
    {
        Dictionary<string, object?> attributes = [];

        if (logRecord.Attributes != null)
        {
            foreach (KeyValuePair<string, object?> attribute in logRecord.Attributes)
            {
                attributes[attribute.Key] = attribute.Value;
            }
        }

        return attributes;
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Telemetry\TelemetryConstants.cs
SIZE: 1.2 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

namespace MyOpenTelemetryApi.Api.Telemetry;

public static class TelemetryConstants
{
    public const string ServiceName = "MyOpenTelemetryApi";

    // Activity names
    public static class Activities
    {
        public const string ContactService = "ContactService";
        public const string GroupService = "GroupService";
        public const string TagService = "TagService";
        public const string DatabaseOperation = "DatabaseOperation";
    }

    // Metric names
    public static class Metrics
    {
        public const string ContactsCreated = "contacts.created";
        public const string ContactsDeleted = "contacts.deleted";
        public const string ContactSearches = "contacts.searches";
        public const string DatabaseQueryDuration = "db.query.duration";
    }

    // Tag names
    public static class Tags
    {
        public const string ContactId = "contact.id";
        public const string GroupId = "group.id";
        public const string TagId = "tag.id";
        public const string SearchTerm = "search.term";
        public const string ResultCount = "result.count";
        public const string OperationType = "operation.type";
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Api\Telemetry\TelemetryExtensions.cs
SIZE: 1.09 KB
MODIFIED: 09/17/2025 12:34:45
================================================================================

// src/MyOpenTelemetryApi.Api/Telemetry/TelemetryExtensions.cs
using OpenTelemetry;
using OpenTelemetry.Logs;
using OpenTelemetry.Trace;

namespace MyOpenTelemetryApi.Api.Telemetry;

public static class TelemetryExtensions
{
    public static OpenTelemetryLoggerOptions AddFileExporter(
        this OpenTelemetryLoggerOptions options,
        string filePath)
    {
        return options.AddProcessor(new SimpleLogRecordExportProcessor(new FileLogExporter(filePath)));
    }

    public static TracerProviderBuilder AddFileExporter(
        this TracerProviderBuilder builder,
        IConfiguration configuration)
    {
        bool enabled = configuration.GetValue<bool>("OpenTelemetry:Exporter:File:Enabled");
        if (enabled)
        {
            _ = configuration.GetValue<string>("OpenTelemetry:Exporter:File:TracePath")
                           ?? "logs/otel-traces.json";
            // For traces, we'd implement a similar FileTraceExporter
            // For now, we'll use console exporter as file trace export is complex
        }

        return builder;
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\AddressDto.cs
SIZE: 0.92 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/AddressDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class AddressDto
{
    public Guid Id { get; set; }
    public string? StreetLine1 { get; set; }
    public string? StreetLine2 { get; set; }
    public string? City { get; set; }
    public string? StateProvince { get; set; }
    public string? PostalCode { get; set; }
    public string? Country { get; set; }
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}

public class CreateAddressDto
{
    public string? StreetLine1 { get; set; }
    public string? StreetLine2 { get; set; }
    public string? City { get; set; }
    public string? StateProvince { get; set; }
    public string? PostalCode { get; set; }
    public string? Country { get; set; }
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\ContactDto.cs
SIZE: 0.92 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/ContactDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class ContactDto
{
    public Guid Id { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }

    public List<EmailAddressDto> EmailAddresses { get; set; } = [];
    public List<PhoneNumberDto> PhoneNumbers { get; set; } = [];
    public List<AddressDto> Addresses { get; set; } = [];
    public List<GroupDto> Groups { get; set; } = [];
    public List<TagDto> Tags { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\ContactSummaryDto.cs
SIZE: 0.43 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/ContactSummaryDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class ContactSummaryDto
{
    public Guid Id { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? Company { get; set; }
    public string? PrimaryEmail { get; set; }
    public string? PrimaryPhone { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\CreateContactDto.cs
SIZE: 0.83 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/CreateContactDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class CreateContactDto
{
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }

    public List<CreateEmailAddressDto> EmailAddresses { get; set; } = [];
    public List<CreatePhoneNumberDto> PhoneNumbers { get; set; } = [];
    public List<CreateAddressDto> Addresses { get; set; } = [];
    public List<Guid> GroupIds { get; set; } = [];
    public List<Guid> TagIds { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\EmailAddressDto.cs
SIZE: 0.52 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/EmailAddressDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class EmailAddressDto
{
    public Guid Id { get; set; }
    public string Email { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}

public class CreateEmailAddressDto
{
    public string Email { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\GroupDto.cs
SIZE: 0.62 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/GroupDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class GroupDto
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
    public DateTime CreatedAt { get; set; }
    public int ContactCount { get; set; }
}

public class CreateGroupDto
{
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
}

public class UpdateGroupDto
{
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\PaginatedResultDto.cs
SIZE: 0.53 KB
MODIFIED: 09/17/2025 16:15:00
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/PaginatedResultDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class PaginatedResultDto<T>
{
    public List<T> Items { get; set; } = [];
    public int PageNumber { get; set; }
    public int PageSize { get; set; }
    public int TotalCount { get; set; }

    public int TotalPages => PageSize > 0 ? (int)Math.Ceiling(TotalCount / (double)PageSize) : 0;
    public bool HasPreviousPage => PageNumber > 1;
    public bool HasNextPage => PageNumber < TotalPages;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\PhoneNumberDto.cs
SIZE: 0.52 KB
MODIFIED: 09/17/2025 15:30:19
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/PhoneNumberDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class PhoneNumberDto
{
    public Guid Id { get; set; }
    public string Number { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}

public class CreatePhoneNumberDto
{
    public string Number { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public bool IsPrimary { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\TagDto.cs
SIZE: 0.42 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/TagDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class TagDto
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string ColorHex { get; set; } = string.Empty;
}

public class CreateTagDto
{
    public string Name { get; set; } = string.Empty;
    public string ColorHex { get; set; } = string.Empty;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\DTOs\UpdateContactDto.cs
SIZE: 0.52 KB
MODIFIED: 09/17/2025 15:30:19
================================================================================

// src/MyOpenTelemetryApi.Application/DTOs/UpdateContactDto.cs
namespace MyOpenTelemetryApi.Application.DTOs;

public class UpdateContactDto
{
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\MyOpenTelemetryApi.Application.csproj
SIZE: 0.29 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions"/>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\ContactService.cs
SIZE: 14.7 KB
MODIFIED: 10/06/2025 12:44:28
================================================================================

// src/MyOpenTelemetryApi.Application/Services/ContactService.cs
using System.Diagnostics;
using System.Diagnostics.Metrics;
using Microsoft.Extensions.Logging;
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;

namespace MyOpenTelemetryApi.Application.Services;

public class ContactService(
    IUnitOfWork unitOfWork,
    ILogger<ContactService> logger,
    ActivitySource activitySource,
    IMeterFactory meterFactory) : IContactService
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;
    private readonly ILogger<ContactService> _logger = logger;
    private readonly ActivitySource _activitySource = activitySource;

    // OpenTelemetry Metrics
    private readonly Meter _meter = meterFactory.Create("MyOpenTelemetryApi.Contacts");
    private readonly Counter<long> _contactsCreated = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateCounter<long>("contacts.created", "contacts", "Number of contacts created");
    private readonly Counter<long> _contactsDeleted = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateCounter<long>("contacts.deleted", "contacts", "Number of contacts deleted");
    private readonly Counter<long> _contactSearches = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateCounter<long>("contacts.searches", "searches", "Number of contact searches performed");
    private readonly Histogram<double> _searchDuration = meterFactory.Create("MyOpenTelemetryApi.Contacts")
        .CreateHistogram<double>("contacts.search.duration", "seconds", "Duration of contact search operations");

    public async Task<List<ContactDto>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetAllContacts", ActivityKind.Internal);

        _logger.LogInformation("Getting all contacts");

        IEnumerable<Contact> contacts = await _unitOfWork.Contacts.GetAllAsync();
        List<ContactDto> contactDtos = [];
        foreach (Contact contact in contacts)
        {
            contactDtos.Add(MapToDto(contact));
        }

        return contactDtos;
    }

    public async Task<ContactDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactById", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Getting contact by ID: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetByIdAsync(id);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found: {ContactId}", id);
            return null;
        }

        return MapToDto(contact);
    }

    public async Task<ContactDto?> GetWithDetailsAsync(Guid id, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactWithDetails", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Getting contact with details: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetContactWithDetailsAsync(id);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found: {ContactId}", id);
            return null;
        }

        return MapToDto(contact);
    }

    public async Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedAsync(
        int pageNumber, int pageSize, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetPaginatedContacts", ActivityKind.Internal);
        activity?.SetTag("page.number", pageNumber);
        activity?.SetTag("page.size", pageSize);

        _logger.LogInformation("Getting paginated contacts: Page {PageNumber}, Size {PageSize}", pageNumber, pageSize);

        var query = _unitOfWork.Contacts.GetQueryable();
        var totalCount = await Task.Run(() => query.Count(), cancellationToken);

        var contacts = await Task.Run(() => query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToList(), cancellationToken);

        return new PaginatedResultDto<ContactSummaryDto>
        {
            Items = contacts.Select(MapToSummaryDto).ToList(),
            TotalCount = totalCount,
            PageNumber = pageNumber,
            PageSize = pageSize
        };
    }

    public async Task<List<ContactSummaryDto>> SearchAsync(string searchTerm, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("SearchContacts", ActivityKind.Internal);
        activity?.SetTag("search.term", searchTerm);

        _logger.LogInformation("Searching contacts with term: {SearchTerm}", searchTerm);

        // Record search metric and measure duration
        _contactSearches.Add(1, new KeyValuePair<string, object?>("search.term.length", searchTerm.Length));

        var stopwatch = Stopwatch.StartNew();
        var contacts = await _unitOfWork.Contacts.SearchContactsAsync(searchTerm);
        stopwatch.Stop();

        _searchDuration.Record(stopwatch.Elapsed.TotalSeconds,
            new KeyValuePair<string, object?>("result.count", contacts.Count()));

        activity?.SetTag("result.count", contacts.Count());

        return contacts.Select(MapToSummaryDto).ToList();
    }

    public async Task<List<ContactSummaryDto>> GetByGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactsByGroup", ActivityKind.Internal);
        activity?.SetTag("group.id", groupId);

        _logger.LogInformation("Getting contacts by group: {GroupId}", groupId);

        var contacts = await _unitOfWork.Contacts.GetContactsByGroupAsync(groupId);
        return contacts.Select(MapToSummaryDto).ToList();
    }

    public async Task<List<ContactSummaryDto>> GetByTagAsync(Guid tagId, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("GetContactsByTag", ActivityKind.Internal);
        activity?.SetTag("tag.id", tagId);

        _logger.LogInformation("Getting contacts by tag: {TagId}", tagId);

        var contacts = await _unitOfWork.Contacts.GetContactsByTagAsync(tagId);
        return contacts.Select(MapToSummaryDto).ToList();
    }

    public async Task<ContactDto> CreateAsync(CreateContactDto dto, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("CreateContact", ActivityKind.Internal);

        _logger.LogInformation("Creating new contact: {FirstName} {LastName}", dto.FirstName, dto.LastName);

        Contact contact = new()
        {
            Id = Guid.NewGuid(),
            FirstName = dto.FirstName,
            LastName = dto.LastName,
            MiddleName = dto.MiddleName,
            Nickname = dto.Nickname,
            Company = dto.Company,
            JobTitle = dto.JobTitle,
            DateOfBirth = dto.DateOfBirth,
            Notes = dto.Notes,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        // Map email addresses
        if (dto.EmailAddresses != null)
        {
            contact.EmailAddresses = dto.EmailAddresses.Select(e => new EmailAddress
            {
                Id = Guid.NewGuid(),
                ContactId = contact.Id,
                Email = e.Email,
                Type = Enum.Parse<EmailType>(e.Type, ignoreCase: true),
                IsPrimary = e.IsPrimary
            }).ToList();
        }

        // Map phone numbers
        if (dto.PhoneNumbers != null)
        {
            contact.PhoneNumbers = dto.PhoneNumbers.Select(p => new PhoneNumber
            {
                Id = Guid.NewGuid(),
                ContactId = contact.Id,
                Number = p.Number,
                Type = Enum.Parse<PhoneType>(p.Type, ignoreCase: true),
                IsPrimary = p.IsPrimary
            }).ToList();
        }

        // Map addresses
        if (dto.Addresses != null)
        {
            contact.Addresses = dto.Addresses.Select(a => new Address
            {
                Id = Guid.NewGuid(),
                ContactId = contact.Id,
                StreetLine1 = a.StreetLine1,
                StreetLine2 = a.StreetLine2,
                City = a.City,
                StateProvince = a.StateProvince,
                PostalCode = a.PostalCode,
                Country = a.Country,
                Type = Enum.Parse<AddressType>(a.Type, ignoreCase: true),
                IsPrimary = a.IsPrimary
            }).ToList();
        }

        await _unitOfWork.Contacts.AddAsync(contact);

        // Handle groups
        if (dto.GroupIds != null && dto.GroupIds.Count != 0)
        {
            foreach (Guid groupId in dto.GroupIds)
            {
                Group? group = await _unitOfWork.Groups.GetByIdAsync(groupId);
                if (group != null)
                {
                    contact.ContactGroups ??= [];
                    contact.ContactGroups.Add(new ContactGroup
                    {
                        ContactId = contact.Id,
                        GroupId = groupId
                    });
                }
            }
        }

        // Handle tags
        if (dto.TagIds != null && dto.TagIds.Count != 0)
        {
            foreach (Guid tagId in dto.TagIds)
            {
                Tag? tag = await _unitOfWork.Tags.GetByIdAsync(tagId);
                if (tag != null)
                {
                    contact.Tags ??= [];
                    contact.Tags.Add(new ContactTag
                    {
                        ContactId = contact.Id,
                        TagId = tagId
                    });
                }
            }
        }

        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Record metric after successful creation
        _contactsCreated.Add(1,
            new KeyValuePair<string, object?>("company", dto.Company ?? "none"),
            new KeyValuePair<string, object?>("has.email", dto.EmailAddresses?.Count > 0),
            new KeyValuePair<string, object?>("has.phone", dto.PhoneNumbers?.Count > 0));

        activity?.SetTag("contact.id", contact.Id);
        _logger.LogInformation("Contact created successfully: {ContactId}", contact.Id);

        return MapToDto(contact);
    }

    public async Task<ContactDto?> UpdateAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("UpdateContact", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Updating contact: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetByIdAsync(id);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found for update: {ContactId}", id);
            return null;
        }

        contact.FirstName = dto.FirstName;
        contact.LastName = dto.LastName;
        contact.MiddleName = dto.MiddleName;
        contact.Nickname = dto.Nickname;
        contact.Company = dto.Company;
        contact.JobTitle = dto.JobTitle;
        contact.DateOfBirth = dto.DateOfBirth;
        contact.Notes = dto.Notes;
        contact.UpdatedAt = DateTime.UtcNow;

        _unitOfWork.Contacts.Update(contact);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        _logger.LogInformation("Contact updated successfully: {ContactId}", id);

        return MapToDto(contact);
    }

    public async Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default)
    {
        using Activity? activity = _activitySource.StartActivity("DeleteContact", ActivityKind.Internal);
        activity?.SetTag("contact.id", id);

        _logger.LogInformation("Deleting contact: {ContactId}", id);

        Contact? contact = await _unitOfWork.Contacts.GetByIdAsync(id);
        if (contact == null)
        {
            _logger.LogWarning("Contact not found for deletion: {ContactId}", id);
            return false;
        }

        _unitOfWork.Contacts.Delete(contact);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Record deletion metric
        _contactsDeleted.Add(1,
            new KeyValuePair<string, object?>("company", contact.Company ?? "none"));

        _logger.LogInformation("Contact deleted successfully: {ContactId}", id);

        return true;
    }

    private static ContactDto MapToDto(Contact contact)
    {
        return new ContactDto
        {
            Id = contact.Id,
            FirstName = contact.FirstName,
            LastName = contact.LastName,
            MiddleName = contact.MiddleName,
            Nickname = contact.Nickname,
            Company = contact.Company,
            JobTitle = contact.JobTitle,
            DateOfBirth = contact.DateOfBirth,
            Notes = contact.Notes,
            CreatedAt = contact.CreatedAt,
            UpdatedAt = contact.UpdatedAt,
            EmailAddresses = contact.EmailAddresses?.Select(e => new EmailAddressDto
            {
                Email = e.Email,
                Type = e.Type.ToString(),
                IsPrimary = e.IsPrimary
            }).ToList() ?? [],
            PhoneNumbers = contact.PhoneNumbers?.Select(p => new PhoneNumberDto
            {
                Number = p.Number,
                Type = p.Type.ToString(),
                IsPrimary = p.IsPrimary
            }).ToList() ?? [],
            Addresses = contact.Addresses?.Select(a => new AddressDto
            {
                StreetLine1 = a.StreetLine1,
                StreetLine2 = a.StreetLine2,
                City = a.City,
                StateProvince = a.StateProvince,
                PostalCode = a.PostalCode,
                Country = a.Country,
                Type = a.Type.ToString(),
                IsPrimary = a.IsPrimary
            }).ToList() ?? []
        };
    }

    private static ContactSummaryDto MapToSummaryDto(Contact contact)
    {
        return new ContactSummaryDto
        {
            Id = contact.Id,
            FirstName = contact.FirstName,
            LastName = contact.LastName,
            Company = contact.Company,
            PrimaryEmail = contact.EmailAddresses?.FirstOrDefault(e => e.IsPrimary)?.Email,
            PrimaryPhone = contact.PhoneNumbers?.FirstOrDefault(p => p.IsPrimary)?.Number
        };
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\GroupService.cs
SIZE: 2.22 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// src/MyOpenTelemetryApi.Application/Services/GroupService.cs
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;

namespace MyOpenTelemetryApi.Application.Services;

public class GroupService(IUnitOfWork unitOfWork) : IGroupService
{
    public async Task<GroupDto?> GetByIdAsync(Guid id)
    {
        Group? group = await unitOfWork.Groups.GetByIdAsync(id);
        return group == null ? null : MapToDto(group);
    }

    public async Task<List<GroupDto>> GetAllAsync()
    {
        IEnumerable<Group> groups = await unitOfWork.Groups.GetAllAsync();
        List<GroupDto> groupDtos = [];

        foreach (Group group in groups)
        {
            groupDtos.Add(MapToDto(group));
        }

        return groupDtos;
    }

    public async Task<GroupDto> CreateAsync(CreateGroupDto dto)
    {
        Group group = new()
        {
            Id = Guid.NewGuid(),
            Name = dto.Name,
            Description = dto.Description,
            CreatedAt = DateTime.UtcNow
        };

        await unitOfWork.Groups.AddAsync(group);
        await unitOfWork.SaveChangesAsync();

        return MapToDto(group);
    }

    public async Task<GroupDto?> UpdateAsync(Guid id, UpdateGroupDto dto)
    {
        Group? group = await unitOfWork.Groups.GetByIdAsync(id);
        if (group == null) return null;

        group.Name = dto.Name;
        group.Description = dto.Description;

        unitOfWork.Groups.Update(group);
        await unitOfWork.SaveChangesAsync();

        return MapToDto(group);
    }

    public async Task<bool> DeleteAsync(Guid id)
    {
        Group? group = await unitOfWork.Groups.GetByIdAsync(id);
        if (group == null) return false;

        unitOfWork.Groups.Delete(group);
        await unitOfWork.SaveChangesAsync();
        return true;
    }

    private static GroupDto MapToDto(Group group)
    {
        return new GroupDto
        {
            Id = group.Id,
            Name = group.Name,
            Description = group.Description,
            CreatedAt = group.CreatedAt,
            ContactCount = group.ContactGroups?.Count ?? 0
        };
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\IContactService.cs
SIZE: 1.16 KB
MODIFIED: 09/17/2025 15:30:19
================================================================================

// src/MyOpenTelemetryApi.Application/Services/IContactService.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Application.Services;

public interface IContactService
{
    Task<ContactDto?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default);
    Task<ContactDto?> GetWithDetailsAsync(Guid id, CancellationToken cancellationToken = default);
    Task<PaginatedResultDto<ContactSummaryDto>> GetPaginatedAsync(int pageNumber, int pageSize, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> SearchAsync(string searchTerm, CancellationToken cancellationToken = default);
    Task<ContactDto> CreateAsync(CreateContactDto dto, CancellationToken cancellationToken = default);
    Task<ContactDto?> UpdateAsync(Guid id, UpdateContactDto dto, CancellationToken cancellationToken = default);
    Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetByGroupAsync(Guid groupId, CancellationToken cancellationToken = default);
    Task<List<ContactSummaryDto>> GetByTagAsync(Guid tagId, CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\IGroupService.cs
SIZE: 0.43 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/Services/IGroupService.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Application.Services;

public interface IGroupService
{
    Task<GroupDto?> GetByIdAsync(Guid id);
    Task<List<GroupDto>> GetAllAsync();
    Task<GroupDto> CreateAsync(CreateGroupDto dto);
    Task<GroupDto?> UpdateAsync(Guid id, UpdateGroupDto dto);
    Task<bool> DeleteAsync(Guid id);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\ITagService.cs
SIZE: 0.42 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Application/Services/ITagService.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Application.Services;

public interface ITagService
{
    Task<TagDto?> GetByIdAsync(Guid id);
    Task<List<TagDto>> GetAllAsync();
    Task<TagDto> CreateAsync(CreateTagDto dto);
    Task<TagDto?> UpdateAsync(Guid id, CreateTagDto dto);
    Task<bool> DeleteAsync(Guid id);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Application\Services\TagService.cs
SIZE: 2.49 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// src/MyOpenTelemetryApi.Application/Services/TagService.cs
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;

namespace MyOpenTelemetryApi.Application.Services;

public class TagService(IUnitOfWork unitOfWork) : ITagService
{
    public async Task<TagDto?> GetByIdAsync(Guid id)
    {
        Tag? tag = await unitOfWork.Tags.GetByIdAsync(id);
        return tag == null ? null : MapToDto(tag);
    }

    public async Task<List<TagDto>> GetAllAsync()
    {
        IEnumerable<Tag> tags = await unitOfWork.Tags.GetAllAsync();
        return [.. tags.Select(MapToDto)];
    }

    public async Task<TagDto> CreateAsync(CreateTagDto dto)
    {
        // Check if tag with same name already exists
        Tag? existingTag = await unitOfWork.Tags.GetByNameAsync(dto.Name);
        if (existingTag != null)
        {
            throw new InvalidOperationException($"Tag with name '{dto.Name}' already exists.");
        }

        Tag tag = new()
        {
            Id = Guid.NewGuid(),
            Name = dto.Name,
            ColorHex = dto.ColorHex
        };

        await unitOfWork.Tags.AddAsync(tag);
        await unitOfWork.SaveChangesAsync();

        return MapToDto(tag);
    }

    public async Task<TagDto?> UpdateAsync(Guid id, CreateTagDto dto)
    {
        Tag? tag = await unitOfWork.Tags.GetByIdAsync(id);
        if (tag == null) return null;

        // Check if another tag with the same name exists
        Tag? existingTag = await unitOfWork.Tags.GetByNameAsync(dto.Name);
        if (existingTag != null && existingTag.Id != id)
        {
            throw new InvalidOperationException($"Tag with name '{dto.Name}' already exists.");
        }

        tag.Name = dto.Name;
        tag.ColorHex = dto.ColorHex;

        unitOfWork.Tags.Update(tag);
        await unitOfWork.SaveChangesAsync();

        return MapToDto(tag);
    }

    public async Task<bool> DeleteAsync(Guid id)
    {
        Tag? tag = await unitOfWork.Tags.GetByIdAsync(id);
        if (tag == null) return false;

        unitOfWork.Tags.Delete(tag);
        await unitOfWork.SaveChangesAsync();
        return true;
    }

    private static TagDto MapToDto(Tag tag)
    {
        return new TagDto
        {
            Id = tag.Id,
            Name = tag.Name,
            ColorHex = tag.ColorHex ?? string.Empty // Fixes CS8601: ensures non-null assignment
        };
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Address.cs
SIZE: 0.62 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Address.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Address
{
    public Guid Id { get; set; }
    public Guid ContactId { get; set; }
    public string? StreetLine1 { get; set; }
    public string? StreetLine2 { get; set; }
    public string? City { get; set; }
    public string? StateProvince { get; set; }
    public string? PostalCode { get; set; }
    public string? Country { get; set; }
    public AddressType Type { get; set; }
    public bool IsPrimary { get; set; }

    // Navigation property
    public Contact Contact { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\AddressType.cs
SIZE: 0.17 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Enums/AddressType.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public enum AddressType
{
    Home,
    Work,
    Other
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Contact.cs
SIZE: 0.95 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Contact.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Contact
{
    public Guid Id { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string? Nickname { get; set; }
    public string? Company { get; set; }
    public string? JobTitle { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public string? Notes { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }

    // Navigation properties
    public List<EmailAddress> EmailAddresses { get; set; } = [];
    public List<PhoneNumber> PhoneNumbers { get; set; } = [];
    public List<Address> Addresses { get; set; } = [];
    public List<ContactGroup> ContactGroups { get; set; } = [];
    public List<ContactTag> Tags { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\ContactGroup.cs
SIZE: 0.4 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/ContactGroup.cs (Join table)
namespace MyOpenTelemetryApi.Domain.Entities;

public class ContactGroup
{
    public Guid ContactId { get; set; }
    public Guid GroupId { get; set; }
    public DateTime AddedAt { get; set; }

    // Navigation properties
    public Contact Contact { get; set; } = null!;
    public Group Group { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\ContactTag.cs
SIZE: 0.35 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/ContactTag.cs (Join table)
namespace MyOpenTelemetryApi.Domain.Entities;

public class ContactTag
{
    public Guid ContactId { get; set; }
    public Guid TagId { get; set; }

    // Navigation properties
    public Contact Contact { get; set; } = null!;
    public Tag Tag { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\EmailAddress.cs
SIZE: 0.43 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/EmailAddress.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class EmailAddress
{
    public Guid Id { get; set; }
    public Guid ContactId { get; set; }
    public string Email { get; set; } = string.Empty;
    public EmailType Type { get; set; }
    public bool IsPrimary { get; set; }

    // Navigation property
    public Contact Contact { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\EmailType.cs
SIZE: 0.17 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Enums/EmailType.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public enum EmailType
{
    Personal,
    Work,
    Other
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Group.cs
SIZE: 0.39 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Group.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Group
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
    public DateTime CreatedAt { get; set; }

    // Navigation property
    public List<ContactGroup> ContactGroups { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\PhoneNumber.cs
SIZE: 0.43 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/PhoneNumber.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class PhoneNumber
{
    public Guid Id { get; set; }
    public Guid ContactId { get; set; }
    public string Number { get; set; } = string.Empty;
    public PhoneType Type { get; set; }
    public bool IsPrimary { get; set; }

    // Navigation property
    public Contact Contact { get; set; } = null!;
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\PhoneType.cs
SIZE: 0.19 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Domain/Enums/PhoneType.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public enum PhoneType
{
    Mobile,
    Home,
    Work,
    Fax,
    Other
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Entities\Tag.cs
SIZE: 0.34 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Domain/Entities/Tag.cs
namespace MyOpenTelemetryApi.Domain.Entities;

public class Tag
{
    public Guid Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string? ColorHex { get; set; }

    // Navigation property
    public List<ContactTag> ContactTags { get; set; } = [];
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IContactRepository.cs
SIZE: 0.49 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IContactRepository.cs
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IContactRepository : IRepository<Contact>
{
    Task<IEnumerable<Contact>> GetContactsByGroupAsync(Guid groupId);
    Task<IEnumerable<Contact>> GetContactsByTagAsync(Guid tagId);
    Task<Contact?> GetContactWithDetailsAsync(Guid id);
    Task<IEnumerable<Contact>> SearchContactsAsync(string searchTerm);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IGroupRepository.cs
SIZE: 0.27 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IGroupRepository.cs
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IGroupRepository : IRepository<Group>
{
    Task<Group?> GetGroupWithContactsAsync(Guid id);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IRepository.cs
SIZE: 0.39 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IRepository.cs
namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IRepository<T> where T : class
{
    Task<T?> GetByIdAsync(Guid id);
    Task<IEnumerable<T>> GetAllAsync();
    IQueryable<T> GetQueryable(); // Added for efficient querying
    Task AddAsync(T entity);
    void Update(T entity);
    void Delete(T entity);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\ITagRepository.cs
SIZE: 0.26 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/ITagRepository.cs
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface ITagRepository : IRepository<Tag>
{
    Task<Tag?> GetByNameAsync(string name);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\Interfaces\IUnitOfWork.cs
SIZE: 0.34 KB
MODIFIED: 10/07/2025 12:27:06
================================================================================

// src/MyOpenTelemetryApi.Domain/Interfaces/IUnitOfWork.cs
namespace MyOpenTelemetryApi.Domain.Interfaces;

public interface IUnitOfWork
{
    IContactRepository Contacts { get; }
    IGroupRepository Groups { get; }
    ITagRepository Tags { get; }
    Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);
}



================================================================================
FILE: src\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj
SIZE: 0.14 KB
MODIFIED: 10/06/2025 14:29:28
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <!-- No additional packages or properties needed - inherits from Directory.Build.props -->

</Project>



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\AppDbContext.cs
SIZE: 1.03 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/AppDbContext.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data;

public class AppDbContext(DbContextOptions<AppDbContext> options) : DbContext(options)
{
    public DbSet<Contact> Contacts => Set<Contact>();
    public DbSet<EmailAddress> EmailAddresses => Set<EmailAddress>();
    public DbSet<PhoneNumber> PhoneNumbers => Set<PhoneNumber>();
    public DbSet<Address> Addresses => Set<Address>();
    public DbSet<Group> Groups => Set<Group>();
    public DbSet<Tag> Tags => Set<Tag>();
    public DbSet<ContactGroup> ContactGroups => Set<ContactGroup>();
    public DbSet<ContactTag> ContactTags => Set<ContactTag>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Apply all configurations from the current assembly
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(AppDbContext).Assembly);

        base.OnModelCreating(modelBuilder);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\AddressConfiguration.cs
SIZE: 0.96 KB
MODIFIED: 09/17/2025 16:46:24
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/AddressConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class AddressConfiguration : IEntityTypeConfiguration<Address>
{
    public void Configure(EntityTypeBuilder<Address> builder)
    {
        builder.HasKey(a => a.Id);

        builder.Property(a => a.StreetLine1).HasMaxLength(200);
        builder.Property(a => a.StreetLine2).HasMaxLength(200);
        builder.Property(a => a.City).HasMaxLength(100);
        builder.Property(a => a.StateProvince).HasMaxLength(100);
        builder.Property(a => a.PostalCode).HasMaxLength(20);
        builder.Property(a => a.Country).HasMaxLength(100);

        builder.Property(a => a.Type)
            .HasConversion<string>()
            .HasMaxLength(20);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactConfiguration.cs
SIZE: 1.59 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/ContactConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class ContactConfiguration : IEntityTypeConfiguration<Contact>
{
    public void Configure(EntityTypeBuilder<Contact> builder)
    {
        builder.HasKey(c => c.Id);

        builder.Property(c => c.FirstName)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(c => c.LastName)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(c => c.MiddleName)
            .HasMaxLength(100);

        builder.Property(c => c.Nickname)
            .HasMaxLength(50);

        builder.Property(c => c.Company)
            .HasMaxLength(200);

        builder.Property(c => c.JobTitle)
            .HasMaxLength(100);

        builder.Property(c => c.Notes)
            .HasMaxLength(1000);

        builder.HasMany(c => c.EmailAddresses)
            .WithOne(e => e.Contact)
            .HasForeignKey(e => e.ContactId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(c => c.PhoneNumbers)
            .WithOne(p => p.Contact)
            .HasForeignKey(p => p.ContactId)
            .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(c => c.Addresses)
            .WithOne(a => a.Contact)
            .HasForeignKey(a => a.ContactId)
            .OnDelete(DeleteBehavior.Cascade);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactGroupConfiguration.cs
SIZE: 0.79 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/ContactGroupConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class ContactGroupConfiguration : IEntityTypeConfiguration<ContactGroup>
{
    public void Configure(EntityTypeBuilder<ContactGroup> builder)
    {
        builder.HasKey(cg => new { cg.ContactId, cg.GroupId });

        builder.HasOne(cg => cg.Contact)
            .WithMany(c => c.ContactGroups)
            .HasForeignKey(cg => cg.ContactId);

        builder.HasOne(cg => cg.Group)
            .WithMany(g => g.ContactGroups)
            .HasForeignKey(cg => cg.GroupId);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\ContactTagConfiguration.cs
SIZE: 0.76 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/ContactTagConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class ContactTagConfiguration : IEntityTypeConfiguration<ContactTag>
{
    public void Configure(EntityTypeBuilder<ContactTag> builder)
    {
        builder.HasKey(ct => new { ct.ContactId, ct.TagId });

        builder.HasOne(ct => ct.Contact)
            .WithMany(c => c.Tags)
            .HasForeignKey(ct => ct.ContactId);

        builder.HasOne(ct => ct.Tag)
            .WithMany(t => t.ContactTags)
            .HasForeignKey(ct => ct.TagId);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\EmailAddressConfiguration.cs
SIZE: 0.73 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/EmailAddressConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class EmailAddressConfiguration : IEntityTypeConfiguration<EmailAddress>
{
    public void Configure(EntityTypeBuilder<EmailAddress> builder)
    {
        builder.HasKey(e => e.Id);

        builder.Property(e => e.Email)
            .IsRequired()
            .HasMaxLength(254); // Standard email max length

        builder.Property(e => e.Type)
            .HasConversion<string>()
            .HasMaxLength(20);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\GroupConfiguration.cs
SIZE: 0.64 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/GroupConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class GroupConfiguration : IEntityTypeConfiguration<Group>
{
    public void Configure(EntityTypeBuilder<Group> builder)
    {
        builder.HasKey(g => g.Id);

        builder.Property(g => g.Name)
            .IsRequired()
            .HasMaxLength(100);

        builder.Property(g => g.Description)
            .HasMaxLength(500);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\PhoneNumberConfiguration.cs
SIZE: 0.7 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/PhoneNumberConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class PhoneNumberConfiguration : IEntityTypeConfiguration<PhoneNumber>
{
    public void Configure(EntityTypeBuilder<PhoneNumber> builder)
    {
        builder.HasKey(p => p.Id);

        builder.Property(p => p.Number)
            .IsRequired()
            .HasMaxLength(50);

        builder.Property(p => p.Type)
            .HasConversion<string>()
            .HasMaxLength(20);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Configurations\TagConfiguration.cs
SIZE: 0.7 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Data/Configurations/TagConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Data.Configurations;

public class TagConfiguration : IEntityTypeConfiguration<Tag>
{
    public void Configure(EntityTypeBuilder<Tag> builder)
    {
        builder.HasKey(t => t.Id);

        builder.Property(t => t.Name)
            .IsRequired()
            .HasMaxLength(50);

        builder.Property(t => t.ColorHex)
            .HasMaxLength(7); // #RRGGBB format

        builder.HasIndex(t => t.Name).IsUnique();
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.cs
SIZE: 11.04 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Contacts",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    FirstName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    MiddleName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Nickname = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true),
                    Company = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true),
                    JobTitle = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    DateOfBirth = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Notes = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contacts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Groups",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Groups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Tags",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    ColorHex = table.Column<string>(type: "character varying(7)", maxLength: 7, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Addresses",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    StreetLine1 = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true),
                    StreetLine2 = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true),
                    City = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    StateProvince = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    PostalCode = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                    Country = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    Type = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    IsPrimary = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Addresses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Addresses_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmailAddresses",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    Email = table.Column<string>(type: "character varying(254)", maxLength: 254, nullable: false),
                    Type = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    IsPrimary = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmailAddresses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmailAddresses_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PhoneNumbers",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    Number = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    Type = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    IsPrimary = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhoneNumbers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PhoneNumbers_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ContactGroups",
                columns: table => new
                {
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    GroupId = table.Column<Guid>(type: "uuid", nullable: false),
                    AddedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactGroups", x => new { x.ContactId, x.GroupId });
                    table.ForeignKey(
                        name: "FK_ContactGroups_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContactGroups_Groups_GroupId",
                        column: x => x.GroupId,
                        principalTable: "Groups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ContactTags",
                columns: table => new
                {
                    ContactId = table.Column<Guid>(type: "uuid", nullable: false),
                    TagId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactTags", x => new { x.ContactId, x.TagId });
                    table.ForeignKey(
                        name: "FK_ContactTags_Contacts_ContactId",
                        column: x => x.ContactId,
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContactTags_Tags_TagId",
                        column: x => x.TagId,
                        principalTable: "Tags",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Addresses_ContactId",
                table: "Addresses",
                column: "ContactId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactGroups_GroupId",
                table: "ContactGroups",
                column: "GroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactTags_TagId",
                table: "ContactTags",
                column: "TagId");

            migrationBuilder.CreateIndex(
                name: "IX_EmailAddresses_ContactId",
                table: "EmailAddresses",
                column: "ContactId");

            migrationBuilder.CreateIndex(
                name: "IX_PhoneNumbers_ContactId",
                table: "PhoneNumbers",
                column: "ContactId");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_Name",
                table: "Tags",
                column: "Name",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Addresses");

            migrationBuilder.DropTable(
                name: "ContactGroups");

            migrationBuilder.DropTable(
                name: "ContactTags");

            migrationBuilder.DropTable(
                name: "EmailAddresses");

            migrationBuilder.DropTable(
                name: "PhoneNumbers");

            migrationBuilder.DropTable(
                name: "Groups");

            migrationBuilder.DropTable(
                name: "Tags");

            migrationBuilder.DropTable(
                name: "Contacts");
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20250804231722_InitialCreate.Designer.cs
SIZE: 12.92 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOpenTelemetryApi.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250804231722_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactGroups")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Group", "Group")
                        .WithMany("ContactGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactGroups");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Navigation("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.cs
SIZE: 1.96 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// This is what to paste into the generated migration file
// After running: dotnet ef migrations add AddContactPaginationIndexes
// Find the file in: src/MyOpenTelemetryApi.Infrastructure/Data/Migrations/
// It will be named something like: 20251003182600_AddContactPaginationIndexes.cs

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    /// <inheritdoc />
    public partial class AddContactPaginationIndexes : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // Primary pagination index - for default sort by LastName, FirstName
            // This will dramatically improve query performance for the default sort order
            migrationBuilder.CreateIndex(
                name: "IX_Contacts_LastName_FirstName_Id",
                table: "Contacts",
                columns: new[] { "LastName", "FirstName", "Id" });

            // Additional sort option indexes for other sort orders
            migrationBuilder.CreateIndex(
                name: "IX_Contacts_Company_Id",
                table: "Contacts",
                columns: new[] { "Company", "Id" });

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_FirstName_Id",
                table: "Contacts",
                columns: new[] { "FirstName", "Id" });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_Contacts_LastName_FirstName_Id",
                table: "Contacts");

            migrationBuilder.DropIndex(
                name: "IX_Contacts_Company_Id",
                table: "Contacts");

            migrationBuilder.DropIndex(
                name: "IX_Contacts_FirstName_Id",
                table: "Contacts");
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\20251003222820_AddContactPaginationIndexes.Designer.cs
SIZE: 12.96 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOpenTelemetryApi.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251003222820_AddContactPaginationIndexes")]
    partial class AddContactPaginationIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactGroups")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Group", "Group")
                        .WithMany("ContactGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactGroups");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Navigation("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Data\Migrations\AppDbContextModelSnapshot.cs
SIZE: 12.83 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyOpenTelemetryApi.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyOpenTelemetryApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetLine1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactGroup", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactGroups")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Group", "Group")
                        .WithMany("ContactGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.ContactTag", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.EmailAddress", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("MyOpenTelemetryApi.Domain.Entities.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactGroups");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Group", b =>
                {
                    b.Navigation("ContactGroups");
                });

            modelBuilder.Entity("MyOpenTelemetryApi.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\MyOpenTelemetryApi.Infrastructure.csproj
SIZE: 0.58 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\MyOpenTelemetryApi.Domain\MyOpenTelemetryApi.Domain.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore"/>
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL"/>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\ContactRepository.cs
SIZE: 2.21 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/ContactRepository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class ContactRepository(AppDbContext context) : Repository<Contact>(context), IContactRepository
{
    public async Task<IEnumerable<Contact>> GetContactsByGroupAsync(Guid groupId)
    {
        return await _context.Contacts
            .Include(c => c.ContactGroups)
            .Where(c => c.ContactGroups.Any(cg => cg.GroupId == groupId))
            .ToListAsync();
    }

    public async Task<IEnumerable<Contact>> GetContactsByTagAsync(Guid tagId)
    {
        return await _context.Contacts
            .Include(c => c.Tags)
            .Where(c => c.Tags.Any(ct => ct.TagId == tagId))
            .ToListAsync();
    }

    public async Task<Contact?> GetContactWithDetailsAsync(Guid id)
    {
        return await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Include(c => c.Addresses)
            .Include(c => c.ContactGroups)
                .ThenInclude(cg => cg.Group)
            .Include(c => c.Tags)
                .ThenInclude(ct => ct.Tag)
            .FirstOrDefaultAsync(c => c.Id == id);
    }

    public async Task<IEnumerable<Contact>> SearchContactsAsync(string searchTerm)
    {
        string lowerSearchTerm = searchTerm.ToLower();

        return await _context.Contacts
            .Include(c => c.EmailAddresses)
            .Include(c => c.PhoneNumbers)
            .Where(c =>
                c.FirstName.ToLower().Contains(lowerSearchTerm) ||
                c.LastName.ToLower().Contains(lowerSearchTerm) ||
                (c.Nickname != null && c.Nickname.ToLower().Contains(lowerSearchTerm)) ||
                (c.Company != null && c.Company.ToLower().Contains(lowerSearchTerm)) ||
                c.EmailAddresses.Any(e => e.Email.ToLower().Contains(lowerSearchTerm)) ||
                c.PhoneNumbers.Any(p => p.Number.Contains(searchTerm)))
            .ToListAsync();
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\GroupRepository.cs
SIZE: 0.66 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/GroupRepository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class GroupRepository(AppDbContext context) : Repository<Group>(context), IGroupRepository
{
    public async Task<Group?> GetGroupWithContactsAsync(Guid id)
    {
        return await _context.Groups
            .Include(g => g.ContactGroups)
                .ThenInclude(cg => cg.Contact)
            .FirstOrDefaultAsync(g => g.Id == id);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\Repository.cs
SIZE: 1.07 KB
MODIFIED: 10/03/2025 19:49:51
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/Repository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class Repository<T>(AppDbContext context) : IRepository<T> where T : class
{
    protected readonly AppDbContext _context = context;
    protected readonly DbSet<T> _dbSet = context.Set<T>();

    public virtual async Task<T?> GetByIdAsync(Guid id)
    {
        return await _dbSet.FindAsync(id);
    }

    public virtual async Task<IEnumerable<T>> GetAllAsync()
    {
        return await _dbSet.ToListAsync();
    }

    public virtual IQueryable<T> GetQueryable()
    {
        return _dbSet.AsQueryable();
    }

    public virtual async Task AddAsync(T entity)
    {
        await _dbSet.AddAsync(entity);
    }

    public virtual void Update(T entity)
    {
        _dbSet.Update(entity);
    }

    public virtual void Delete(T entity)
    {
        _dbSet.Remove(entity);
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\TagRepository.cs
SIZE: 0.58 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/TagRepository.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class TagRepository(AppDbContext context) : Repository<Tag>(context), ITagRepository
{
    public async Task<Tag?> GetByNameAsync(string name)
    {
        return await _context.Tags
            .FirstOrDefaultAsync(t => t.Name.ToLower() == name.ToLower());
    }
}



================================================================================
FILE: src\MyOpenTelemetryApi.Infrastructure\Repositories\UnitOfWork.cs
SIZE: 1.31 KB
MODIFIED: 09/17/2025 14:51:00
================================================================================

// src/MyOpenTelemetryApi.Infrastructure/Repositories/UnitOfWork.cs
using MyOpenTelemetryApi.Domain.Interfaces;
using MyOpenTelemetryApi.Infrastructure.Data;

namespace MyOpenTelemetryApi.Infrastructure.Repositories;

public class UnitOfWork : IUnitOfWork, IDisposable
{
    private readonly AppDbContext _context;
    private IContactRepository? _contacts;
    private IGroupRepository? _groups;
    private ITagRepository? _tags;
    private bool _disposed;

    public UnitOfWork(AppDbContext context)
    {
        _context = context;
    }

    public IContactRepository Contacts => _contacts ??= new ContactRepository(_context);
    public IGroupRepository Groups => _groups ??= new GroupRepository(_context);
    public ITagRepository Tags => _tags ??= new TagRepository(_context);

    public async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        return await _context.SaveChangesAsync(cancellationToken);
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                _context.Dispose();
            }
            _disposed = true;
        }
    }
}



================================================================================
FILE: tests\MyOpenTelemetryApi.Api.Tests\MyOpenTelemetryApi.Api.Tests.csproj
SIZE: 1.03 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk"/>
    <PackageReference Include="xunit"/>
    <PackageReference Include="xunit.analyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: tests\MyOpenTelemetryApi.Api.Tests\UnitTest1.cs
SIZE: 1.99 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// tests/MyOpenTelemetryApi.Api.Tests/ApiTests.cs
using MyOpenTelemetryApi.Application.DTOs;

namespace MyOpenTelemetryApi.Api.Tests;

public class ApiTests
{
    [Fact]
    public void HealthController_Constructor_DoesNotThrow()
    {
        // This is a simple test to verify the test project is set up correctly
        Assert.True(true);
    }

    [Fact]
    public void PaginatedResultDto_CalculatesTotalPagesCorrectly()
    {
        // Arrange
        PaginatedResultDto<string> result = new()
        {
            TotalCount = 95,
            PageSize = 10
        };

        // Act & Assert
        Assert.Equal(10, result.TotalPages);
    }

    [Fact]
    public void PaginatedResultDto_HasPreviousPage_WorksCorrectly()
    {
        // Arrange
        PaginatedResultDto<string> result1 = new() { PageNumber = 1 };
        PaginatedResultDto<string> result2 = new() { PageNumber = 2 };

        // Act & Assert
        Assert.False(result1.HasPreviousPage);
        Assert.True(result2.HasPreviousPage);
    }

    [Fact]
    public void PaginatedResultDto_HasNextPage_WorksCorrectly()
    {
        // Arrange
        PaginatedResultDto<string> result = new()
        {
            PageNumber = 3,
            PageSize = 10,
            TotalCount = 25
        };

        // Act & Assert
        Assert.False(result.HasNextPage); // Page 3 is the last page (25 items / 10 per page)
    }

    [Theory]
    [InlineData(0, 10, 0)]
    [InlineData(1, 10, 1)]
    [InlineData(10, 10, 1)]
    [InlineData(11, 10, 2)]
    [InlineData(100, 10, 10)]
    [InlineData(101, 10, 11)]
    public void PaginatedResultDto_TotalPages_CalculatesCorrectly(int totalCount, int pageSize, int expectedPages)
    {
        // Arrange
        PaginatedResultDto<string> result = new()
        {
            TotalCount = totalCount,
            PageSize = pageSize
        };

        // Act & Assert
        Assert.Equal(expectedPages, result.TotalPages);
    }
}



================================================================================
FILE: tests\MyOpenTelemetryApi.Application.Tests\MyOpenTelemetryApi.Application.Tests.csproj
SIZE: 1.03 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================


<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk"/>
    <PackageReference Include="xunit"/>
    <PackageReference Include="xunit.analyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: tests\MyOpenTelemetryApi.Application.Tests\UnitTest1.cs
SIZE: 3.43 KB
MODIFIED: 09/17/2025 11:07:20
================================================================================

// tests/MyOpenTelemetryApi.Application.Tests/ApplicationTests.cs
using MyOpenTelemetryApi.Application.DTOs;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Application.Tests;

public class ApplicationTests
{
    [Fact]
    public void ContactDto_Initialization_SetsDefaultValues()
    {
        // Arrange & Act
        ContactDto dto = new();

        // Assert
        Assert.NotNull(dto.FirstName);
        Assert.NotNull(dto.LastName);
        Assert.NotNull(dto.EmailAddresses);
        Assert.NotNull(dto.PhoneNumbers);
        Assert.NotNull(dto.Addresses);
        Assert.NotNull(dto.Groups);
        Assert.NotNull(dto.Tags);
        Assert.Empty(dto.EmailAddresses);
        Assert.Empty(dto.PhoneNumbers);
    }

    [Fact]
    public void CreateContactDto_Initialization_SetsDefaultValues()
    {
        // Arrange & Act
        CreateContactDto dto = new();

        // Assert
        Assert.NotNull(dto.FirstName);
        Assert.NotNull(dto.LastName);
        Assert.NotNull(dto.EmailAddresses);
        Assert.NotNull(dto.PhoneNumbers);
        Assert.NotNull(dto.Addresses);
        Assert.NotNull(dto.GroupIds);
        Assert.NotNull(dto.TagIds);
    }

    [Theory]
    [InlineData("Personal", EmailType.Personal)]
    [InlineData("Work", EmailType.Work)]
    [InlineData("Other", EmailType.Other)]
    public void EmailType_ParsesCorrectly(string input, EmailType expected)
    {
        // Act
        EmailType result = Enum.Parse<EmailType>(input);

        // Assert
        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("Mobile", PhoneType.Mobile)]
    [InlineData("Home", PhoneType.Home)]
    [InlineData("Work", PhoneType.Work)]
    [InlineData("Fax", PhoneType.Fax)]
    [InlineData("Other", PhoneType.Other)]
    public void PhoneType_ParsesCorrectly(string input, PhoneType expected)
    {
        // Act
        PhoneType result = Enum.Parse<PhoneType>(input);

        // Assert
        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("Home", AddressType.Home)]
    [InlineData("Work", AddressType.Work)]
    [InlineData("Other", AddressType.Other)]
    public void AddressType_ParsesCorrectly(string input, AddressType expected)
    {
        // Act
        AddressType result = Enum.Parse<AddressType>(input);

        // Assert
        Assert.Equal(expected, result);
    }

    [Fact]
    public void TagDto_CanBeCreatedWithName()
    {
        // Arrange & Act
        TagDto tag = new()
        {
            Id = Guid.NewGuid(),
            Name = "Important",
            ColorHex = "#FF0000"
        };

        // Assert
        Assert.NotEqual(Guid.Empty, tag.Id);
        Assert.Equal("Important", tag.Name);
        Assert.Equal("#FF0000", tag.ColorHex);
    }

    [Fact]
    public void GroupDto_ContactCountDefaultsToZero()
    {
        // Arrange & Act
        GroupDto group = new();

        // Assert
        Assert.Equal(0, group.ContactCount);
    }

    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData("Some notes")]
    public void UpdateContactDto_AcceptsVariousNoteValues(string? notes)
    {
        // Arrange & Act
        UpdateContactDto dto = new()
        {
            FirstName = "John",
            LastName = "Doe",
            Notes = notes
        };

        // Assert
        Assert.Equal(notes, dto.Notes);
    }
}



================================================================================
FILE: tests\MyOpenTelemetryApi.Infrastructure.Tests\MyOpenTelemetryApi.Infrastructure.Tests.csproj
SIZE: 1.03 KB
MODIFIED: 10/06/2025 16:30:03
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk"/>
    <PackageReference Include="xunit"/>
    <PackageReference Include="xunit.analyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\MyOpenTelemetryApi.Api\MyOpenTelemetryApi.Api.csproj" />
  </ItemGroup>

</Project>



================================================================================
FILE: tests\MyOpenTelemetryApi.Infrastructure.Tests\UnitTest1.cs
SIZE: 5.61 KB
MODIFIED: 09/17/2025 16:46:25
================================================================================

// tests/MyOpenTelemetryApi.Infrastructure.Tests/InfrastructureTests.cs
using Microsoft.EntityFrameworkCore;
using MyOpenTelemetryApi.Domain.Entities;

namespace MyOpenTelemetryApi.Infrastructure.Tests;

public class InfrastructureTests
{
    [Fact]
    public void Contact_Entity_HasCorrectDefaults()
    {
        // Arrange & Act
        Contact contact = new();

        // Assert
        Assert.NotNull(contact.FirstName);
        Assert.NotNull(contact.LastName);
        Assert.NotNull(contact.EmailAddresses);
        Assert.NotNull(contact.PhoneNumbers);
        Assert.NotNull(contact.Addresses);
        Assert.NotNull(contact.ContactGroups);
        Assert.NotNull(contact.Tags);
        Assert.Empty(contact.EmailAddresses);
        Assert.Empty(contact.PhoneNumbers);
        Assert.Empty(contact.Addresses);
        Assert.Empty(contact.ContactGroups);
        Assert.Empty(contact.Tags);
    }

    [Fact]
    public void EmailAddress_Entity_CanBeCreated()
    {
        // Arrange & Act
        EmailAddress email = new()
        {
            Id = Guid.NewGuid(),
            ContactId = Guid.NewGuid(),
            Email = "test@example.com",
            Type = EmailType.Personal,
            IsPrimary = true
        };

        // Assert
        Assert.NotEqual(Guid.Empty, email.Id);
        Assert.NotEqual(Guid.Empty, email.ContactId);
        Assert.Equal("test@example.com", email.Email);
        Assert.Equal(EmailType.Personal, email.Type);
        Assert.True(email.IsPrimary);
    }

    [Fact]
    public void PhoneNumber_Entity_CanBeCreated()
    {
        // Arrange & Act
        PhoneNumber phone = new()
        {
            Id = Guid.NewGuid(),
            ContactId = Guid.NewGuid(),
            Number = "+1-555-123-4567",
            Type = PhoneType.Mobile,
            IsPrimary = true
        };

        // Assert
        Assert.NotEqual(Guid.Empty, phone.Id);
        Assert.NotEqual(Guid.Empty, phone.ContactId);
        Assert.Equal("+1-555-123-4567", phone.Number);
        Assert.Equal(PhoneType.Mobile, phone.Type);
        Assert.True(phone.IsPrimary);
    }

    [Fact]
    public void Address_Entity_CanBeCreated()
    {
        // Arrange & Act
        Address address = new()
        {
            Id = Guid.NewGuid(),
            ContactId = Guid.NewGuid(),
            StreetLine1 = "123 Main St",
            City = "Springfield",
            StateProvince = "IL",
            PostalCode = "62701",
            Country = "USA",
            Type = AddressType.Home,
            IsPrimary = true
        };

        // Assert
        Assert.NotEqual(Guid.Empty, address.Id);
        Assert.NotEqual(Guid.Empty, address.ContactId);
        Assert.Equal("123 Main St", address.StreetLine1);
        Assert.Equal("Springfield", address.City);
        Assert.Equal("IL", address.StateProvince);
        Assert.Equal("62701", address.PostalCode);
        Assert.Equal("USA", address.Country);
        Assert.Equal(AddressType.Home, address.Type);
        Assert.True(address.IsPrimary);
    }

    [Fact]
    public void Group_Entity_HasCorrectDefaults()
    {
        // Arrange & Act
        Group group = new();

        // Assert
        Assert.NotNull(group.Name);
        Assert.NotNull(group.ContactGroups);
        Assert.Empty(group.ContactGroups);
    }

    [Fact]
    public void Tag_Entity_HasCorrectDefaults()
    {
        // Arrange & Act
        Tag tag = new();

        // Assert
        Assert.NotNull(tag.Name);
        Assert.NotNull(tag.ContactTags);
        Assert.Empty(tag.ContactTags);
    }

    [Fact]
    public void ContactGroup_JoinEntity_CanBeCreated()
    {
        // Arrange
        Guid contactId = Guid.NewGuid();
        Guid groupId = Guid.NewGuid();
        DateTime addedAt = DateTime.UtcNow;

        // Act
        ContactGroup contactGroup = new()
        {
            ContactId = contactId,
            GroupId = groupId,
            AddedAt = addedAt
        };

        // Assert
        Assert.Equal(contactId, contactGroup.ContactId);
        Assert.Equal(groupId, contactGroup.GroupId);
        Assert.Equal(addedAt, contactGroup.AddedAt);
    }

    [Fact]
    public void ContactTag_JoinEntity_CanBeCreated()
    {
        // Arrange
        Guid contactId = Guid.NewGuid();
        Guid tagId = Guid.NewGuid();

        // Act
        ContactTag contactTag = new()
        {
            ContactId = contactId,
            TagId = tagId
        };

        // Assert
        Assert.Equal(contactId, contactTag.ContactId);
        Assert.Equal(tagId, contactTag.TagId);
    }

    [Theory]
    [InlineData("#FF0000", true)]
    [InlineData("#00FF00", true)]
    [InlineData("#0000FF", true)]
    [InlineData("#GGGGGG", false)]
    [InlineData("FF0000", false)]
    [InlineData("#FF00", false)]
    [InlineData(null, true)]
    [InlineData("", true)]
    public void Tag_ColorHex_ValidationPattern(string? colorHex, bool isValid)
    {
        // This tests the expected format for color hex values
        // Arrange & Act
        Tag tag = new() { Name = "Test", ColorHex = colorHex };

        // Assert
        if (isValid)
        {
            Assert.True(string.IsNullOrEmpty(tag.ColorHex) ||
                       (tag.ColorHex.Length == 7 && tag.ColorHex.StartsWith('#')));
        }
        else
        {
            Assert.False(tag.ColorHex?.Length == 7 &&
                        tag.ColorHex.StartsWith('#') &&
                        tag.ColorHex.Skip(1).All(c => "0123456789ABCDEFabcdef".Contains(c)));
        }
    }
}



===============================================================================
EXPORT COMPLETED: 10/09/2025 07:21:00
Total Files Exported: 92
Output File: D:\DEV\MyOpenTelemetryApi\my_project_export.txt
===============================================================================
